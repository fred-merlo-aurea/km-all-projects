@model UAD.Web.Admin.Models.ProductTypes

<script>
    $(document).ready(function () {
        //window.addEventListener('beforeunload', recordeCloseTime);
        //Prevent user from submitting form using Enter
        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetProductTypeSortOrder", "ProductType")',
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $("#ddlSortOrder").empty();
                $.each(data, function (index, item) {
                    $('#ddlSortOrder').append($('<option></option>').val(item.Value).html(item.Text));
                });
                if (@Model.SortOrder == 0)
                    $('#ddlSortOrder').val("");
                else
                    $('#ddlSortOrder').val(@Model.SortOrder);
            },
            error: function (data) {
                console.log(data);
                alert("An error has occured!!!");
            }
        });

        $("#btnSave").click(function (event) {
            if ($("#frmProductType").valid()) {
                event.preventDefault();
                saveProductType();

            }
        });

        var saveProductType=function() {
            var modelData = {
                PubTypeID: @Html.Raw(Json.Encode(Model.PubTypeID)),
                PubTypeDisplayName: $("#txtPubTypeDisplayName").val(),
                ColumnReference: $("#txtPubTypeDisplayName").val(),
                IsActive: $("#ddlIsActive").val(),
                SortOrder: $("#ddlSortOrder").val(),
                DateCreated: @Html.Raw(Json.Encode(Model.DateCreated)),
                CreatedByUserID: @Html.Raw(Json.Encode(Model.CreatedByUserID)),
                DateUpdated: @Html.Raw(Json.Encode(Model.DateUpdated)),
                UpdatedByUserID: @Html.Raw(Json.Encode(Model.UpdatedByUserID)),
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddEdit", "ProductType")',
                data: JSON.stringify( modelData ),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    var result =JSON.parse(response);
                    if (result.Success)
                    {
                        var data = {
                            type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                            text: result.Text,
                            autoClose: false,
                            action: closeProductType,
                            IsOpen: false
                        }
                        showMessage(data);
                    }
                    else
                    {
                        $("#alertMsg").html(result.Text);
                        $("#alertDiv").show();
                    }
                },
                error: function (data) {
                    console.log(data);
                    alert("An error has occured!!!");
                }
            });
        }
    });

    function closeProductType() {
        window.location = '@Url.Action("Index", "ProductType")';
    }

    function showAlert() {
        showMessage({
            type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Confirm',
            text: "Any unsaved data will be lost by leaving this page. Do you wish to continue?",
            autoClose: false,
            IsOpen: false,
            action: closeProductType,
        });
        return false;
    }
</script>
<style>
    th, td {
        padding: 5px;
    }

    .help-block ul {
        list-style-type: none;
    }

    .has-error .help-block,
    .has-error .control-label,
    .has-error .form-control-feedback {
        color: #e80c4d;
    }

    .has-error .form-control:focus,
    .has-error .form-control {
        border-color : #e80c4d;
        box-shadow : #e80c4d;
    }

</style>
<div class="gridttl" id="topDiv">
    <div class="gridttlbox">
        <span>@ViewBag.Title</span>
    </div>
</div>
@using (Html.BeginForm("AddEdit", "ProductType", FormMethod.Post, new { role = "form", id = "frmProductType", data_toggle = "validator" }))
{
    @Html.HiddenFor(e => e.PubTypeID )
    @Html.HiddenFor(e => e.DateCreated)
    @Html.HiddenFor(e => e.CreatedByUserID)
    <table>
        <tr>
            <td colspan="2">
                <div id="alertDiv" style="display:none;color:red;margin:5px 0 0 0;">
                    <span style="float:left;"><img src='@Url.Content("~/Images/Notifications/Error_New.png")' style="margin:0px;padding:0px;" /></span>
                    <span id="alertMsg" class="message-error"></span>
                </div>
            </td>
        </tr>
        <tr>
            <td align="right" valign="middle" width="50%"><span style="color:red;font-weight:bold;">*</span>@Html.LabelFor(e => e.PubTypeDisplayName, new { @class = "control-label" })</td>
            <td width="50%">
                <div class="form-group">
                    <div style="float:left">
                        @Html.TextBoxFor(e => e.PubTypeDisplayName, new
                   {
                       id = "txtPubTypeDisplayName",
                       @class = "form-control",
                       type = "text",
                       required = "required",
                       data_required_error = " Please provide Display Name",
                       @maxlength = "50",
                       style = "height:70%; width:270px; Color:Black;",
                   })
                    </div>
                    <div style="float:left;  padding-left:10px;">
                        <div class="help-block with-errors" style="height:10px; font-weight:bold;"></div>
                    </div>                
                </div>
            <td>
        </tr>
        <tr>
            <td align="right" valign="middle">@Html.LabelFor(e => e.SortOrder, new { @class = "control-label" })</td>
            <td>
                <div class="form-group">
                    <div style="float:left;">
                        @Html.DropDownListFor(e => e.SortOrder, new SelectList(string.Empty, "Value", "Text"), "Select Sort Order", new { id = "ddlSortOrder", @class = "form-control", required = "required", style = "height:70%; width:250px;", data_required_error = "Please select Sort Order" })
                    </div>
                    <div style="float:left;  padding-left:10px;">
                        <div class="help-block with-errors" style="height:10px; font-weight:bold;"></div>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td align="right" valign="middle">@Html.LabelFor(e => e.IsActive, new { @class = "control-label" })</td>
            <td>
                @Html.DropDownListFor(e => e.IsActive,
                new List<SelectListItem>
                    {
                       new SelectListItem { Value = "True" , Text = "Yes" },
                       new SelectListItem { Value = "False" , Text = "No" },
                    },
                     new { style = "height:70%; width:270px;", id = "ddlIsActive" })            
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <button type="submit" class="btn-blue2" id="btnSave">Save</button>
                <button type="button" class="btn-blue2" id="btnCancel" onclick="return showAlert()">Cancel</button>
            </td>
        </tr>
    </table>
}

