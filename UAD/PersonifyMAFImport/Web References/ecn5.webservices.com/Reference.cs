//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace PersonifyMAFImport.ecn5.webservices.com {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ListManagerSoap", Namespace="http://webservices.ecn5.com/")]
    public partial class ListManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListEmailProfilesByEmailAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFiltersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolder1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriberCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubscriberOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCustomFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnsubscribeSubscriberOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCustomFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscribersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscribersWithDupesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscribersWithDupesUsingSmartFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscriberUsingSmartFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToMasterSuppressionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriberStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEmailAddressOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ListManager() {
            this.Url = global::PersonifyMAFImport.Properties.Settings.Default.PersonifyMAFImport_ecn5_webservices_com_ListManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetListEmailProfilesByEmailAddressCompletedEventHandler GetListEmailProfilesByEmailAddressCompleted;
        
        /// <remarks/>
        public event GetCustomFieldsCompletedEventHandler GetCustomFieldsCompleted;
        
        /// <remarks/>
        public event GetFiltersCompletedEventHandler GetFiltersCompleted;
        
        /// <remarks/>
        public event AddListCompletedEventHandler AddListCompleted;
        
        /// <remarks/>
        public event AddList1CompletedEventHandler AddList1Completed;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event AddFolder1CompletedEventHandler AddFolder1Completed;
        
        /// <remarks/>
        public event GetListsCompletedEventHandler GetListsCompleted;
        
        /// <remarks/>
        public event GetListByNameCompletedEventHandler GetListByNameCompleted;
        
        /// <remarks/>
        public event GetSubscriberCountCompletedEventHandler GetSubscriberCountCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event DeleteListCompletedEventHandler DeleteListCompleted;
        
        /// <remarks/>
        public event DeleteSubscriberCompletedEventHandler DeleteSubscriberCompleted;
        
        /// <remarks/>
        public event DeleteCustomFieldCompletedEventHandler DeleteCustomFieldCompleted;
        
        /// <remarks/>
        public event UnsubscribeSubscriberCompletedEventHandler UnsubscribeSubscriberCompleted;
        
        /// <remarks/>
        public event UpdateListCompletedEventHandler UpdateListCompleted;
        
        /// <remarks/>
        public event UpdateList1CompletedEventHandler UpdateList1Completed;
        
        /// <remarks/>
        public event UpdateCustomFieldCompletedEventHandler UpdateCustomFieldCompleted;
        
        /// <remarks/>
        public event AddCustomFieldCompletedEventHandler AddCustomFieldCompleted;
        
        /// <remarks/>
        public event AddSubscribersCompletedEventHandler AddSubscribersCompleted;
        
        /// <remarks/>
        public event AddSubscribersWithDupesCompletedEventHandler AddSubscribersWithDupesCompleted;
        
        /// <remarks/>
        public event AddSubscribersWithDupesUsingSmartFormCompletedEventHandler AddSubscribersWithDupesUsingSmartFormCompleted;
        
        /// <remarks/>
        public event AddSubscriberUsingSmartFormCompletedEventHandler AddSubscriberUsingSmartFormCompleted;
        
        /// <remarks/>
        public event AddToMasterSuppressionListCompletedEventHandler AddToMasterSuppressionListCompleted;
        
        /// <remarks/>
        public event GetSubscriberStatusCompletedEventHandler GetSubscriberStatusCompleted;
        
        /// <remarks/>
        public event UpdateEmailAddressCompletedEventHandler UpdateEmailAddressCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetFolders", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolders(string ecnAccessKey) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey) {
            this.GetFoldersAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        ecnAccessKey}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetListEmailProfilesByEmailAddress", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListEmailProfilesByEmailAddress(string ecnAccessKey, int listID, string emailAddress) {
            object[] results = this.Invoke("GetListEmailProfilesByEmailAddress", new object[] {
                        ecnAccessKey,
                        listID,
                        emailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListEmailProfilesByEmailAddressAsync(string ecnAccessKey, int listID, string emailAddress) {
            this.GetListEmailProfilesByEmailAddressAsync(ecnAccessKey, listID, emailAddress, null);
        }
        
        /// <remarks/>
        public void GetListEmailProfilesByEmailAddressAsync(string ecnAccessKey, int listID, string emailAddress, object userState) {
            if ((this.GetListEmailProfilesByEmailAddressOperationCompleted == null)) {
                this.GetListEmailProfilesByEmailAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListEmailProfilesByEmailAddressOperationCompleted);
            }
            this.InvokeAsync("GetListEmailProfilesByEmailAddress", new object[] {
                        ecnAccessKey,
                        listID,
                        emailAddress}, this.GetListEmailProfilesByEmailAddressOperationCompleted, userState);
        }
        
        private void OnGetListEmailProfilesByEmailAddressOperationCompleted(object arg) {
            if ((this.GetListEmailProfilesByEmailAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListEmailProfilesByEmailAddressCompleted(this, new GetListEmailProfilesByEmailAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetCustomFields", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomFields(string ecnAccessKey, int listID) {
            object[] results = this.Invoke("GetCustomFields", new object[] {
                        ecnAccessKey,
                        listID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomFieldsAsync(string ecnAccessKey, int listID) {
            this.GetCustomFieldsAsync(ecnAccessKey, listID, null);
        }
        
        /// <remarks/>
        public void GetCustomFieldsAsync(string ecnAccessKey, int listID, object userState) {
            if ((this.GetCustomFieldsOperationCompleted == null)) {
                this.GetCustomFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomFieldsOperationCompleted);
            }
            this.InvokeAsync("GetCustomFields", new object[] {
                        ecnAccessKey,
                        listID}, this.GetCustomFieldsOperationCompleted, userState);
        }
        
        private void OnGetCustomFieldsOperationCompleted(object arg) {
            if ((this.GetCustomFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomFieldsCompleted(this, new GetCustomFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetFilters", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilters(string ecnAccessKey, int listID) {
            object[] results = this.Invoke("GetFilters", new object[] {
                        ecnAccessKey,
                        listID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFiltersAsync(string ecnAccessKey, int listID) {
            this.GetFiltersAsync(ecnAccessKey, listID, null);
        }
        
        /// <remarks/>
        public void GetFiltersAsync(string ecnAccessKey, int listID, object userState) {
            if ((this.GetFiltersOperationCompleted == null)) {
                this.GetFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFiltersOperationCompleted);
            }
            this.InvokeAsync("GetFilters", new object[] {
                        ecnAccessKey,
                        listID}, this.GetFiltersOperationCompleted, userState);
        }
        
        private void OnGetFiltersOperationCompleted(object arg) {
            if ((this.GetFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFiltersCompleted(this, new GetFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddList", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddList(string ecnAccessKey, string listName, string listDescription) {
            object[] results = this.Invoke("AddList", new object[] {
                        ecnAccessKey,
                        listName,
                        listDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddListAsync(string ecnAccessKey, string listName, string listDescription) {
            this.AddListAsync(ecnAccessKey, listName, listDescription, null);
        }
        
        /// <remarks/>
        public void AddListAsync(string ecnAccessKey, string listName, string listDescription, object userState) {
            if ((this.AddListOperationCompleted == null)) {
                this.AddListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddListOperationCompleted);
            }
            this.InvokeAsync("AddList", new object[] {
                        ecnAccessKey,
                        listName,
                        listDescription}, this.AddListOperationCompleted, userState);
        }
        
        private void OnAddListOperationCompleted(object arg) {
            if ((this.AddListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddListCompleted(this, new AddListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddList1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddListToFolder", RequestElementName="AddListToFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddListToFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddListToFolderResult")]
        public string AddList(string ecnAccessKey, string listName, string listDescription, int FolderID) {
            object[] results = this.Invoke("AddList1", new object[] {
                        ecnAccessKey,
                        listName,
                        listDescription,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddList1Async(string ecnAccessKey, string listName, string listDescription, int FolderID) {
            this.AddList1Async(ecnAccessKey, listName, listDescription, FolderID, null);
        }
        
        /// <remarks/>
        public void AddList1Async(string ecnAccessKey, string listName, string listDescription, int FolderID, object userState) {
            if ((this.AddList1OperationCompleted == null)) {
                this.AddList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddList1OperationCompleted);
            }
            this.InvokeAsync("AddList1", new object[] {
                        ecnAccessKey,
                        listName,
                        listDescription,
                        FolderID}, this.AddList1OperationCompleted, userState);
        }
        
        private void OnAddList1OperationCompleted(object arg) {
            if ((this.AddList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddList1Completed(this, new AddList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFolder(string ecnAccessKey, string folderName, string folderDescription) {
            object[] results = this.Invoke("AddFolder", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string folderName, string folderDescription) {
            this.AddFolderAsync(ecnAccessKey, folderName, folderDescription, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string folderName, string folderDescription, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new AddFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddFolder1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolderToParent", RequestElementName="AddFolderToParent", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddFolderToParentResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddFolderToParentResult")]
        public string AddFolder(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID) {
            object[] results = this.Invoke("AddFolder1", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription,
                        parentFolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID) {
            this.AddFolder1Async(ecnAccessKey, folderName, folderDescription, parentFolderID, null);
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID, object userState) {
            if ((this.AddFolder1OperationCompleted == null)) {
                this.AddFolder1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolder1OperationCompleted);
            }
            this.InvokeAsync("AddFolder1", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription,
                        parentFolderID}, this.AddFolder1OperationCompleted, userState);
        }
        
        private void OnAddFolder1OperationCompleted(object arg) {
            if ((this.AddFolder1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolder1Completed(this, new AddFolder1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetLists", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLists(string ecnAccessKey) {
            object[] results = this.Invoke("GetLists", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListsAsync(string ecnAccessKey) {
            this.GetListsAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetListsAsync(string ecnAccessKey, object userState) {
            if ((this.GetListsOperationCompleted == null)) {
                this.GetListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListsOperationCompleted);
            }
            this.InvokeAsync("GetLists", new object[] {
                        ecnAccessKey}, this.GetListsOperationCompleted, userState);
        }
        
        private void OnGetListsOperationCompleted(object arg) {
            if ((this.GetListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListsCompleted(this, new GetListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetListByName", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListByName(string ecnAccessKey, string Name) {
            object[] results = this.Invoke("GetListByName", new object[] {
                        ecnAccessKey,
                        Name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListByNameAsync(string ecnAccessKey, string Name) {
            this.GetListByNameAsync(ecnAccessKey, Name, null);
        }
        
        /// <remarks/>
        public void GetListByNameAsync(string ecnAccessKey, string Name, object userState) {
            if ((this.GetListByNameOperationCompleted == null)) {
                this.GetListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListByNameOperationCompleted);
            }
            this.InvokeAsync("GetListByName", new object[] {
                        ecnAccessKey,
                        Name}, this.GetListByNameOperationCompleted, userState);
        }
        
        private void OnGetListByNameOperationCompleted(object arg) {
            if ((this.GetListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListByNameCompleted(this, new GetListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetSubscriberCount", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubscriberCount(string ecnAccessKey, int GroupID) {
            object[] results = this.Invoke("GetSubscriberCount", new object[] {
                        ecnAccessKey,
                        GroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriberCountAsync(string ecnAccessKey, int GroupID) {
            this.GetSubscriberCountAsync(ecnAccessKey, GroupID, null);
        }
        
        /// <remarks/>
        public void GetSubscriberCountAsync(string ecnAccessKey, int GroupID, object userState) {
            if ((this.GetSubscriberCountOperationCompleted == null)) {
                this.GetSubscriberCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriberCountOperationCompleted);
            }
            this.InvokeAsync("GetSubscriberCount", new object[] {
                        ecnAccessKey,
                        GroupID}, this.GetSubscriberCountOperationCompleted, userState);
        }
        
        private void OnGetSubscriberCountOperationCompleted(object arg) {
            if ((this.GetSubscriberCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriberCountCompleted(this, new GetSubscriberCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFolder(string ecnAccessKey, int FolderID) {
            object[] results = this.Invoke("DeleteFolder", new object[] {
                        ecnAccessKey,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ecnAccessKey, int FolderID) {
            this.DeleteFolderAsync(ecnAccessKey, FolderID, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ecnAccessKey, int FolderID, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        ecnAccessKey,
                        FolderID}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteList", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteList(string ecnAccessKey, int ListID) {
            object[] results = this.Invoke("DeleteList", new object[] {
                        ecnAccessKey,
                        ListID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteListAsync(string ecnAccessKey, int ListID) {
            this.DeleteListAsync(ecnAccessKey, ListID, null);
        }
        
        /// <remarks/>
        public void DeleteListAsync(string ecnAccessKey, int ListID, object userState) {
            if ((this.DeleteListOperationCompleted == null)) {
                this.DeleteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteListOperationCompleted);
            }
            this.InvokeAsync("DeleteList", new object[] {
                        ecnAccessKey,
                        ListID}, this.DeleteListOperationCompleted, userState);
        }
        
        private void OnDeleteListOperationCompleted(object arg) {
            if ((this.DeleteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteListCompleted(this, new DeleteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteSubscriber", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteSubscriber(string ecnAccessKey, int ListID, string EmailAddress) {
            object[] results = this.Invoke("DeleteSubscriber", new object[] {
                        ecnAccessKey,
                        ListID,
                        EmailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSubscriberAsync(string ecnAccessKey, int ListID, string EmailAddress) {
            this.DeleteSubscriberAsync(ecnAccessKey, ListID, EmailAddress, null);
        }
        
        /// <remarks/>
        public void DeleteSubscriberAsync(string ecnAccessKey, int ListID, string EmailAddress, object userState) {
            if ((this.DeleteSubscriberOperationCompleted == null)) {
                this.DeleteSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubscriberOperationCompleted);
            }
            this.InvokeAsync("DeleteSubscriber", new object[] {
                        ecnAccessKey,
                        ListID,
                        EmailAddress}, this.DeleteSubscriberOperationCompleted, userState);
        }
        
        private void OnDeleteSubscriberOperationCompleted(object arg) {
            if ((this.DeleteSubscriberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubscriberCompleted(this, new DeleteSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteCustomField", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteCustomField(string ecnAccessKey, int ListID, int UDFID) {
            object[] results = this.Invoke("DeleteCustomField", new object[] {
                        ecnAccessKey,
                        ListID,
                        UDFID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCustomFieldAsync(string ecnAccessKey, int ListID, int UDFID) {
            this.DeleteCustomFieldAsync(ecnAccessKey, ListID, UDFID, null);
        }
        
        /// <remarks/>
        public void DeleteCustomFieldAsync(string ecnAccessKey, int ListID, int UDFID, object userState) {
            if ((this.DeleteCustomFieldOperationCompleted == null)) {
                this.DeleteCustomFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCustomFieldOperationCompleted);
            }
            this.InvokeAsync("DeleteCustomField", new object[] {
                        ecnAccessKey,
                        ListID,
                        UDFID}, this.DeleteCustomFieldOperationCompleted, userState);
        }
        
        private void OnDeleteCustomFieldOperationCompleted(object arg) {
            if ((this.DeleteCustomFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCustomFieldCompleted(this, new DeleteCustomFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UnsubscribeSubscriber", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnsubscribeSubscriber(string ecnAccessKey, int listID, string XMLEmails) {
            object[] results = this.Invoke("UnsubscribeSubscriber", new object[] {
                        ecnAccessKey,
                        listID,
                        XMLEmails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnsubscribeSubscriberAsync(string ecnAccessKey, int listID, string XMLEmails) {
            this.UnsubscribeSubscriberAsync(ecnAccessKey, listID, XMLEmails, null);
        }
        
        /// <remarks/>
        public void UnsubscribeSubscriberAsync(string ecnAccessKey, int listID, string XMLEmails, object userState) {
            if ((this.UnsubscribeSubscriberOperationCompleted == null)) {
                this.UnsubscribeSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnsubscribeSubscriberOperationCompleted);
            }
            this.InvokeAsync("UnsubscribeSubscriber", new object[] {
                        ecnAccessKey,
                        listID,
                        XMLEmails}, this.UnsubscribeSubscriberOperationCompleted, userState);
        }
        
        private void OnUnsubscribeSubscriberOperationCompleted(object arg) {
            if ((this.UnsubscribeSubscriberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnsubscribeSubscriberCompleted(this, new UnsubscribeSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UpdateList", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateList(string ecnAccessKey, int ListID, string NewListName, string NewListDescription) {
            object[] results = this.Invoke("UpdateList", new object[] {
                        ecnAccessKey,
                        ListID,
                        NewListName,
                        NewListDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateListAsync(string ecnAccessKey, int ListID, string NewListName, string NewListDescription) {
            this.UpdateListAsync(ecnAccessKey, ListID, NewListName, NewListDescription, null);
        }
        
        /// <remarks/>
        public void UpdateListAsync(string ecnAccessKey, int ListID, string NewListName, string NewListDescription, object userState) {
            if ((this.UpdateListOperationCompleted == null)) {
                this.UpdateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateListOperationCompleted);
            }
            this.InvokeAsync("UpdateList", new object[] {
                        ecnAccessKey,
                        ListID,
                        NewListName,
                        NewListDescription}, this.UpdateListOperationCompleted, userState);
        }
        
        private void OnUpdateListOperationCompleted(object arg) {
            if ((this.UpdateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateListCompleted(this, new UpdateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdateList1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UpdateListWithFolder", RequestElementName="UpdateListWithFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="UpdateListWithFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateListWithFolderResult")]
        public string UpdateList(string ecnAccessKey, int ListID, string NewListName, string NewListDescription, int NewFolderID) {
            object[] results = this.Invoke("UpdateList1", new object[] {
                        ecnAccessKey,
                        ListID,
                        NewListName,
                        NewListDescription,
                        NewFolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateList1Async(string ecnAccessKey, int ListID, string NewListName, string NewListDescription, int NewFolderID) {
            this.UpdateList1Async(ecnAccessKey, ListID, NewListName, NewListDescription, NewFolderID, null);
        }
        
        /// <remarks/>
        public void UpdateList1Async(string ecnAccessKey, int ListID, string NewListName, string NewListDescription, int NewFolderID, object userState) {
            if ((this.UpdateList1OperationCompleted == null)) {
                this.UpdateList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateList1OperationCompleted);
            }
            this.InvokeAsync("UpdateList1", new object[] {
                        ecnAccessKey,
                        ListID,
                        NewListName,
                        NewListDescription,
                        NewFolderID}, this.UpdateList1OperationCompleted, userState);
        }
        
        private void OnUpdateList1OperationCompleted(object arg) {
            if ((this.UpdateList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateList1Completed(this, new UpdateList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UpdateCustomField", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCustomField(string ecnAccessKey, int listID, int udfID, string customFieldName, string customFieldDescription, string isPublic) {
            object[] results = this.Invoke("UpdateCustomField", new object[] {
                        ecnAccessKey,
                        listID,
                        udfID,
                        customFieldName,
                        customFieldDescription,
                        isPublic});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCustomFieldAsync(string ecnAccessKey, int listID, int udfID, string customFieldName, string customFieldDescription, string isPublic) {
            this.UpdateCustomFieldAsync(ecnAccessKey, listID, udfID, customFieldName, customFieldDescription, isPublic, null);
        }
        
        /// <remarks/>
        public void UpdateCustomFieldAsync(string ecnAccessKey, int listID, int udfID, string customFieldName, string customFieldDescription, string isPublic, object userState) {
            if ((this.UpdateCustomFieldOperationCompleted == null)) {
                this.UpdateCustomFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomFieldOperationCompleted);
            }
            this.InvokeAsync("UpdateCustomField", new object[] {
                        ecnAccessKey,
                        listID,
                        udfID,
                        customFieldName,
                        customFieldDescription,
                        isPublic}, this.UpdateCustomFieldOperationCompleted, userState);
        }
        
        private void OnUpdateCustomFieldOperationCompleted(object arg) {
            if ((this.UpdateCustomFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCustomFieldCompleted(this, new UpdateCustomFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddCustomField", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddCustomField(string ecnAccessKey, int listID, string customFieldName, string customFieldDescription, string isPublic) {
            object[] results = this.Invoke("AddCustomField", new object[] {
                        ecnAccessKey,
                        listID,
                        customFieldName,
                        customFieldDescription,
                        isPublic});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomFieldAsync(string ecnAccessKey, int listID, string customFieldName, string customFieldDescription, string isPublic) {
            this.AddCustomFieldAsync(ecnAccessKey, listID, customFieldName, customFieldDescription, isPublic, null);
        }
        
        /// <remarks/>
        public void AddCustomFieldAsync(string ecnAccessKey, int listID, string customFieldName, string customFieldDescription, string isPublic, object userState) {
            if ((this.AddCustomFieldOperationCompleted == null)) {
                this.AddCustomFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomFieldOperationCompleted);
            }
            this.InvokeAsync("AddCustomField", new object[] {
                        ecnAccessKey,
                        listID,
                        customFieldName,
                        customFieldDescription,
                        isPublic}, this.AddCustomFieldOperationCompleted, userState);
        }
        
        private void OnAddCustomFieldOperationCompleted(object arg) {
            if ((this.AddCustomFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomFieldCompleted(this, new AddCustomFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddSubscribers", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSubscribers(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString) {
            object[] results = this.Invoke("AddSubscribers", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        xmlString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscribersAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString) {
            this.AddSubscribersAsync(ecnAccessKey, listID, subscriptionType, formatType, xmlString, null);
        }
        
        /// <remarks/>
        public void AddSubscribersAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString, object userState) {
            if ((this.AddSubscribersOperationCompleted == null)) {
                this.AddSubscribersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscribersOperationCompleted);
            }
            this.InvokeAsync("AddSubscribers", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        xmlString}, this.AddSubscribersOperationCompleted, userState);
        }
        
        private void OnAddSubscribersOperationCompleted(object arg) {
            if ((this.AddSubscribersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscribersCompleted(this, new AddSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddSubscribersWithDupes", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSubscribersWithDupes(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString) {
            object[] results = this.Invoke("AddSubscribersWithDupes", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        compositeKey,
                        overwriteWithNULL,
                        xmlString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscribersWithDupesAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString) {
            this.AddSubscribersWithDupesAsync(ecnAccessKey, listID, subscriptionType, formatType, compositeKey, overwriteWithNULL, xmlString, null);
        }
        
        /// <remarks/>
        public void AddSubscribersWithDupesAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString, object userState) {
            if ((this.AddSubscribersWithDupesOperationCompleted == null)) {
                this.AddSubscribersWithDupesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscribersWithDupesOperationCompleted);
            }
            this.InvokeAsync("AddSubscribersWithDupes", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        compositeKey,
                        overwriteWithNULL,
                        xmlString}, this.AddSubscribersWithDupesOperationCompleted, userState);
        }
        
        private void OnAddSubscribersWithDupesOperationCompleted(object arg) {
            if ((this.AddSubscribersWithDupesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscribersWithDupesCompleted(this, new AddSubscribersWithDupesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddSubscribersWithDupesUsingSmartForm", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSubscribersWithDupesUsingSmartForm(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString, int SFID) {
            object[] results = this.Invoke("AddSubscribersWithDupesUsingSmartForm", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        compositeKey,
                        overwriteWithNULL,
                        xmlString,
                        SFID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscribersWithDupesUsingSmartFormAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString, int SFID) {
            this.AddSubscribersWithDupesUsingSmartFormAsync(ecnAccessKey, listID, subscriptionType, formatType, compositeKey, overwriteWithNULL, xmlString, SFID, null);
        }
        
        /// <remarks/>
        public void AddSubscribersWithDupesUsingSmartFormAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string compositeKey, bool overwriteWithNULL, string xmlString, int SFID, object userState) {
            if ((this.AddSubscribersWithDupesUsingSmartFormOperationCompleted == null)) {
                this.AddSubscribersWithDupesUsingSmartFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscribersWithDupesUsingSmartFormOperationCompleted);
            }
            this.InvokeAsync("AddSubscribersWithDupesUsingSmartForm", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        compositeKey,
                        overwriteWithNULL,
                        xmlString,
                        SFID}, this.AddSubscribersWithDupesUsingSmartFormOperationCompleted, userState);
        }
        
        private void OnAddSubscribersWithDupesUsingSmartFormOperationCompleted(object arg) {
            if ((this.AddSubscribersWithDupesUsingSmartFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscribersWithDupesUsingSmartFormCompleted(this, new AddSubscribersWithDupesUsingSmartFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddSubscriberUsingSmartForm", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSubscriberUsingSmartForm(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString, int sfID) {
            object[] results = this.Invoke("AddSubscriberUsingSmartForm", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        xmlString,
                        sfID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscriberUsingSmartFormAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString, int sfID) {
            this.AddSubscriberUsingSmartFormAsync(ecnAccessKey, listID, subscriptionType, formatType, xmlString, sfID, null);
        }
        
        /// <remarks/>
        public void AddSubscriberUsingSmartFormAsync(string ecnAccessKey, int listID, string subscriptionType, string formatType, string xmlString, int sfID, object userState) {
            if ((this.AddSubscriberUsingSmartFormOperationCompleted == null)) {
                this.AddSubscriberUsingSmartFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriberUsingSmartFormOperationCompleted);
            }
            this.InvokeAsync("AddSubscriberUsingSmartForm", new object[] {
                        ecnAccessKey,
                        listID,
                        subscriptionType,
                        formatType,
                        xmlString,
                        sfID}, this.AddSubscriberUsingSmartFormOperationCompleted, userState);
        }
        
        private void OnAddSubscriberUsingSmartFormOperationCompleted(object arg) {
            if ((this.AddSubscriberUsingSmartFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscriberUsingSmartFormCompleted(this, new AddSubscriberUsingSmartFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddToMasterSuppressionList", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddToMasterSuppressionList(string ecnAccessKey, string xmlString) {
            object[] results = this.Invoke("AddToMasterSuppressionList", new object[] {
                        ecnAccessKey,
                        xmlString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddToMasterSuppressionListAsync(string ecnAccessKey, string xmlString) {
            this.AddToMasterSuppressionListAsync(ecnAccessKey, xmlString, null);
        }
        
        /// <remarks/>
        public void AddToMasterSuppressionListAsync(string ecnAccessKey, string xmlString, object userState) {
            if ((this.AddToMasterSuppressionListOperationCompleted == null)) {
                this.AddToMasterSuppressionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToMasterSuppressionListOperationCompleted);
            }
            this.InvokeAsync("AddToMasterSuppressionList", new object[] {
                        ecnAccessKey,
                        xmlString}, this.AddToMasterSuppressionListOperationCompleted, userState);
        }
        
        private void OnAddToMasterSuppressionListOperationCompleted(object arg) {
            if ((this.AddToMasterSuppressionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToMasterSuppressionListCompleted(this, new AddToMasterSuppressionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetSubscriberStatus", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubscriberStatus(string ecnAccessKey, string emailAddress) {
            object[] results = this.Invoke("GetSubscriberStatus", new object[] {
                        ecnAccessKey,
                        emailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriberStatusAsync(string ecnAccessKey, string emailAddress) {
            this.GetSubscriberStatusAsync(ecnAccessKey, emailAddress, null);
        }
        
        /// <remarks/>
        public void GetSubscriberStatusAsync(string ecnAccessKey, string emailAddress, object userState) {
            if ((this.GetSubscriberStatusOperationCompleted == null)) {
                this.GetSubscriberStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriberStatusOperationCompleted);
            }
            this.InvokeAsync("GetSubscriberStatus", new object[] {
                        ecnAccessKey,
                        emailAddress}, this.GetSubscriberStatusOperationCompleted, userState);
        }
        
        private void OnGetSubscriberStatusOperationCompleted(object arg) {
            if ((this.GetSubscriberStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriberStatusCompleted(this, new GetSubscriberStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/ListManager.asmx?op=UpdateEmailAddress", RequestElementName="ImportEmailProfilesRequestSFUpdate", RequestNamespace="ecn.webServices.communicator", ResponseElementName="ResponseSFUpdate", ResponseNamespace="ecn.webServices.communicator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateEmailAddress(string ecn_accessKey, int ecn_listID, string ecn_emailProfilesXMLString, string oldEmailAddress, string newEmailAddress, int sfID) {
            object[] results = this.Invoke("UpdateEmailAddress", new object[] {
                        ecn_accessKey,
                        ecn_listID,
                        ecn_emailProfilesXMLString,
                        oldEmailAddress,
                        newEmailAddress,
                        sfID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEmailAddressAsync(string ecn_accessKey, int ecn_listID, string ecn_emailProfilesXMLString, string oldEmailAddress, string newEmailAddress, int sfID) {
            this.UpdateEmailAddressAsync(ecn_accessKey, ecn_listID, ecn_emailProfilesXMLString, oldEmailAddress, newEmailAddress, sfID, null);
        }
        
        /// <remarks/>
        public void UpdateEmailAddressAsync(string ecn_accessKey, int ecn_listID, string ecn_emailProfilesXMLString, string oldEmailAddress, string newEmailAddress, int sfID, object userState) {
            if ((this.UpdateEmailAddressOperationCompleted == null)) {
                this.UpdateEmailAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmailAddressOperationCompleted);
            }
            this.InvokeAsync("UpdateEmailAddress", new object[] {
                        ecn_accessKey,
                        ecn_listID,
                        ecn_emailProfilesXMLString,
                        oldEmailAddress,
                        newEmailAddress,
                        sfID}, this.UpdateEmailAddressOperationCompleted, userState);
        }
        
        private void OnUpdateEmailAddressOperationCompleted(object arg) {
            if ((this.UpdateEmailAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmailAddressCompleted(this, new UpdateEmailAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetListEmailProfilesByEmailAddressCompletedEventHandler(object sender, GetListEmailProfilesByEmailAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListEmailProfilesByEmailAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListEmailProfilesByEmailAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCustomFieldsCompletedEventHandler(object sender, GetCustomFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFiltersCompletedEventHandler(object sender, GetFiltersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddListCompletedEventHandler(object sender, AddListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddList1CompletedEventHandler(object sender, AddList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddFolderCompletedEventHandler(object sender, AddFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddFolder1CompletedEventHandler(object sender, AddFolder1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolder1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolder1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetListsCompletedEventHandler(object sender, GetListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetListByNameCompletedEventHandler(object sender, GetListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSubscriberCountCompletedEventHandler(object sender, GetSubscriberCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriberCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriberCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, DeleteFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteListCompletedEventHandler(object sender, DeleteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteSubscriberCompletedEventHandler(object sender, DeleteSubscriberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteCustomFieldCompletedEventHandler(object sender, DeleteCustomFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCustomFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCustomFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnsubscribeSubscriberCompletedEventHandler(object sender, UnsubscribeSubscriberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnsubscribeSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnsubscribeSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateListCompletedEventHandler(object sender, UpdateListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateList1CompletedEventHandler(object sender, UpdateList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateCustomFieldCompletedEventHandler(object sender, UpdateCustomFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCustomFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCustomFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddCustomFieldCompletedEventHandler(object sender, AddCustomFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddSubscribersCompletedEventHandler(object sender, AddSubscribersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscribersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscribersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddSubscribersWithDupesCompletedEventHandler(object sender, AddSubscribersWithDupesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscribersWithDupesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscribersWithDupesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddSubscribersWithDupesUsingSmartFormCompletedEventHandler(object sender, AddSubscribersWithDupesUsingSmartFormCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscribersWithDupesUsingSmartFormCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscribersWithDupesUsingSmartFormCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddSubscriberUsingSmartFormCompletedEventHandler(object sender, AddSubscriberUsingSmartFormCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscriberUsingSmartFormCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscriberUsingSmartFormCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddToMasterSuppressionListCompletedEventHandler(object sender, AddToMasterSuppressionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddToMasterSuppressionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddToMasterSuppressionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSubscriberStatusCompletedEventHandler(object sender, GetSubscriberStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriberStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriberStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateEmailAddressCompletedEventHandler(object sender, UpdateEmailAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmailAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEmailAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591