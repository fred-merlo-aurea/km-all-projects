@using Telerik.Reporting
@using Telerik.ReportViewer.Mvc
@using UAS.ReportLibrary
@model UAS.Web.Models.UAD.Filter.ReportViewModel
@*@{
    //var typeReportSource = new TypeReportSource() { TypeName = typeof(UAS.ReportLibrary.Reports.CategorySummary).AssemblyQualifiedName };
    //typeReportSource.Parameters.Add("FilterQuery", Model.filterquery);
    //typeReportSource.Parameters.Add("ProductName", Model.ProductName);
    //typeReportSource.Parameters.Add("IssueName", Model.IssueName);
    //typeReportSource.Parameters.Add("IssueID", Model.IssueID);
    //typeReportSource.Parameters.Add("Filters", "<XML><Filters><ProductID>1</ProductID></Filters></XML>");
    //typeReportSource.Parameters.Add("AdHocFilters", "<XML></XML>");
    var typeReportSource= ReportUtilities.GetReportSourceNew(Model.reportname, Model.ClientID, Model.filterquery, Model.PubID, Model.ProductName, Model.IssueID, Model.IssueName);

}*@
@(Html.TelerikReporting().ReportViewer()
        // Each report viewer must have an id - it will be used by the initialization script
        // to find the element and initialize the report viewer.
        .Id("reportViewer1")
        // The URL of the service which will serve reports.
        // The URL corresponds to the name of the controller class (ReportsController).
        // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
        .ServiceUrl(Url.Content("~/api/reports/"))
        // The URL for the report viewer template. The template can be edited -
        // new functionalities can be added and unneeded ones can be removed.
        // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
        //.TemplateUrl(Url.Content("~/ReportViewer/templates/telerikReportViewerTemplate.html"))
        // Strongly typed ReportSource - TypeReportSource or UriReportSource.
        .ReportSource(Model.reportSource)

        // Specifies whether the viewer is in interactive or print preview mode.
        // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
        // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
        .ViewMode(ViewMode.Interactive)
        // Sets the scale mode of the viewer.
        // Three modes exist currently:
        // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
        // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
        // Specific - Uses the scale to zoom in and out the report.
        .ScaleMode(ScaleMode.Specific)
        // Zoom in and out the report using the scale
        // 1.0 is equal to 100%, i.e. the original size of the report
        .Scale(1.0)
        // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
        // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
        .PersistSession(false)
        // Sets the print mode of the viewer.
        .PrintMode(PrintMode.AutoSelect)
        .ClientEvents(
                events => events
                    .RenderingBegin("onTelerikReportingBegin")
                    .RenderingEnd("onTelerikReportingEnd")
                    .PrintBegin("onTelerikReportingBegin")
                    .PrintEnd("onTelerikReportingEnd")
                    .ExportBegin("onTelerikReportingBegin")
                    .ExportEnd("onTelerikReportingEnd")
                    )
        // Defers the script initialization statement. Check the scripts section below -
        // each deferred script will be rendered at the place of TelerikReporting().DeferredScripts().
        .Deferred()
)
@(

        // All deferred initialization statements will be rendered here
        Html.TelerikReporting().DeferredScripts()
)