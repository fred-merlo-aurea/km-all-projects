@model  UAS.Web.Models.FileMapperWizard.TransformationSearchFilteredViewModel

<script language="JavaScript" type="text/JavaScript">
    $(document).ready(function () {
        $("#ddPageSize").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            value: 10,
            dataSource: [
              { text: "5", value: "5" },
              { text: "10", value: "10" },
              { text: "15", value: "15" },
              { text: "20", value: "20" }
            ]
        });
        Search();
        //LoadTransformationSearchResults(true, transformTypeId);
    });

    //Events -Page number input changed.
    $(document).on("change", "input[id='pagerInputPageNumber']", function () {
        RebindOnPageOrSizeChange()
    });
    //Events - Page Size input changed
    $(document).on("change", "input[id='ddPageSize']", function () {
        RebindOnPageOrSizeChange()
    });

    function LoadTransformationSearchResults(isTemplate, transformationTypeId) {
        var model = { IsTemplate: isTemplate, TransformationTypeID: transformationTypeId }
        $.ajax({
            url: "/UAS.Web/FileMapperWizard/LoadTransformationSearchResults",
            traditional: true,
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: model,
            cache: !0,
            datatype: "html",
            success: function (returnData) {
                $("#divTransformationSearchResults").html(returnData);
            },
            error: function (data) {
                alert("An error has occured!!!");
            }
        });
    }



    function transformationSearchCopy(transformationID) {
        var transformationName = "";
        var model = { TransformationID: transformationID, TransformationName: transformationName }
        $.ajax({
            url: "/UAS.Web/FileMapperWizard/CopyTransformationSetup",
            traditional: true,
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: model,
            cache: !0,
            datatype: "html",
            success: function (returnData) {
                if (returnData.Complete) {
                    var oldwin = $("#transformationSearchWindow").data('kendoWindow');
                    oldwin.close();

                    var oldwin2 = $("#transformationWindow").data('kendoWindow');
                    oldwin2.close();

                    var win = $("#transformationWindow").data('kendoWindow');
                    $("#transformationWindow").html("");
                    win.content("Loading...");
                    win.center();
                    win.open();

                    var model = { TransformationID: returnData.TransformationID }

                    $.ajax({
                        url: "/UAS.Web/FileMapperWizard/LoadTransformationSetup",
                        traditional: true,
                        contentType: "application/html; charset=utf-8",
                        type: "GET",
                        data: model,
                        cache: !0,
                        datatype: "html",
                        success: function (returnData) {
                            win.content(returnData);
                        },
                        error: function (data) {
                            alert("An error has occured!!!");
                        }
                    });

                    @*$.ajax({
                        url: "/UAS.Web/FileMapperWizard/LoadTransformationSearch",
                        traditional: true,
                        contentType: "application/html; charset=utf-8",
                        type: "GET",
                        cache: !0,
                        datatype: "html",
                        success: function (returnData) {
                            win.content(returnData);
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                                autoClose: false,
                                IsOpen: false
                            });
                        },
                        error: function (data) {
                            alert("An error has occured!!!");
                        }
                    });*@
                    } else {
                    showMessage({
                        type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                        text: 'Error has occurred while trying to copy the transformation.',
                        autoClose: false,
                        IsOpen: false
                    });
                }
            },
            error: function (data) {
                alert("An error has occured!!!");
            }
        });
    }

    function transformationSearchLoad(transformationID) {
        debugger;
        var oldwin = $("#transformationSearchWindow").data('kendoWindow');
        oldwin.close();

        var oldwin2 = $("#transformationWindow").data('kendoWindow');
        oldwin2.close();

        var win = $("#transformationWindow").data('kendoWindow');
        $("#transformationWindow").html("");
        win.content("Loading...");
        win.center();
        win.open();

        var model = { TransformationID: transformationID }

        $.ajax({
            url: "/UAS.Web/FileMapperWizard/LoadTransformationSetup",
            traditional: true,
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: model,
            cache: !0,
            datatype: "html",
            success: function (returnData) {
                win.content(returnData);
            },
            error: function (data) {
                alert("An error has occured!!!");
            }
        });
    }

    function transformationSearchDelete(transformationID) {
        var model = { TransformationID: transformationID }
        $.ajax({
            url: "/UAS.Web/FileMapperWizard/DeleteTransformationSetup",
            traditional: true,
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: model,
            cache: !0,
            datatype: "html",
            success: function (returnData) {
                if (returnData) {
                    var win = $("#transformationSearchWindow").data('kendoWindow');
                    $("#transformationSearchWindow").html("");
                    win.content("Loading...");
                    win.center();
                    win.open();

                    $.ajax({
                        url: "/UAS.Web/FileMapperWizard/LoadTransformationSearch",
                        traditional: true,
                        contentType: "application/html; charset=utf-8",
                        type: "GET",
                        cache: !0,
                        datatype: "html",
                        success: function (returnData) {
                            win.content(returnData);
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                                autoClose: false,
                                IsOpen: false
                            });
                        },
                        error: function (data) {
                            alert("An error has occured!!!");
                        }
                    });
                } else {
                    showMessage({
                        type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                        text: 'Error has occurred while trying to delete the transformation.',
                        autoClose: false,
                        IsOpen: false
                    });
                }
            },
            error: function (data) {
                alert("An error has occured!!!");
            }
        });
    }   

    function transformationNameFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("Transformation_Search_Filter_TransformationName")",
                }
            },
            optionLabel: "-- Select --"
        });
    }

    function transformationDescFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("Transformation_Search_Filter_TransformationDesc")",
                }
            },
            optionLabel: "-- Select --"
        });
    }

    var targetUrl = '@Url.Action("Transformation_Read_Data", "FileMapperWizard")';
    var firstGridLoad = true;
    //Events - Grid Event - Grid DataBound where you can get all the filters , sorts and other properties for Grid
    function onDataBound(arg) {
        var grid = this;
        this.element.find("[role='gridcell']").each(function () {
            eval($(this).children("script").html());
        });

        grid.tbody.find('>tr').each(function () {
            var dataItem = grid.dataItem(this);
            if (!dataItem.Child) {
                $(this).find(".k-hierarchy-cell a").hide();
            }
        });

        if (firstGridLoad) {
            firstGridLoad = false;
            SetPagerWidget("firstpage");
        }
    }

    //Events - When First , Lats Previous and Next Buttons clicked on Pager.
    function GoToPage(e) {
        SetPagerWidget(e.target.id);
        var data = filterGridParams();
        ReBindGrid(data)
    }
    //Events - Triggers the Search using Search Criteria
    function Search() {
        SetPagerWidget("firstpage");
        firstGridLoad = true;
        var data = filterGridParams();
        ReBindGrid(data);
    }
    //Rebinds the Grid with data sends with DataSourceRequest
    function ReBindGrid(obj) {
        var grid = $("#grid_TransformationSearch").data("kendoGrid");
        var options = null;
        if (grid != null) {
            options = grid.getOptions();
        }
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: targetUrl,
                    dataType: "json",
                    data: obj
                }
            }
        })
        if (options != null) {
            options.dataSource.data = dataSource.data;
            options.dataSource.pageSize = obj.PageSize;
            grid.setOptions(options);
        }
    }
    //Data Sends with DataSourceRequest- Parameters that needs to be passed to the server
    function filterGridParams() {
        var transformTypeId = @Html.Raw(Json.Encode(Model.TransformationTypeId));

        return {
            IsTemplate: true,
            TransformationTypeId: transformTypeId,
            PageSize: $("#ddPageSize").val(),
            PageNumber: $("#pagerInputPageNumber").val()
        };
    }
    //Function - Rebinds the Grid on Page Number input chnaged or Page size changed
    function RebindOnPageOrSizeChange() {
        if (parseInt($("#pagerInputPageNumber").val()) > 0 && !isNaN(parseInt($("#pagerInputPageNumber").val())) && $("#pagerInputPageNumber").val() <= parseInt($("#pagerTotalItems").text())) {
            SetPagerWidget($("#pagerInputPageNumber").val());
            var data = filterGridParams();
            ReBindGrid(data);
        }
        else {
            showMessage({
                type: 'Error',
                text: 'Please enter valid page number.',
                autoClose: false
            });

        }
    }
    //This drives the server side paging by getting current page and setting all Pager messages
    function SetPagerWidget(id) {
        var totalrecordCount = 0;
        var grid = $("#grid_TransformationSearch").data("kendoGrid");
        if (grid != null) {
            if (grid.dataSource.view()[0]) {
                totalrecordCount = parseInt(grid.dataSource.view()[0].TotalRecordCounts);
            }
        }
        var pagesize = 0;
        var psVal = parseInt($("#ddPageSize").val());
        if (psVal > 0) {
            pagesize = psVal;
        }
        var currentpage = 0;
        var cpVal = parseInt($("#pagerInputPageNumber").val());
        if (cpVal > 0) {
            currentpage = cpVal;
        }
        var lastpage = 0;
        var lpVal = parseInt(totalrecordCount / pagesize) + 1;
        if (lpVal > 0) {
            lastpage = lpVal;
        }

        var firstpage = 1;

        if (id == "firstpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else {
                currentpage = firstpage;

            }
        }
        else if (id == "prevpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else
                currentpage = currentpage - 1;
        }
        else if (id == "nextpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = currentpage + 1;

        }
        else if (id == "lastpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = lastpage;

        }
        else {
            currentpage = parseInt(id);
        }
        var start = ((currentpage - 1) * pagesize + 1);
        var end = (currentpage * pagesize) < totalrecordCount ? (currentpage * pagesize) : totalrecordCount;
        var displaymessage = start + " - " + end + " of " + totalrecordCount + " items";

        $("#currentpage").text(currentpage);
        $("#pagerDisplay").text(displaymessage);
        $("#pagerTotalItems").text(lastpage);
        $("#pagerInputPageNumber").val(currentpage);
    }
</script>
<div>
    <div>
        <h4>Transformation Search</h4>
    </div>
    <div>
        @*@Html.Kendo().RadioButton().Name("IsTemplate").Label("Template").Value("true")*@
        @*@Html.Kendo().RadioButton().Name("IsTemplate").Label("Non-Template").Value("false")*@
    </div>
    <div id="divTransformationSearchResults">
        <div>
            <input type="hidden" value="1" id="latestpagehdn" />
            @(Html.Kendo().Grid<UAS.Web.Models.FileMapperWizard.TransformationModel>()
                    .Name("grid_TransformationSearch")
                    .Events(e => e.DataBound("onDataBound"))
                    .Columns(columns =>
                    {
                        columns.Bound(e => e.TotalRecordCounts).Hidden(true);
                        columns.Bound(e => e.TransformationName).Title("Transformation Name").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle" }).Filterable(filterable => filterable.Cell(c => c.DataTextField("transformationName").Operator("eq").ShowOperators(false).SuggestionOperator(FilterType.StartsWith)).UI("transformationNameFilter"));
                        columns.Bound(e => e.TransformationDescription).Title("Transformation Description").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle" }).Filterable(filterable => filterable.Cell(c => c.DataTextField("TransformationDescription").Operator("eq").ShowOperators(false).SuggestionOperator(FilterType.StartsWith)).UI("transformationDescFilter"));
                        columns.Bound(e => e.TransformationType).Title("Transformation Type").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle" }).Filterable(false);
                        columns.Bound(e => e).ClientTemplate(GetActions().ToString()).Width(110).Filterable(false).Sortable(false);
                    })
                    .Sortable()
                    .Filterable(f => f.Extra(false)
                                  .Mode(GridFilterMode.Row | GridFilterMode.Menu)//Menu
                                  .Operators(operators => operators
                                      .ForString(str => str.Clear()
                                        .StartsWith("Starts with")
                                        .IsEqualTo("Is equal to")
                                        .IsNotEqualTo("Is not equal to")
                                    )))
                    .HtmlAttributes(new { style = "min-width:100px;" })
                    .Pageable(page => page.Enabled(false))
                    .DataSource(dataSource => dataSource // Configure the grid data source
                            .Ajax() // Specify that ajax binding is used
                            .Read(read => read.Data("filterGridParams").Action("Transformation_Read_Data", "FileMapperWizard"))// Set the action method which will return the data in JSON format
                            .PageSize(10) //Set up page size
                            .ServerOperation(true) //Get Data from Server 
                    )                                                          
            )
        </div>
        <div id="pager" class="k-pager-wrap k-grid-pager k-widget k-floatwrap">
            <a class="k-link k-pager-nav k-pager-first" title="Go to the first page" tabindex="-1">
                <span onclick="GoToPage(event)" id="firstpage" class="k-icon k-i-seek-w">seek-w</span>
            </a>
            <a class="k-link k-pager-nav" title="Go to the previous page" tabindex="-1">
                <span onclick="GoToPage(event)" id="prevpage" class="k-icon k-i-arrow-w">arrow-w</span>
            </a>

            <ul class="k-pager-numbers k-reset">
                <li class="k-current-page"><span class="k-link k-pager-nav">1</span></li>
                <li><span class="k-state-selected" id="currentpage">1</span></li>

            </ul>
            <span class="k-pager-input k-label">Page<input class="k-textbox" id="pagerInputPageNumber">of <span id="pagerTotalItems"></span></span>
            <a class="k-link k-pager-nav" title="Go to the next page" tabindex="-1">
                <span onclick="GoToPage(event)" id="nextpage" class="k-icon k-i-arrow-e">arrow-e</span>
            </a>
            <a class="k-link k-pager-nav k-pager-last" title="Go to the last page" tabindex="-1">
                <span onclick="GoToPage(event)" id="lastpage" class="k-icon k-i-seek-e">seek-e</span>
            </a>

            <span class="k-pager-sizes k-label">
                <span title="" class="k-widget k-dropdown k-header">
                    <input id="ddPageSize" />
                </span>items per page
            </span>
            <span class="float-right" style="margin-right:10px;">
                <label id="pagerDisplay"></label>
            </span>
        </div>

        <div id="client-detail-modal">
            @helper  GetActions()
            {
                @(Html.Kendo()
                        .Menu()
                        .Name("menu_TransformationSearch_#=TransformationId#")
                        .Direction(MenuDirection.Left)
                        .Orientation(MenuOrientation.Vertical)
                        .Animation(false)
                        .Items(items => items.Add().Text("Actions").HtmlAttributes(new { @class = "k-menu-actions" }).Items(
                                        innerItems =>
                                        {
                                            innerItems.Add().Text("").HtmlAttributes(new { style = "Display:none;" });
                                            innerItems.Add().Text("Copy").HtmlAttributes(new { onclick = "transformationSearchCopy(#=TransformationId#);" });
                                            innerItems.Add().Text("Load").HtmlAttributes(new { onclick = "transformationSearchLoad(#=TransformationId#);" });
                                            //innerItems.Add().Text("Delete").HtmlAttributes(new { onclick = "transformationSearchDelete(#=TransformationId#);" });
                                        }
                                    )
                                )
                                .ToClientTemplate()
                )
            }
        </div>
    </div>
</div>



@*@model  UAS.Web.Models.FileMapperWizard.TransformationSearchFilteredViewModel

<script language="JavaScript" type="text/JavaScript">
    $(document).ready(function () {
        $("input[name='IsTemplate'][value='true']").prop("checked", true);
        var transformTypeId = @Html.Raw(Json.Encode(Model.TransformationTypeId));
        LoadTransformationSearchResults(true, transformTypeId);

        $("input[name='IsTemplate']").change(function () {
            var value = $(this).val();
            var isTemplate = true;
            var transformTypeId = @Html.Raw(Json.Encode(Model.TransformationTypeId));
            if (value == 'true') {
                LoadTransformationSearchResults(true, transformTypeId);
            } else {
                LoadTransformationSearchResults(false, transformTypeId);
            }  
        });
    });

    function LoadTransformationSearchResults(isTemplate, transformationTypeId) {
        var model = { IsTemplate: isTemplate, TransformationTypeID: transformationTypeId }
        $.ajax({
            url: "/UAS.Web/FileMapperWizard/LoadTransformationSearchResults",
            traditional: true,
            contentType: "application/html; charset=utf-8",
            type: "GET",
            data: model,
            cache: !0,
            datatype: "html",
            success: function (returnData) {
                $("#divTransformationSearchResults").html(returnData);
            },
            error: function (data) {
                alert("An error has occured!!!");
            }
        });
    }    
</script>
<div>
    <div>
        <h4>Transformation Search</h4>
    </div>
    <div>
        @Html.Kendo().RadioButton().Name("IsTemplate").Label("Template").Value("true")
        @Html.Kendo().RadioButton().Name("IsTemplate").Label("Non-Template").Value("false")
    </div>
    <div id="divTransformationSearchResults">

    </div>
</div>*@