@model UAS.Web.Models.FileMapperWizard.MultiMapModel

<script>

    $(document).ready(function () {
        $(".k-grid .k-grid-header").hide();
    });

    function DeleteMultiMapCondition(fieldMultiMapID, fieldMapID, fieldIndex) {
        debugger;
        var grid = $("#grid_MultiColumnMap_" + fieldMapID).data("kendoGrid");
        var totalItems = grid.dataSource._data.length;
        //Over complicate things to get the row uid to remove row. But it even gives a confirmation to delete
        //Woah... thats cool. So now run through the datasource data looking at the column FieldMultiMapID (practically the primary key in the model)
        //Find the row that matches. Get the uid that Kendo is assigning to that row and remove that puppy. Not to bad for over complicating.
        for (var i = 0; i < grid.dataSource._data.length; i++) {
            var rowMultiFieldMapID = grid.dataSource._data[i].FieldMultiMapID;
            var rowIndex = grid.dataSource._data[i].MCMIndex;
            //Existing will have FieldMultiMapID
            if (rowMultiFieldMapID != null && rowMultiFieldMapID > 0) {
                if (rowMultiFieldMapID == fieldMultiMapID) {
                    var uid = grid.dataSource._data[i].uid;
                    grid.removeRow('tr[data-uid="' + uid + '"]');

                    if (grid.dataSource._data.length == 0) {
                        var targetName = "div_MultiMap_" + fieldMapID;
                        $("#" + targetName).hide();
                    }
                    break;
                }
            //New will not have FieldMultiMapID so use ACMIndex
            } else if (rowIndex != null) {
                if (rowIndex == fieldIndex) {
                    var uid = grid.dataSource._data[i].uid;
                    grid.removeRow('tr[data-uid="' + uid + '"]');

                    if (grid.dataSource._data.length == 0) {
                        var targetName = "div_MultiMap_" + fieldMapID;
                        $("#" + targetName).hide();
                    }
                    break;
                }
            }
        }

        //Only call db delete if row has FieldMappingID
        //And only delete if row was removed. grid.removeRow will ask to confirm. If cancel row will still exist so don't delete.
        if (fieldMultiMapID > 0) {
            var itemsNow = grid.dataSource._data.length;
            if (totalItems != itemsNow) {
                var modelData = {
                    FieldMultiMapID: fieldMultiMapID
                }
                $.ajax({
                    url: "/UAS.Web/FileMapperWizard/DeleteMultiColumnMapping",
                    type: "POST",
                    data: modelData,
                    dataType: 'html',//this is data type of what you are returning
                    success: function (returnData) {
                        if (returnData) {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                                autoClose: false,
                                IsOpen: false
                            });
                        }
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                })
            }
        } else {
            var itemsNow = grid.dataSource._data.length;
            if (totalItems != itemsNow) {
                showMessage({
                    type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                    autoClose: false,
                    IsOpen: false
                });
            }
        }
    }
    function onSelectMAFField(e) {
        //var grid = $("#grid_AdditionalColumns").data("kendoGrid");        
    }
    function onChangeMAFField(e) {
        //var grid = $("#grid_AdditionalColumns").data("kendoGrid");        
    }
    function onSelectDemoUpdate(e) {
        //var grid = $("#grid_AdditionalColumns").data("kendoGrid");        
    }
    function onChangeDemoUpdate(e) {
        //var grid = $("#grid_AdditionalColumns").data("kendoGrid");
    }


</script>
  
    @{
        Html.Kendo()
            .Grid(Model.MultiMapColumns)
            .Name("grid_MultiColumnMap_" + Model.FieldMappingID)
            .Columns(columns =>
            {
            columns.Bound(c => c.FieldMultiMapID).Hidden(true);
            columns.Bound(c => c.FieldMappingID).Hidden(true);
            columns.Bound(c => c.FieldMappingTypeID).Hidden(true);
            columns.Bound(c => c.ColumnOrder).Hidden(true);
            columns.Bound(c => c.MCMIndex).Hidden(true);                

            columns.Template(@<text></text>).Width(245).ClientTemplate("");
            columns.Bound(c => c.selectedMAFField.Text).Width(245).ClientTemplate("#=selectedMAFField.Text#").Title("").EditorTemplateName("ColumnMapMAFField");//required

            columns.Template(@<text></text>).ClientTemplate("");

            columns.Template(@<text></text>).HtmlAttributes(new { @class = "templateCell" }).Width(60).ClientTemplate(
                                    @Html.Kendo().Button().Name("btnDeleteCondition")
                                        .Content("Delete <i class='km-icon icon-kmcustom-delete'></i>")
                                        .HtmlAttributes(new { @class = "btn k-button", type = "button", onclick = "return DeleteMultiMapCondition(#=FieldMultiMapID#,#=FieldMappingID#,#=MCMIndex#)" })
                                        .ToClientTemplate().ToHtmlString()
                                    );
            })
            //.Selectable()            
            .Editable(editable => editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(false).CreateAt(GridInsertRowPosition.Bottom))            
            .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(Model.AdditionalColumns.Count())
                .ServerOperation(false)
                .Model(m =>
                {
                    m.Id(i => i.FieldMultiMapID);
                    m.Field(i => i.FieldMultiMapID).Editable(false);
                    m.Field(i => i.FieldMappingID).Editable(false);
                    m.Field(i => i.FieldMappingTypeID).Editable(false);
                    m.Field(i => i.ColumnOrder).Editable(false);
                    m.Field(i => i.MCMIndex).Editable(false);
                    m.Field(i => i.selectedMAFField).Editable(true).DefaultValue(new SelectListItem { Text = "", Value = "" });
                })
            )
            .Render();
    }    