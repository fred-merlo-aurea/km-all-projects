@model List<UAD.DataCompare.Web.Models.ViewPricingListModel>
@*<style>
    .no-scrollbar .k-grid-header {
        padding: 0 !important;
    }

    .no-scrollbar .k-grid-content {
        overflow-y: visible;
    }
</style>*@
<style>
    a {
        cursor: pointer;
        text-decoration: underline;
    }
</style>
<div>
    @(
            Html.Kendo()
               .Grid(Model)
               .Name("Grid")
               .Pageable()
               //.Scrollable()
               //.HtmlAttributes(new {  style="min-width:1000px;height:600px;"})
               .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
               .Sortable(sortable => sortable
                        .AllowUnsort(true)
                        .SortMode(GridSortMode.SingleColumn))
               .Columns(columns =>
               {
                   columns.Bound(e => e.DcViewID).Hidden(true);
                   columns.Bound(e => e.FileName).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false))).Title("File Name");
                   //columns.Bound(e => e.FileName).Filterable(ftb => ftb.Cell(cell => { cell.ShowOperators(false); cell.Template("fileNameFilter"); })).Width(50).Title("File Name").Width(120);
                   //columns.Bound(e => e.FileName).Filterable(filterable => filterable.UI("fileFilter")).Title("File Name");
                   columns.Bound(e => e.DateCompared).Format("{0:MM/dd/yyyy hh:mm:ss}").Title("Date Compared").Filterable(false).Width(80);
                   columns.Bound(e => e.User).Title("User").HtmlAttributes(new { style = "overflow:hidden;" }).Filterable(false).Width(150);
                   columns.Bound(e => e.Target).Title("Target").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                   columns.Bound(e => e.Scope).Title("Scope").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                   columns.Bound(e => e.TypeOfComparision).Title("Type").Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                   columns.Bound(e => e.TotalDownloaded).Title("Downloaded").Filterable(false).HeaderHtmlAttributes(new { @style = "text-align:right;" })
                   .ClientFooterTemplate("<div><strong>Total Downloads: #=sum#</strong></div>")
                   .ClientTemplate("<a  onclick =\"ShowViewDownLoadforFile('#=SourceFileID#','#=TargetId#','#=ScopeId#','#=TypeId#')\">#=TotalDownloaded#</a>").HtmlAttributes(new { style = "text-align:right;" });
                   columns.Bound(e => e.Price).Filterable(false).Title("Price").HeaderHtmlAttributes(new { @style = "text-align:right;" })
                   .ClientFooterTemplate("<div><strong>Total Price: #:kendo.toString(sum, 'c')#</strong></div>")
                   .ClientTemplate("# if ( Billable == 'Yes') { #" +
                                            "<a  onclick =\"showDownLoadDetails('#=TotalRecordCount#','#=FileRecordCount#','#=FileComaprsionCost#','#=TotalDownLoadCost#')\">" +
                                            "#:kendo.toString(Price, 'c')#" +
                                            "</a> " +
                                            "# } else {#" +
                                             "<span style='float:right;'>" +
                                            "#:kendo.toString(Price, 'c')#" +
                                             "</span> " +
                                             "# }  # "
                                             )
                   .HtmlAttributes(new { style = "text-align:center" });
                   columns.Bound(e => e.Billable).Title("Billable").Filterable(false)
                          .ClientTemplate("# if ( Billable == 'No' && IsAdmin) { #" +
                                            "<a  onclick =\"showNotesDetails('#=Notes#')\">" +
                                            "#=Billable# " +
                                            "</a> " +
                                            "# } else {#" +
                                             "<span>" +
                                            "#=Billable# " +
                                             "</span> " +
                                             "# }  # "
                                             ).HtmlAttributes(new { style = "text-align:center" }).Width(50);
                   //columns.Bound(e => e.PStatus.PaymentStatusName).Filterable(ftb => ftb.Cell(cell => { cell.ShowOperators(false); cell.Template("fileStatuses"); }))
                   //.EditorTemplateName("PaymentStatusDropDown")
                   //.Title("Payment Status")
                   //.ClientTemplate("# if (PStatus.PaymentStatusName =='Pending') { #" +
                   //                                         "<span title='Status will change to Unpaid after #=UnpaidDate#'>#=PStatus.PaymentStatusName#</span>" +
                   //                                         "# } else { #" +
                   //                                         "<span>" +
                   //                                         "#=PStatus.PaymentStatusName#" +
                   //                                         "</span>" +
                   //                                         "# } #").HtmlAttributes(new { style = "text-align:center;" });

               })
                    //.Editable(editable => editable.Mode(GridEditMode.InCell))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .ServerOperation(false)
                        .Aggregates(agr => agr.Add(p => p.TotalDownloaded).Sum())
                        .Aggregates(agr => agr.Add(p => p.Price).Sum())
                        .Group( grp => grp.Add(p =>p.FileName))
                        //.Batch(true)
                        .Sort(sort => sort.Add("DateCompared").Descending())
                    //.Model(model =>
                    //{
                    //    model.Id(p => p.DcViewID);
                    //    model.Field(p => p.DcViewID).Editable(false);
                    //    model.Field(p => p.FileName).Editable(false);
                    //    model.Field(p => p.DateCompared).Editable(false);
                    //    model.Field(p => p.User).Editable(false);
                    //    model.Field(p => p.Billable).Editable(false);
                    //    model.Field(p => p.Target).Editable(false);
                    //    model.Field(p => p.Scope).Editable(false);
                    //    model.Field(p => p.TypeOfComparision).Editable(false);
                    //    model.Field(p => p.TotalDownloaded).Editable(false);
                    //    model.Field(p => p.Price).Editable(false);

                    //})
                    ))
</div>