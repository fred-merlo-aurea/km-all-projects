//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ControlCenter.com.ecn5.webservices.AccountManager {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AccountManagerSoap", Namespace="http://tempuri.org/")]
    public partial class AccountManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerbyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserbyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseChanels_InternalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomers_InternalOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AccountManager() {
            this.Url = global::ControlCenter.Properties.Settings.Default.ControlCenter_com_ecn5_webservices1_AccountManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddCustomerCompletedEventHandler AddCustomerCompleted;
        
        /// <remarks/>
        public event UpdateCustomerCompletedEventHandler UpdateCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomersCompletedEventHandler GetCustomersCompleted;
        
        /// <remarks/>
        public event GetCustomerbyIDCompletedEventHandler GetCustomerbyIDCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event GetUserbyIDCompletedEventHandler GetUserbyIDCompleted;
        
        /// <remarks/>
        public event GetLoginCompletedEventHandler GetLoginCompleted;
        
        /// <remarks/>
        public event GetBaseChanels_InternalCompletedEventHandler GetBaseChanels_InternalCompleted;
        
        /// <remarks/>
        public event GetCustomers_InternalCompletedEventHandler GetCustomers_InternalCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddCustomer(
                    string ecnAccessKey, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5) {
            object[] results = this.Invoke("AddCustomer", new object[] {
                        ecnAccessKey,
                        CustomerName,
                        IsActive,
                        Address,
                        City,
                        State,
                        Country,
                        Zip,
                        WebAddress,
                        Phone,
                        Fax,
                        Email,
                        Salutation,
                        ContactFirstName,
                        ContactLastName,
                        ContactTitle,
                        TechContact,
                        TechEmail,
                        TechPhone,
                        userdefinedfield1,
                        userdefinedfield2,
                        userdefinedfield3,
                        userdefinedfield4,
                        userdefinedfield5});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomerAsync(
                    string ecnAccessKey, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5) {
            this.AddCustomerAsync(ecnAccessKey, CustomerName, IsActive, Address, City, State, Country, Zip, WebAddress, Phone, Fax, Email, Salutation, ContactFirstName, ContactLastName, ContactTitle, TechContact, TechEmail, TechPhone, userdefinedfield1, userdefinedfield2, userdefinedfield3, userdefinedfield4, userdefinedfield5, null);
        }
        
        /// <remarks/>
        public void AddCustomerAsync(
                    string ecnAccessKey, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5, 
                    object userState) {
            if ((this.AddCustomerOperationCompleted == null)) {
                this.AddCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomerOperationCompleted);
            }
            this.InvokeAsync("AddCustomer", new object[] {
                        ecnAccessKey,
                        CustomerName,
                        IsActive,
                        Address,
                        City,
                        State,
                        Country,
                        Zip,
                        WebAddress,
                        Phone,
                        Fax,
                        Email,
                        Salutation,
                        ContactFirstName,
                        ContactLastName,
                        ContactTitle,
                        TechContact,
                        TechEmail,
                        TechPhone,
                        userdefinedfield1,
                        userdefinedfield2,
                        userdefinedfield3,
                        userdefinedfield4,
                        userdefinedfield5}, this.AddCustomerOperationCompleted, userState);
        }
        
        private void OnAddCustomerOperationCompleted(object arg) {
            if ((this.AddCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomerCompleted(this, new AddCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCustomer(
                    string ecnAccessKey, 
                    int CustomerID, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5) {
            object[] results = this.Invoke("UpdateCustomer", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        CustomerName,
                        IsActive,
                        Address,
                        City,
                        State,
                        Country,
                        Zip,
                        WebAddress,
                        Phone,
                        Fax,
                        Email,
                        Salutation,
                        ContactFirstName,
                        ContactLastName,
                        ContactTitle,
                        TechContact,
                        TechEmail,
                        TechPhone,
                        userdefinedfield1,
                        userdefinedfield2,
                        userdefinedfield3,
                        userdefinedfield4,
                        userdefinedfield5});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(
                    string ecnAccessKey, 
                    int CustomerID, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5) {
            this.UpdateCustomerAsync(ecnAccessKey, CustomerID, CustomerName, IsActive, Address, City, State, Country, Zip, WebAddress, Phone, Fax, Email, Salutation, ContactFirstName, ContactLastName, ContactTitle, TechContact, TechEmail, TechPhone, userdefinedfield1, userdefinedfield2, userdefinedfield3, userdefinedfield4, userdefinedfield5, null);
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(
                    string ecnAccessKey, 
                    int CustomerID, 
                    string CustomerName, 
                    bool IsActive, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    string Zip, 
                    string WebAddress, 
                    string Phone, 
                    string Fax, 
                    string Email, 
                    string Salutation, 
                    string ContactFirstName, 
                    string ContactLastName, 
                    string ContactTitle, 
                    string TechContact, 
                    string TechEmail, 
                    string TechPhone, 
                    string userdefinedfield1, 
                    string userdefinedfield2, 
                    string userdefinedfield3, 
                    string userdefinedfield4, 
                    string userdefinedfield5, 
                    object userState) {
            if ((this.UpdateCustomerOperationCompleted == null)) {
                this.UpdateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateCustomer", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        CustomerName,
                        IsActive,
                        Address,
                        City,
                        State,
                        Country,
                        Zip,
                        WebAddress,
                        Phone,
                        Fax,
                        Email,
                        Salutation,
                        ContactFirstName,
                        ContactLastName,
                        ContactTitle,
                        TechContact,
                        TechEmail,
                        TechPhone,
                        userdefinedfield1,
                        userdefinedfield2,
                        userdefinedfield3,
                        userdefinedfield4,
                        userdefinedfield5}, this.UpdateCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateCustomerOperationCompleted(object arg) {
            if ((this.UpdateCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCustomerCompleted(this, new UpdateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomers(string ecnAccessKey) {
            object[] results = this.Invoke("GetCustomers", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomersAsync(string ecnAccessKey) {
            this.GetCustomersAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetCustomersAsync(string ecnAccessKey, object userState) {
            if ((this.GetCustomersOperationCompleted == null)) {
                this.GetCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomersOperationCompleted);
            }
            this.InvokeAsync("GetCustomers", new object[] {
                        ecnAccessKey}, this.GetCustomersOperationCompleted, userState);
        }
        
        private void OnGetCustomersOperationCompleted(object arg) {
            if ((this.GetCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomersCompleted(this, new GetCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerbyID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerbyID(string ecnAccessKey, int CustomerID) {
            object[] results = this.Invoke("GetCustomerbyID", new object[] {
                        ecnAccessKey,
                        CustomerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerbyIDAsync(string ecnAccessKey, int CustomerID) {
            this.GetCustomerbyIDAsync(ecnAccessKey, CustomerID, null);
        }
        
        /// <remarks/>
        public void GetCustomerbyIDAsync(string ecnAccessKey, int CustomerID, object userState) {
            if ((this.GetCustomerbyIDOperationCompleted == null)) {
                this.GetCustomerbyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerbyIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerbyID", new object[] {
                        ecnAccessKey,
                        CustomerID}, this.GetCustomerbyIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerbyIDOperationCompleted(object arg) {
            if ((this.GetCustomerbyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerbyIDCompleted(this, new GetCustomerbyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddUser(string ecnAccessKey, int CustomerID, string Username, string Password, bool IsActive) {
            object[] results = this.Invoke("AddUser", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        Username,
                        Password,
                        IsActive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserAsync(string ecnAccessKey, int CustomerID, string Username, string Password, bool IsActive) {
            this.AddUserAsync(ecnAccessKey, CustomerID, Username, Password, IsActive, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string ecnAccessKey, int CustomerID, string Username, string Password, bool IsActive, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        Username,
                        Password,
                        IsActive}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateUser(string ecnAccessKey, int CustomerID, int UserID, string Username, string Password, bool IsActive) {
            object[] results = this.Invoke("UpdateUser", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        UserID,
                        Username,
                        Password,
                        IsActive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string ecnAccessKey, int CustomerID, int UserID, string Username, string Password, bool IsActive) {
            this.UpdateUserAsync(ecnAccessKey, CustomerID, UserID, Username, Password, IsActive, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string ecnAccessKey, int CustomerID, int UserID, string Username, string Password, bool IsActive, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        UserID,
                        Username,
                        Password,
                        IsActive}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUsers(string ecnAccessKey, int CustomerID) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        ecnAccessKey,
                        CustomerID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(string ecnAccessKey, int CustomerID) {
            this.GetUsersAsync(ecnAccessKey, CustomerID, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(string ecnAccessKey, int CustomerID, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        ecnAccessKey,
                        CustomerID}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserbyID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserbyID(string ecnAccessKey, int CustomerID, int UserID) {
            object[] results = this.Invoke("GetUserbyID", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserbyIDAsync(string ecnAccessKey, int CustomerID, int UserID) {
            this.GetUserbyIDAsync(ecnAccessKey, CustomerID, UserID, null);
        }
        
        /// <remarks/>
        public void GetUserbyIDAsync(string ecnAccessKey, int CustomerID, int UserID, object userState) {
            if ((this.GetUserbyIDOperationCompleted == null)) {
                this.GetUserbyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserbyIDOperationCompleted);
            }
            this.InvokeAsync("GetUserbyID", new object[] {
                        ecnAccessKey,
                        CustomerID,
                        UserID}, this.GetUserbyIDOperationCompleted, userState);
        }
        
        private void OnGetUserbyIDOperationCompleted(object arg) {
            if ((this.GetUserbyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserbyIDCompleted(this, new GetUserbyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLogin(string ecnAccessKey, string URL, int ecnUserID, string additionalParams) {
            object[] results = this.Invoke("GetLogin", new object[] {
                        ecnAccessKey,
                        URL,
                        ecnUserID,
                        additionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLoginAsync(string ecnAccessKey, string URL, int ecnUserID, string additionalParams) {
            this.GetLoginAsync(ecnAccessKey, URL, ecnUserID, additionalParams, null);
        }
        
        /// <remarks/>
        public void GetLoginAsync(string ecnAccessKey, string URL, int ecnUserID, string additionalParams, object userState) {
            if ((this.GetLoginOperationCompleted == null)) {
                this.GetLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginOperationCompleted);
            }
            this.InvokeAsync("GetLogin", new object[] {
                        ecnAccessKey,
                        URL,
                        ecnUserID,
                        additionalParams}, this.GetLoginOperationCompleted, userState);
        }
        
        private void OnGetLoginOperationCompleted(object arg) {
            if ((this.GetLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginCompleted(this, new GetLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBaseChanels_Internal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBaseChanels_Internal(string ecnAccessKey) {
            object[] results = this.Invoke("GetBaseChanels_Internal", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBaseChanels_InternalAsync(string ecnAccessKey) {
            this.GetBaseChanels_InternalAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetBaseChanels_InternalAsync(string ecnAccessKey, object userState) {
            if ((this.GetBaseChanels_InternalOperationCompleted == null)) {
                this.GetBaseChanels_InternalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseChanels_InternalOperationCompleted);
            }
            this.InvokeAsync("GetBaseChanels_Internal", new object[] {
                        ecnAccessKey}, this.GetBaseChanels_InternalOperationCompleted, userState);
        }
        
        private void OnGetBaseChanels_InternalOperationCompleted(object arg) {
            if ((this.GetBaseChanels_InternalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseChanels_InternalCompleted(this, new GetBaseChanels_InternalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomers_Internal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomers_Internal(string ecnAccessKey, int BaseChannelID) {
            object[] results = this.Invoke("GetCustomers_Internal", new object[] {
                        ecnAccessKey,
                        BaseChannelID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomers_InternalAsync(string ecnAccessKey, int BaseChannelID) {
            this.GetCustomers_InternalAsync(ecnAccessKey, BaseChannelID, null);
        }
        
        /// <remarks/>
        public void GetCustomers_InternalAsync(string ecnAccessKey, int BaseChannelID, object userState) {
            if ((this.GetCustomers_InternalOperationCompleted == null)) {
                this.GetCustomers_InternalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomers_InternalOperationCompleted);
            }
            this.InvokeAsync("GetCustomers_Internal", new object[] {
                        ecnAccessKey,
                        BaseChannelID}, this.GetCustomers_InternalOperationCompleted, userState);
        }
        
        private void OnGetCustomers_InternalOperationCompleted(object arg) {
            if ((this.GetCustomers_InternalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomers_InternalCompleted(this, new GetCustomers_InternalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddCustomerCompletedEventHandler(object sender, AddCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateCustomerCompletedEventHandler(object sender, UpdateCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomersCompletedEventHandler(object sender, GetCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerbyIDCompletedEventHandler(object sender, GetCustomerbyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetUserbyIDCompletedEventHandler(object sender, GetUserbyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLoginCompletedEventHandler(object sender, GetLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBaseChanels_InternalCompletedEventHandler(object sender, GetBaseChanels_InternalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseChanels_InternalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseChanels_InternalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomers_InternalCompletedEventHandler(object sender, GetCustomers_InternalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomers_InternalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomers_InternalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591