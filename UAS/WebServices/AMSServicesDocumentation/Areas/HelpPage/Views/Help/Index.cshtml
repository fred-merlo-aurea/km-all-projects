@using System.Web.Http.Controllers
@using System.Web.Http.Description
@using System.Collections.ObjectModel
@model Collection<ApiDescription>

@{
    ViewBag.Title = "Knowledge Marketing API Documentation";

    // Group APIs by controller
    ILookup<HttpControllerDescriptor, ApiDescription> apiGroups =  Model.ToLookup(api => api.ActionDescriptor.ControllerDescriptor);
}
<script src="~/Scripts/jquery-2.1.3.min.js" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        var d = document,
        accordionToggles = d.querySelectorAll('.js-accordionTrigger'),
        setAria,
        setAccordionAria,
        switchAccordion,
      touchSupported = ('ontouchstart' in window),
      pointerSupported = ('pointerdown' in window);

        skipClickDelay = function (e) {
            e.preventDefault();
            e.target.click();
        }

        setAriaAttr = function (el, ariaType, newProperty) {
            el.setAttribute(ariaType, newProperty);
        };
        setAccordionAria = function (el1, el2, expanded) {
            switch (expanded) {
                case "true":
                    setAriaAttr(el1, 'aria-expanded', 'true');
                    setAriaAttr(el2, 'aria-hidden', 'false');
                    break;
                case "false":
                    setAriaAttr(el1, 'aria-expanded', 'false');
                    setAriaAttr(el2, 'aria-hidden', 'true');
                    break;
                default:
                    break;
            }
        };
        //function
        switchAccordion = function (e) {
            console.log("triggered");
            e.preventDefault();
            var thisAnswer = e.target.parentNode.parentNode.nextElementSibling;
            var thisQuestion = e.target;
            if (thisAnswer.classList.contains('is-collapsed')) {
                setAccordionAria(thisQuestion, thisAnswer, 'true');
            } else {
                setAccordionAria(thisQuestion, thisAnswer, 'false');
            }
            thisQuestion.classList.toggle('is-collapsed');
            thisQuestion.classList.toggle('is-expanded');
            thisAnswer.classList.toggle('is-collapsed');
            thisAnswer.classList.toggle('is-expanded');

            thisAnswer.classList.toggle('animateIn');
        };
        for (var i = 0, len = accordionToggles.length; i < len; i++) {
            if (touchSupported) {
                accordionToggles[i].addEventListener('touchstart', skipClickDelay, false);
            }
            if (pointerSupported) {
                accordionToggles[i].addEventListener('pointerdown', skipClickDelay, false);
            }
            accordionToggles[i].addEventListener('click', switchAccordion, false);
        }
    });
</script>

<link type="text/css" href="~/Areas/HelpPage/HelpPage.css" rel="stylesheet" />
<header class="help-page">
    <div class="content-wrapper">
        <div class="float-left">
            <br /><h10>@ViewBag.Title</h10>
        </div>
    </div>
</header>
<div id="body" class="help-page">
    <section class="featured">
        <div class="content-wrapper">
            <h11>Introduction</h11>
            <p>
                <h13>
                    The UAD Services API allows integration of the Knowledge Marketing UAD Services tools into your applications.  This page provides
                    a complete list of the available API methods, with a summary for each.  Click on the method name to view examples and detail.
                </h13>
            </p>
            <h11>Quick Tips for Initial Implementation</h11>
            <p>
                <h13>
                    <ul style="font-family:Arial;font-size:14px;font-weight:normal;color:#9da2a7">
                        <li>To use the UAD Services API, you will need to contact your Platform Services Specialist for an API Access Key.</li>
                        <li>
                            Method Types
                            <ul>
                                <li>GET: Use this type of method when you want to retrieve an object and you know its ID</li>
                                <li>GET or POST for Search: Use either GET or POST when you want to return an object or a list of objects by passing in a query</li>
                                <li>POST: Use this type of method when you want to add an object</li>
                                <li>PUT: Use this type of method when you want to update an existing object and you know its ID</li>
                                <li>DELETE: Use this type of method when you want to delete and existing object and you know its ID</li>
                            </ul>
                        </li>
                        <li>When implementing calls to the UAD Services API you will want to write your application so that it observes the supplied list of Status Codes that can be found here.</li>
                        <li>
                            Unrecognized properties passed as input are <strong>ignored.</strong>.  In order to allow extensibility, RESTful web-service are designed to ignore unrecognized properties
                            of input (as long as the remaining -recognized- input forms a valid request).  <br />
                            This architecture allows for extensibility by allowing Knowledge Marketing to add features without the need to version all existing services or update all existing client
                            implementations, a pain point typically associated with adding features to SOAP and other web-service technologies that more strictly parse request messages.   <br />
                            This flexibility, means it is very important to understand the available input to --and default behaviour of-- any RESTful web-method you are invoking.<br />
                        </li>
                    </ul>
                </h13>
            </p>
        </div>
    </section>
    <section class="content-wrapper main-content clear-fix">
        <div>
            <div class="accordion" style="margin-left:0px;">
                @foreach (var group in apiGroups)
                {
                    @Html.DisplayFor(m => group, "ApiGroup")
                }
            </div>
        </div>
    </section>
</div>
