using System;
using FrameworkUAD.Entity;
using NUnit.Framework;
using Shouldly;
using BusinessLogicEnums = FrameworkUAD.BusinessLogic.Enums;

namespace FrameworkUAD.UnitTests.Entity
{
	[TestFixture]
	public class IssueArchiveProductSubscriptionTest
	{
		private const string DummyStringValue = "DummyString";
		private const int DummyIntValue = 10;

		[Test]
		public void IssueArchiveProductSubscription_SetAndGetValue_ReturnsDefaultValue()
		{
			// Arrange, Act
			var subscription = new IssueArchiveProductSubscription();

			// Assert
			subscription.ShouldSatisfyAllConditions(
				() => subscription.QualificationDate.ShouldBeNull(),
				() => subscription.PubQSourceID.ShouldBe(0),
				() => subscription.PubCategoryID.ShouldBe(0),
				() => subscription.PubTransactionID.ShouldBe(0),
				() => subscription.StatusUpdatedDate.Date.ShouldBe(DateTime.MinValue),
				() => subscription.StatusUpdatedReason.ShouldBeNull(),
				() => subscription.DateCreated.Date.ShouldBe(DateTime.Now.Date),
				() => subscription.DateUpdated.ShouldBeNull(),
				() => subscription.CreatedByUserID.ShouldBe(0),
				() => subscription.UpdatedByUserID.ShouldBe(0),
				() => subscription.Status.ShouldBeNull(),
				() => subscription.PubName.ShouldBeNull(),
				() => subscription.PubCode.ShouldBeNull(),
				() => subscription.PubTypeDisplayName.ShouldBeNull(),
				() => subscription.PubID.ShouldBe(0),
				() => subscription.PubSubscriptionID.ShouldBe(0),
				() => subscription.SubscriptionStatusID.ShouldBe(0),
				() => subscription.Demo7.ShouldBeNull(),
				() => subscription.Email.ShouldBeNull(),
				() => subscription.IsNewSubscription.ShouldBeFalse(),
				() => subscription.ExternalKeyID.ShouldBe(0),
				() => subscription.FirstName.ShouldBeNull(),
				() => subscription.LastName.ShouldBeNull(),
				() => subscription.Company.ShouldBeNull(),
				() => subscription.Title.ShouldBeNull(),
				() => subscription.Occupation.ShouldBeNull(),
				() => subscription.AddressTypeID.ShouldBe(0),
				() => subscription.Address1.ShouldBeNull(),
				() => subscription.Address2.ShouldBeNull(),
				() => subscription.Address3.ShouldBeNull(),
				() => subscription.City.ShouldBeNull(),
				() => subscription.RegionID.ShouldBe(0),
				() => subscription.ZipCode.ShouldBeNull(),
				() => subscription.Plus4.ShouldBeNull(),
				() => subscription.CarrierRoute.ShouldBeNull(),
				() => subscription.County.ShouldBeNull(),
				() => subscription.Country.ShouldBeNull(),
				() => subscription.CountryID.ShouldBe(0),
				() => subscription.Latitude.ShouldBe(0),
				() => subscription.Longitude.ShouldBe(0),
				() => subscription.IsAddressValidated.ShouldBeFalse(),
				() => subscription.AddressValidationDate.ShouldBeNull(),
				() => subscription.AddressValidationSource.ShouldBeNull(),
				() => subscription.AddressValidationMessage.ShouldBeNull(),
				() => subscription.Phone.ShouldBeNull(),
				() => subscription.Fax.ShouldBeNull(),
				() => subscription.Mobile.ShouldBeNull(),
				() => subscription.Website.ShouldBeNull(),
				() => subscription.Birthdate.ShouldBe(DateTime.MinValue),
				() => subscription.Age.ShouldBe(0),
				() => subscription.Income.ShouldBeNull(),
				() => subscription.Gender.ShouldBeNull(),
				() => subscription.IsLocked.ShouldBeFalse(),
				() => subscription.LockedByUserID.ShouldBe(0),
				() => subscription.PhoneExt.ShouldBeNull(),
				() => subscription.IsInActiveWaveMailing.ShouldBeFalse(),
				() => subscription.WaveMailingID.ShouldBe(0),
				() => subscription.AddressTypeCodeId.ShouldBe(0),
				() => subscription.AddressUpdatedSourceTypeCodeId.ShouldBe(0));
		}

		[Test]
		public void IssueArchiveProductSubscription_SetAndGetValue_ReturnsSetValue()
		{
			// Arrange, Act
			var dummyDate = DateTime.Now.Date;
			var subscription = new IssueArchiveProductSubscription
			{
				QualificationDate = dummyDate,
				PubQSourceID = DummyIntValue,
				PubCategoryID = DummyIntValue,
				PubTransactionID = DummyIntValue,
				StatusUpdatedDate = dummyDate,
				StatusUpdatedReason = DummyStringValue,
				DateCreated = dummyDate,
				DateUpdated = dummyDate,
				CreatedByUserID = DummyIntValue,
				UpdatedByUserID = DummyIntValue,
				Status = BusinessLogicEnums.EmailStatus.Inactive.ToString(),
				PubName = DummyStringValue,
				PubCode = DummyStringValue,
				PubTypeDisplayName = DummyStringValue,
				PubID = DummyIntValue,
				PubSubscriptionID = DummyIntValue,
				SubscriptionStatusID = DummyIntValue,
				Demo7 = DummyStringValue,
				Email = DummyStringValue,
				IsNewSubscription = true,
				ExternalKeyID = DummyIntValue,
				FirstName = DummyStringValue,
				LastName = DummyStringValue,
				Company = DummyStringValue,
				Title = DummyStringValue,
				Occupation = DummyStringValue,
				AddressTypeID = DummyIntValue,
				Address1 = DummyStringValue,
				Address2 = DummyStringValue,
				Address3 = DummyStringValue,
				City = DummyStringValue,
				RegionID = DummyIntValue,
				ZipCode = DummyStringValue,
				Plus4 = DummyStringValue,
				CarrierRoute = DummyStringValue,
				County = DummyStringValue,
				Country = DummyStringValue,
				CountryID = DummyIntValue,
				Latitude = DummyIntValue,
				Longitude = DummyIntValue,
				IsAddressValidated = true,
				AddressValidationDate = dummyDate,
				AddressValidationSource = DummyStringValue,
				AddressValidationMessage = DummyStringValue,
				Phone = DummyStringValue,
				Fax = DummyStringValue,
				Mobile = DummyStringValue,
				Website = DummyStringValue,
				Birthdate = dummyDate,
				Age = DummyIntValue,
				Income = DummyStringValue,
				Gender = DummyStringValue,
				IsLocked = true,
				LockedByUserID = DummyIntValue,
				PhoneExt = DummyStringValue,
				IsInActiveWaveMailing = true,
				WaveMailingID = DummyIntValue,
				AddressTypeCodeId = DummyIntValue,
				AddressUpdatedSourceTypeCodeId = DummyIntValue,
			};

			// Assert
			subscription.ShouldSatisfyAllConditions(
				() => subscription.QualificationDate?.Date.ShouldBe(dummyDate),
				() => subscription.PubQSourceID.ShouldBe(DummyIntValue),
				() => subscription.PubCategoryID.ShouldBe(DummyIntValue),
				() => subscription.PubTransactionID.ShouldBe(DummyIntValue),
				() => subscription.StatusUpdatedDate.Date.ShouldBe(dummyDate),
				() => subscription.StatusUpdatedReason.ShouldBe(DummyStringValue),
				() => subscription.DateCreated.Date.ShouldBe(dummyDate),
				() => subscription.DateUpdated.ShouldBe(dummyDate),
				() => subscription.CreatedByUserID.ShouldBe(DummyIntValue),
				() => subscription.UpdatedByUserID.ShouldBe(DummyIntValue),
				() => subscription.Status.ShouldBe(BusinessLogicEnums.EmailStatus.Inactive.ToString()),
				() => subscription.PubName.ShouldBe(DummyStringValue),
				() => subscription.PubCode.ShouldBe(DummyStringValue),
				() => subscription.PubTypeDisplayName.ShouldBe(DummyStringValue),
				() => subscription.PubID.ShouldBe(DummyIntValue),
				() => subscription.PubSubscriptionID.ShouldBe(DummyIntValue),
				() => subscription.SubscriptionStatusID.ShouldBe(DummyIntValue),
				() => subscription.Demo7.ShouldBe(DummyStringValue),
				() => subscription.Email.ShouldBe(DummyStringValue),
				() => subscription.IsNewSubscription.ShouldBeTrue(),
				() => subscription.ExternalKeyID.ShouldBe(DummyIntValue),
				() => subscription.FirstName.ShouldBe(DummyStringValue),
				() => subscription.LastName.ShouldBe(DummyStringValue),
				() => subscription.Company.ShouldBe(DummyStringValue),
				() => subscription.Title.ShouldBe(DummyStringValue),
				() => subscription.Occupation.ShouldBe(DummyStringValue),
				() => subscription.AddressTypeID.ShouldBe(DummyIntValue),
				() => subscription.Address1.ShouldBe(DummyStringValue),
				() => subscription.Address2.ShouldBe(DummyStringValue),
				() => subscription.Address3.ShouldBe(DummyStringValue),
				() => subscription.City.ShouldBe(DummyStringValue),
				() => subscription.RegionID.ShouldBe(DummyIntValue),
				() => subscription.ZipCode.ShouldBe(DummyStringValue),
				() => subscription.Plus4.ShouldBe(DummyStringValue),
				() => subscription.CarrierRoute.ShouldBe(DummyStringValue),
				() => subscription.County.ShouldBe(DummyStringValue),
				() => subscription.Country.ShouldBe(DummyStringValue),
				() => subscription.CountryID.ShouldBe(DummyIntValue),
				() => subscription.Latitude.ShouldBe(DummyIntValue),
				() => subscription.Longitude.ShouldBe(DummyIntValue),
				() => subscription.IsAddressValidated.ShouldBeTrue(),
				() => subscription.AddressValidationDate?.ShouldBe(dummyDate),
				() => subscription.AddressValidationSource.ShouldBe(DummyStringValue),
				() => subscription.AddressValidationMessage.ShouldBe(DummyStringValue),
				() => subscription.Phone.ShouldBe(DummyStringValue),
				() => subscription.Fax.ShouldBe(DummyStringValue),
				() => subscription.Mobile.ShouldBe(DummyStringValue),
				() => subscription.Website.ShouldBe(DummyStringValue),
				() => subscription.Birthdate.ShouldBe(dummyDate),
				() => subscription.Age.ShouldBe(DummyIntValue),
				() => subscription.Income.ShouldBe(DummyStringValue),
				() => subscription.Gender.ShouldBe(DummyStringValue),
				() => subscription.IsLocked.ShouldBeTrue(),
				() => subscription.LockedByUserID.ShouldBe(DummyIntValue),
				() => subscription.PhoneExt.ShouldBe(DummyStringValue),
				() => subscription.IsInActiveWaveMailing.ShouldBeTrue(),
				() => subscription.WaveMailingID.ShouldBe(DummyIntValue),
				() => subscription.AddressTypeCodeId.ShouldBe(DummyIntValue),
				() => subscription.AddressUpdatedSourceTypeCodeId.ShouldBe(DummyIntValue));
		}
	}
}