//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ecn.webservices.client.com.ecn5.webservices.specialprojects {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WATTAPISoap", Namespace="http://webservices.ecn5.com/")]
    public partial class WATTAPI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTokenForSubscriberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextTokenForSubscriberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubscriberExistsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WATTAPI() {
            this.Url = global::ecn.webservices.client.Properties.Settings.Default.ecn_webservices_client_com_ecn5_webservices_specialprojects_WATTAPI;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTokenForSubscriberCompletedEventHandler GetTokenForSubscriberCompleted;
        
        /// <remarks/>
        public event GetIssueURLCompletedEventHandler GetIssueURLCompleted;
        
        /// <remarks/>
        public event GetNextTokenForSubscriberCompletedEventHandler GetNextTokenForSubscriberCompleted;
        
        /// <remarks/>
        public event SubscriberExistsCompletedEventHandler SubscriberExistsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetTokenForSubscriber", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTokenForSubscriber(string accessKey, int GroupID, string EmailAddress, int issueID) {
            object[] results = this.Invoke("GetTokenForSubscriber", new object[] {
                        accessKey,
                        GroupID,
                        EmailAddress,
                        issueID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenForSubscriberAsync(string accessKey, int GroupID, string EmailAddress, int issueID) {
            this.GetTokenForSubscriberAsync(accessKey, GroupID, EmailAddress, issueID, null);
        }
        
        /// <remarks/>
        public void GetTokenForSubscriberAsync(string accessKey, int GroupID, string EmailAddress, int issueID, object userState) {
            if ((this.GetTokenForSubscriberOperationCompleted == null)) {
                this.GetTokenForSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenForSubscriberOperationCompleted);
            }
            this.InvokeAsync("GetTokenForSubscriber", new object[] {
                        accessKey,
                        GroupID,
                        EmailAddress,
                        issueID}, this.GetTokenForSubscriberOperationCompleted, userState);
        }
        
        private void OnGetTokenForSubscriberOperationCompleted(object arg) {
            if ((this.GetTokenForSubscriberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenForSubscriberCompleted(this, new GetTokenForSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetIssueURL", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIssueURL(string accesskey, string IssueID) {
            object[] results = this.Invoke("GetIssueURL", new object[] {
                        accesskey,
                        IssueID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueURLAsync(string accesskey, string IssueID) {
            this.GetIssueURLAsync(accesskey, IssueID, null);
        }
        
        /// <remarks/>
        public void GetIssueURLAsync(string accesskey, string IssueID, object userState) {
            if ((this.GetIssueURLOperationCompleted == null)) {
                this.GetIssueURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueURLOperationCompleted);
            }
            this.InvokeAsync("GetIssueURL", new object[] {
                        accesskey,
                        IssueID}, this.GetIssueURLOperationCompleted, userState);
        }
        
        private void OnGetIssueURLOperationCompleted(object arg) {
            if ((this.GetIssueURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueURLCompleted(this, new GetIssueURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetNextTokenForSubscriber", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextTokenForSubscriber(string accessKey, string Token, int IssueID) {
            object[] results = this.Invoke("GetNextTokenForSubscriber", new object[] {
                        accessKey,
                        Token,
                        IssueID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextTokenForSubscriberAsync(string accessKey, string Token, int IssueID) {
            this.GetNextTokenForSubscriberAsync(accessKey, Token, IssueID, null);
        }
        
        /// <remarks/>
        public void GetNextTokenForSubscriberAsync(string accessKey, string Token, int IssueID, object userState) {
            if ((this.GetNextTokenForSubscriberOperationCompleted == null)) {
                this.GetNextTokenForSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextTokenForSubscriberOperationCompleted);
            }
            this.InvokeAsync("GetNextTokenForSubscriber", new object[] {
                        accessKey,
                        Token,
                        IssueID}, this.GetNextTokenForSubscriberOperationCompleted, userState);
        }
        
        private void OnGetNextTokenForSubscriberOperationCompleted(object arg) {
            if ((this.GetNextTokenForSubscriberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextTokenForSubscriberCompleted(this, new GetNextTokenForSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/SubscriberExists", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubscriberExists(string accessKey, string Token, int IssueID) {
            object[] results = this.Invoke("SubscriberExists", new object[] {
                        accessKey,
                        Token,
                        IssueID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(string accessKey, string Token, int IssueID) {
            this.SubscriberExistsAsync(accessKey, Token, IssueID, null);
        }
        
        /// <remarks/>
        public void SubscriberExistsAsync(string accessKey, string Token, int IssueID, object userState) {
            if ((this.SubscriberExistsOperationCompleted == null)) {
                this.SubscriberExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscriberExistsOperationCompleted);
            }
            this.InvokeAsync("SubscriberExists", new object[] {
                        accessKey,
                        Token,
                        IssueID}, this.SubscriberExistsOperationCompleted, userState);
        }
        
        private void OnSubscriberExistsOperationCompleted(object arg) {
            if ((this.SubscriberExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscriberExistsCompleted(this, new SubscriberExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTokenForSubscriberCompletedEventHandler(object sender, GetTokenForSubscriberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenForSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenForSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetIssueURLCompletedEventHandler(object sender, GetIssueURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetNextTokenForSubscriberCompletedEventHandler(object sender, GetNextTokenForSubscriberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextTokenForSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextTokenForSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SubscriberExistsCompletedEventHandler(object sender, SubscriberExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscriberExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscriberExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591