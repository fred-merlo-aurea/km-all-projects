//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ecn.webservices.client.BlastManager_LOCAL {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BlastManagerSoap", Namespace="http://tempuri.org/")]
    public partial class BlastManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSubscriberCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAdvancedBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddScheduledBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddScheduledAdvancedBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchForBlastsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBlastOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastReportByISPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastOpensReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastClicksReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastBounceReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastUnsubscribeReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlastDeliveryReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BlastManager() {
            this.Url = global::ecn.webservices.client.Properties.Settings.Default.ecn_webservices_client_BlastManager_LOCAL_BlastManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSubscriberCountCompletedEventHandler GetSubscriberCountCompleted;
        
        /// <remarks/>
        public event AddBlastCompletedEventHandler AddBlastCompleted;
        
        /// <remarks/>
        public event AddAdvancedBlastCompletedEventHandler AddAdvancedBlastCompleted;
        
        /// <remarks/>
        public event UpdateBlastCompletedEventHandler UpdateBlastCompleted;
        
        /// <remarks/>
        public event AddScheduledBlastCompletedEventHandler AddScheduledBlastCompleted;
        
        /// <remarks/>
        public event AddScheduledAdvancedBlastCompletedEventHandler AddScheduledAdvancedBlastCompleted;
        
        /// <remarks/>
        public event GetBlastCompletedEventHandler GetBlastCompleted;
        
        /// <remarks/>
        public event SearchForBlastsCompletedEventHandler SearchForBlastsCompleted;
        
        /// <remarks/>
        public event DeleteBlastCompletedEventHandler DeleteBlastCompleted;
        
        /// <remarks/>
        public event GetBlastReportCompletedEventHandler GetBlastReportCompleted;
        
        /// <remarks/>
        public event GetBlastReportByISPCompletedEventHandler GetBlastReportByISPCompleted;
        
        /// <remarks/>
        public event GetBlastOpensReportCompletedEventHandler GetBlastOpensReportCompleted;
        
        /// <remarks/>
        public event GetBlastClicksReportCompletedEventHandler GetBlastClicksReportCompleted;
        
        /// <remarks/>
        public event GetBlastBounceReportCompletedEventHandler GetBlastBounceReportCompleted;
        
        /// <remarks/>
        public event GetBlastUnsubscribeReportCompletedEventHandler GetBlastUnsubscribeReportCompleted;
        
        /// <remarks/>
        public event GetBlastDeliveryReportCompletedEventHandler GetBlastDeliveryReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubscriberCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubscriberCount(string ecnAccessKey, int GroupID) {
            object[] results = this.Invoke("GetSubscriberCount", new object[] {
                        ecnAccessKey,
                        GroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriberCountAsync(string ecnAccessKey, int GroupID) {
            this.GetSubscriberCountAsync(ecnAccessKey, GroupID, null);
        }
        
        /// <remarks/>
        public void GetSubscriberCountAsync(string ecnAccessKey, int GroupID, object userState) {
            if ((this.GetSubscriberCountOperationCompleted == null)) {
                this.GetSubscriberCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriberCountOperationCompleted);
            }
            this.InvokeAsync("GetSubscriberCount", new object[] {
                        ecnAccessKey,
                        GroupID}, this.GetSubscriberCountOperationCompleted, userState);
        }
        
        private void OnGetSubscriberCountOperationCompleted(object arg) {
            if ((this.GetSubscriberCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriberCountCompleted(this, new GetSubscriberCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddBlast(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest) {
            object[] results = this.Invoke("AddBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest) {
            this.AddBlastAsync(ecnAccessKey, MessageID, ListID, DeptID, FilterID, Subject, FromEmail, FromName, ReplyEmail, IsTest, null);
        }
        
        /// <remarks/>
        public void AddBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, object userState) {
            if ((this.AddBlastOperationCompleted == null)) {
                this.AddBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBlastOperationCompleted);
            }
            this.InvokeAsync("AddBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest}, this.AddBlastOperationCompleted, userState);
        }
        
        private void OnAddBlastOperationCompleted(object arg) {
            if ((this.AddBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBlastCompleted(this, new AddBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAdvancedBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddAdvancedBlast(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string refBlasts, int OverRideAmount, bool IsOverRideAmount) {
            object[] results = this.Invoke("AddAdvancedBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest,
                        refBlasts,
                        OverRideAmount,
                        IsOverRideAmount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddAdvancedBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string refBlasts, int OverRideAmount, bool IsOverRideAmount) {
            this.AddAdvancedBlastAsync(ecnAccessKey, MessageID, ListID, DeptID, FilterID, Subject, FromEmail, FromName, ReplyEmail, IsTest, refBlasts, OverRideAmount, IsOverRideAmount, null);
        }
        
        /// <remarks/>
        public void AddAdvancedBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string refBlasts, int OverRideAmount, bool IsOverRideAmount, object userState) {
            if ((this.AddAdvancedBlastOperationCompleted == null)) {
                this.AddAdvancedBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAdvancedBlastOperationCompleted);
            }
            this.InvokeAsync("AddAdvancedBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest,
                        refBlasts,
                        OverRideAmount,
                        IsOverRideAmount}, this.AddAdvancedBlastOperationCompleted, userState);
        }
        
        private void OnAddAdvancedBlastOperationCompleted(object arg) {
            if ((this.AddAdvancedBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAdvancedBlastCompleted(this, new AddAdvancedBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateBlast(string ecnAccessKey, int MessageID, int ListID, int BlastID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail) {
            object[] results = this.Invoke("UpdateBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        BlastID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBlastAsync(string ecnAccessKey, int MessageID, int ListID, int BlastID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail) {
            this.UpdateBlastAsync(ecnAccessKey, MessageID, ListID, BlastID, FilterID, Subject, FromEmail, FromName, ReplyEmail, null);
        }
        
        /// <remarks/>
        public void UpdateBlastAsync(string ecnAccessKey, int MessageID, int ListID, int BlastID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, object userState) {
            if ((this.UpdateBlastOperationCompleted == null)) {
                this.UpdateBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBlastOperationCompleted);
            }
            this.InvokeAsync("UpdateBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        BlastID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail}, this.UpdateBlastOperationCompleted, userState);
        }
        
        private void OnUpdateBlastOperationCompleted(object arg) {
            if ((this.UpdateBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBlastCompleted(this, new UpdateBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddScheduledBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddScheduledBlast(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, string XMLSchedule) {
            object[] results = this.Invoke("AddScheduledBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        XMLSchedule});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddScheduledBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, string XMLSchedule) {
            this.AddScheduledBlastAsync(ecnAccessKey, MessageID, ListID, DeptID, FilterID, Subject, FromEmail, FromName, ReplyEmail, XMLSchedule, null);
        }
        
        /// <remarks/>
        public void AddScheduledBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, string XMLSchedule, object userState) {
            if ((this.AddScheduledBlastOperationCompleted == null)) {
                this.AddScheduledBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScheduledBlastOperationCompleted);
            }
            this.InvokeAsync("AddScheduledBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        XMLSchedule}, this.AddScheduledBlastOperationCompleted, userState);
        }
        
        private void OnAddScheduledBlastOperationCompleted(object arg) {
            if ((this.AddScheduledBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddScheduledBlastCompleted(this, new AddScheduledBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddScheduledAdvancedBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddScheduledAdvancedBlast(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string XMLSchedule, string refBlasts) {
            object[] results = this.Invoke("AddScheduledAdvancedBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest,
                        XMLSchedule,
                        refBlasts});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddScheduledAdvancedBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string XMLSchedule, string refBlasts) {
            this.AddScheduledAdvancedBlastAsync(ecnAccessKey, MessageID, ListID, DeptID, FilterID, Subject, FromEmail, FromName, ReplyEmail, IsTest, XMLSchedule, refBlasts, null);
        }
        
        /// <remarks/>
        public void AddScheduledAdvancedBlastAsync(string ecnAccessKey, int MessageID, int ListID, int DeptID, int FilterID, string Subject, string FromEmail, string FromName, string ReplyEmail, bool IsTest, string XMLSchedule, string refBlasts, object userState) {
            if ((this.AddScheduledAdvancedBlastOperationCompleted == null)) {
                this.AddScheduledAdvancedBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScheduledAdvancedBlastOperationCompleted);
            }
            this.InvokeAsync("AddScheduledAdvancedBlast", new object[] {
                        ecnAccessKey,
                        MessageID,
                        ListID,
                        DeptID,
                        FilterID,
                        Subject,
                        FromEmail,
                        FromName,
                        ReplyEmail,
                        IsTest,
                        XMLSchedule,
                        refBlasts}, this.AddScheduledAdvancedBlastOperationCompleted, userState);
        }
        
        private void OnAddScheduledAdvancedBlastOperationCompleted(object arg) {
            if ((this.AddScheduledAdvancedBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddScheduledAdvancedBlastCompleted(this, new AddScheduledAdvancedBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlast(string ecnAccessKey, int BlastID) {
            object[] results = this.Invoke("GetBlast", new object[] {
                        ecnAccessKey,
                        BlastID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastAsync(string ecnAccessKey, int BlastID) {
            this.GetBlastAsync(ecnAccessKey, BlastID, null);
        }
        
        /// <remarks/>
        public void GetBlastAsync(string ecnAccessKey, int BlastID, object userState) {
            if ((this.GetBlastOperationCompleted == null)) {
                this.GetBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastOperationCompleted);
            }
            this.InvokeAsync("GetBlast", new object[] {
                        ecnAccessKey,
                        BlastID}, this.GetBlastOperationCompleted, userState);
        }
        
        private void OnGetBlastOperationCompleted(object arg) {
            if ((this.GetBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastCompleted(this, new GetBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchForBlasts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchForBlasts(string ecnAccessKey, string XMLSearch) {
            object[] results = this.Invoke("SearchForBlasts", new object[] {
                        ecnAccessKey,
                        XMLSearch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchForBlastsAsync(string ecnAccessKey, string XMLSearch) {
            this.SearchForBlastsAsync(ecnAccessKey, XMLSearch, null);
        }
        
        /// <remarks/>
        public void SearchForBlastsAsync(string ecnAccessKey, string XMLSearch, object userState) {
            if ((this.SearchForBlastsOperationCompleted == null)) {
                this.SearchForBlastsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchForBlastsOperationCompleted);
            }
            this.InvokeAsync("SearchForBlasts", new object[] {
                        ecnAccessKey,
                        XMLSearch}, this.SearchForBlastsOperationCompleted, userState);
        }
        
        private void OnSearchForBlastsOperationCompleted(object arg) {
            if ((this.SearchForBlastsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchForBlastsCompleted(this, new SearchForBlastsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBlast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteBlast(string ecnAccessKey, int BlastID) {
            object[] results = this.Invoke("DeleteBlast", new object[] {
                        ecnAccessKey,
                        BlastID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteBlastAsync(string ecnAccessKey, int BlastID) {
            this.DeleteBlastAsync(ecnAccessKey, BlastID, null);
        }
        
        /// <remarks/>
        public void DeleteBlastAsync(string ecnAccessKey, int BlastID, object userState) {
            if ((this.DeleteBlastOperationCompleted == null)) {
                this.DeleteBlastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBlastOperationCompleted);
            }
            this.InvokeAsync("DeleteBlast", new object[] {
                        ecnAccessKey,
                        BlastID}, this.DeleteBlastOperationCompleted, userState);
        }
        
        private void OnDeleteBlastOperationCompleted(object arg) {
            if ((this.DeleteBlastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBlastCompleted(this, new DeleteBlastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastReport(string ecnAccessKey, int blastID) {
            object[] results = this.Invoke("GetBlastReport", new object[] {
                        ecnAccessKey,
                        blastID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastReportAsync(string ecnAccessKey, int blastID) {
            this.GetBlastReportAsync(ecnAccessKey, blastID, null);
        }
        
        /// <remarks/>
        public void GetBlastReportAsync(string ecnAccessKey, int blastID, object userState) {
            if ((this.GetBlastReportOperationCompleted == null)) {
                this.GetBlastReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastReport", new object[] {
                        ecnAccessKey,
                        blastID}, this.GetBlastReportOperationCompleted, userState);
        }
        
        private void OnGetBlastReportOperationCompleted(object arg) {
            if ((this.GetBlastReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastReportCompleted(this, new GetBlastReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastReportByISP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastReportByISP(string ecnAccessKey, int blastID, string XMLSearch) {
            object[] results = this.Invoke("GetBlastReportByISP", new object[] {
                        ecnAccessKey,
                        blastID,
                        XMLSearch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastReportByISPAsync(string ecnAccessKey, int blastID, string XMLSearch) {
            this.GetBlastReportByISPAsync(ecnAccessKey, blastID, XMLSearch, null);
        }
        
        /// <remarks/>
        public void GetBlastReportByISPAsync(string ecnAccessKey, int blastID, string XMLSearch, object userState) {
            if ((this.GetBlastReportByISPOperationCompleted == null)) {
                this.GetBlastReportByISPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastReportByISPOperationCompleted);
            }
            this.InvokeAsync("GetBlastReportByISP", new object[] {
                        ecnAccessKey,
                        blastID,
                        XMLSearch}, this.GetBlastReportByISPOperationCompleted, userState);
        }
        
        private void OnGetBlastReportByISPOperationCompleted(object arg) {
            if ((this.GetBlastReportByISPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastReportByISPCompleted(this, new GetBlastReportByISPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastOpensReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastOpensReport(string ecnAccessKey, int blastID, string filterType, bool withDetail) {
            object[] results = this.Invoke("GetBlastOpensReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        filterType,
                        withDetail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastOpensReportAsync(string ecnAccessKey, int blastID, string filterType, bool withDetail) {
            this.GetBlastOpensReportAsync(ecnAccessKey, blastID, filterType, withDetail, null);
        }
        
        /// <remarks/>
        public void GetBlastOpensReportAsync(string ecnAccessKey, int blastID, string filterType, bool withDetail, object userState) {
            if ((this.GetBlastOpensReportOperationCompleted == null)) {
                this.GetBlastOpensReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastOpensReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastOpensReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        filterType,
                        withDetail}, this.GetBlastOpensReportOperationCompleted, userState);
        }
        
        private void OnGetBlastOpensReportOperationCompleted(object arg) {
            if ((this.GetBlastOpensReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastOpensReportCompleted(this, new GetBlastOpensReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastClicksReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastClicksReport(string ecnAccessKey, int blastID, string filterType, bool withDetail) {
            object[] results = this.Invoke("GetBlastClicksReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        filterType,
                        withDetail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastClicksReportAsync(string ecnAccessKey, int blastID, string filterType, bool withDetail) {
            this.GetBlastClicksReportAsync(ecnAccessKey, blastID, filterType, withDetail, null);
        }
        
        /// <remarks/>
        public void GetBlastClicksReportAsync(string ecnAccessKey, int blastID, string filterType, bool withDetail, object userState) {
            if ((this.GetBlastClicksReportOperationCompleted == null)) {
                this.GetBlastClicksReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastClicksReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastClicksReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        filterType,
                        withDetail}, this.GetBlastClicksReportOperationCompleted, userState);
        }
        
        private void OnGetBlastClicksReportOperationCompleted(object arg) {
            if ((this.GetBlastClicksReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastClicksReportCompleted(this, new GetBlastClicksReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastBounceReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastBounceReport(string ecnAccessKey, int blastID, bool withDetail) {
            object[] results = this.Invoke("GetBlastBounceReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        withDetail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastBounceReportAsync(string ecnAccessKey, int blastID, bool withDetail) {
            this.GetBlastBounceReportAsync(ecnAccessKey, blastID, withDetail, null);
        }
        
        /// <remarks/>
        public void GetBlastBounceReportAsync(string ecnAccessKey, int blastID, bool withDetail, object userState) {
            if ((this.GetBlastBounceReportOperationCompleted == null)) {
                this.GetBlastBounceReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastBounceReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastBounceReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        withDetail}, this.GetBlastBounceReportOperationCompleted, userState);
        }
        
        private void OnGetBlastBounceReportOperationCompleted(object arg) {
            if ((this.GetBlastBounceReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastBounceReportCompleted(this, new GetBlastBounceReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastUnsubscribeReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastUnsubscribeReport(string ecnAccessKey, int blastID, bool withDetail) {
            object[] results = this.Invoke("GetBlastUnsubscribeReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        withDetail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastUnsubscribeReportAsync(string ecnAccessKey, int blastID, bool withDetail) {
            this.GetBlastUnsubscribeReportAsync(ecnAccessKey, blastID, withDetail, null);
        }
        
        /// <remarks/>
        public void GetBlastUnsubscribeReportAsync(string ecnAccessKey, int blastID, bool withDetail, object userState) {
            if ((this.GetBlastUnsubscribeReportOperationCompleted == null)) {
                this.GetBlastUnsubscribeReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastUnsubscribeReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastUnsubscribeReport", new object[] {
                        ecnAccessKey,
                        blastID,
                        withDetail}, this.GetBlastUnsubscribeReportOperationCompleted, userState);
        }
        
        private void OnGetBlastUnsubscribeReportOperationCompleted(object arg) {
            if ((this.GetBlastUnsubscribeReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastUnsubscribeReportCompleted(this, new GetBlastUnsubscribeReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlastDeliveryReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlastDeliveryReport(string ecnAccessKey, System.DateTime fromDate, System.DateTime toDate) {
            object[] results = this.Invoke("GetBlastDeliveryReport", new object[] {
                        ecnAccessKey,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlastDeliveryReportAsync(string ecnAccessKey, System.DateTime fromDate, System.DateTime toDate) {
            this.GetBlastDeliveryReportAsync(ecnAccessKey, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetBlastDeliveryReportAsync(string ecnAccessKey, System.DateTime fromDate, System.DateTime toDate, object userState) {
            if ((this.GetBlastDeliveryReportOperationCompleted == null)) {
                this.GetBlastDeliveryReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlastDeliveryReportOperationCompleted);
            }
            this.InvokeAsync("GetBlastDeliveryReport", new object[] {
                        ecnAccessKey,
                        fromDate,
                        toDate}, this.GetBlastDeliveryReportOperationCompleted, userState);
        }
        
        private void OnGetBlastDeliveryReportOperationCompleted(object arg) {
            if ((this.GetBlastDeliveryReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlastDeliveryReportCompleted(this, new GetBlastDeliveryReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetSubscriberCountCompletedEventHandler(object sender, GetSubscriberCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriberCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriberCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddBlastCompletedEventHandler(object sender, AddBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddAdvancedBlastCompletedEventHandler(object sender, AddAdvancedBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAdvancedBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAdvancedBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateBlastCompletedEventHandler(object sender, UpdateBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddScheduledBlastCompletedEventHandler(object sender, AddScheduledBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddScheduledBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddScheduledBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddScheduledAdvancedBlastCompletedEventHandler(object sender, AddScheduledAdvancedBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddScheduledAdvancedBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddScheduledAdvancedBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastCompletedEventHandler(object sender, GetBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchForBlastsCompletedEventHandler(object sender, SearchForBlastsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchForBlastsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchForBlastsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteBlastCompletedEventHandler(object sender, DeleteBlastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBlastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteBlastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastReportCompletedEventHandler(object sender, GetBlastReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastReportByISPCompletedEventHandler(object sender, GetBlastReportByISPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastReportByISPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastReportByISPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastOpensReportCompletedEventHandler(object sender, GetBlastOpensReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastOpensReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastOpensReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastClicksReportCompletedEventHandler(object sender, GetBlastClicksReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastClicksReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastClicksReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastBounceReportCompletedEventHandler(object sender, GetBlastBounceReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastBounceReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastBounceReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastUnsubscribeReportCompletedEventHandler(object sender, GetBlastUnsubscribeReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastUnsubscribeReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastUnsubscribeReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBlastDeliveryReportCompletedEventHandler(object sender, GetBlastDeliveryReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlastDeliveryReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlastDeliveryReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591