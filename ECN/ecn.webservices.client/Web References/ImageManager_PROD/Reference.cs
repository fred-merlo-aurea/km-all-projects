//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ecn.webservices.client.ImageManager_PROD {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImageManagerSoap", Namespace="http://webservices.ecn5.com/")]
    public partial class ImageManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolders1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolder1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImages1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddImage1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ImageManager() {
            this.Url = global::ecn.webservices.client.Properties.Settings.Default.ecn_webservices_client_ImageManager_PROD_ImageManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetFolders1CompletedEventHandler GetFolders1Completed;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event AddFolder1CompletedEventHandler AddFolder1Completed;
        
        /// <remarks/>
        public event GetImagesCompletedEventHandler GetImagesCompleted;
        
        /// <remarks/>
        public event GetImages1CompletedEventHandler GetImages1Completed;
        
        /// <remarks/>
        public event AddImageCompletedEventHandler AddImageCompleted;
        
        /// <remarks/>
        public event AddImage1CompletedEventHandler AddImage1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetFolders", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolders(string ecnAccessKey) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey) {
            this.GetFoldersAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        ecnAccessKey}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetFolders1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetFoldersWithinFolder", RequestElementName="GetFoldersWithinFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="GetFoldersWithinFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetFoldersWithinFolderResult")]
        public string GetFolders(string ecnAccessKey, string FolderName) {
            object[] results = this.Invoke("GetFolders1", new object[] {
                        ecnAccessKey,
                        FolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolders1Async(string ecnAccessKey, string FolderName) {
            this.GetFolders1Async(ecnAccessKey, FolderName, null);
        }
        
        /// <remarks/>
        public void GetFolders1Async(string ecnAccessKey, string FolderName, object userState) {
            if ((this.GetFolders1OperationCompleted == null)) {
                this.GetFolders1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolders1OperationCompleted);
            }
            this.InvokeAsync("GetFolders1", new object[] {
                        ecnAccessKey,
                        FolderName}, this.GetFolders1OperationCompleted, userState);
        }
        
        private void OnGetFolders1OperationCompleted(object arg) {
            if ((this.GetFolders1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolders1Completed(this, new GetFolders1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFolder(string ecnAccessKey, string FolderName) {
            object[] results = this.Invoke("AddFolder", new object[] {
                        ecnAccessKey,
                        FolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string FolderName) {
            this.AddFolderAsync(ecnAccessKey, FolderName, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string FolderName, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        ecnAccessKey,
                        FolderName}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new AddFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddFolder1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolderWithinFolder", RequestElementName="AddFolderWithinFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddFolderWithinFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddFolderWithinFolderResult")]
        public string AddFolder(string ecnAccessKey, string FolderName, string ParentFolderName) {
            object[] results = this.Invoke("AddFolder1", new object[] {
                        ecnAccessKey,
                        FolderName,
                        ParentFolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string FolderName, string ParentFolderName) {
            this.AddFolder1Async(ecnAccessKey, FolderName, ParentFolderName, null);
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string FolderName, string ParentFolderName, object userState) {
            if ((this.AddFolder1OperationCompleted == null)) {
                this.AddFolder1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolder1OperationCompleted);
            }
            this.InvokeAsync("AddFolder1", new object[] {
                        ecnAccessKey,
                        FolderName,
                        ParentFolderName}, this.AddFolder1OperationCompleted, userState);
        }
        
        private void OnAddFolder1OperationCompleted(object arg) {
            if ((this.AddFolder1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolder1Completed(this, new AddFolder1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetImages", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetImages(string ecnAccessKey) {
            object[] results = this.Invoke("GetImages", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImagesAsync(string ecnAccessKey) {
            this.GetImagesAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetImagesAsync(string ecnAccessKey, object userState) {
            if ((this.GetImagesOperationCompleted == null)) {
                this.GetImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImagesOperationCompleted);
            }
            this.InvokeAsync("GetImages", new object[] {
                        ecnAccessKey}, this.GetImagesOperationCompleted, userState);
        }
        
        private void OnGetImagesOperationCompleted(object arg) {
            if ((this.GetImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImagesCompleted(this, new GetImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetImages1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetImagesFromFolder", RequestElementName="GetImagesFromFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="GetImagesFromFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetImagesFromFolderResult")]
        public string GetImages(string ecnAccessKey, string FolderName) {
            object[] results = this.Invoke("GetImages1", new object[] {
                        ecnAccessKey,
                        FolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImages1Async(string ecnAccessKey, string FolderName) {
            this.GetImages1Async(ecnAccessKey, FolderName, null);
        }
        
        /// <remarks/>
        public void GetImages1Async(string ecnAccessKey, string FolderName, object userState) {
            if ((this.GetImages1OperationCompleted == null)) {
                this.GetImages1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImages1OperationCompleted);
            }
            this.InvokeAsync("GetImages1", new object[] {
                        ecnAccessKey,
                        FolderName}, this.GetImages1OperationCompleted, userState);
        }
        
        private void OnGetImages1OperationCompleted(object arg) {
            if ((this.GetImages1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImages1Completed(this, new GetImages1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddImage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddImage(string ecnAccessKey, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Image, string ImageName) {
            object[] results = this.Invoke("AddImage", new object[] {
                        ecnAccessKey,
                        Image,
                        ImageName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddImageAsync(string ecnAccessKey, byte[] Image, string ImageName) {
            this.AddImageAsync(ecnAccessKey, Image, ImageName, null);
        }
        
        /// <remarks/>
        public void AddImageAsync(string ecnAccessKey, byte[] Image, string ImageName, object userState) {
            if ((this.AddImageOperationCompleted == null)) {
                this.AddImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImageOperationCompleted);
            }
            this.InvokeAsync("AddImage", new object[] {
                        ecnAccessKey,
                        Image,
                        ImageName}, this.AddImageOperationCompleted, userState);
        }
        
        private void OnAddImageOperationCompleted(object arg) {
            if ((this.AddImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImageCompleted(this, new AddImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddImage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddImageToFolder", RequestElementName="AddImageToFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddImageToFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddImageToFolderResult")]
        public string AddImage(string ecnAccessKey, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Image, string ImageName, string FolderName) {
            object[] results = this.Invoke("AddImage1", new object[] {
                        ecnAccessKey,
                        Image,
                        ImageName,
                        FolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddImage1Async(string ecnAccessKey, byte[] Image, string ImageName, string FolderName) {
            this.AddImage1Async(ecnAccessKey, Image, ImageName, FolderName, null);
        }
        
        /// <remarks/>
        public void AddImage1Async(string ecnAccessKey, byte[] Image, string ImageName, string FolderName, object userState) {
            if ((this.AddImage1OperationCompleted == null)) {
                this.AddImage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImage1OperationCompleted);
            }
            this.InvokeAsync("AddImage1", new object[] {
                        ecnAccessKey,
                        Image,
                        ImageName,
                        FolderName}, this.AddImage1OperationCompleted, userState);
        }
        
        private void OnAddImage1OperationCompleted(object arg) {
            if ((this.AddImage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImage1Completed(this, new AddImage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetFolders1CompletedEventHandler(object sender, GetFolders1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolders1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolders1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddFolderCompletedEventHandler(object sender, AddFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddFolder1CompletedEventHandler(object sender, AddFolder1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolder1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolder1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetImagesCompletedEventHandler(object sender, GetImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetImages1CompletedEventHandler(object sender, GetImages1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImages1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImages1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddImageCompletedEventHandler(object sender, AddImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddImage1CompletedEventHandler(object sender, AddImage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddImage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591