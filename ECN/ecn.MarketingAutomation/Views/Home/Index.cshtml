@using ecn.MarketingAutomation.Models
@using KMEnums
@model HomeModel

@{
    ViewBag.Title = "Home Page";
}
<script src="~/Scripts/moment.min.js"></script>
<script src="~/Scripts/moment-timezone.min.js"></script>
<style>
    .k-i-arrow-s:before {
        content: none;
    }
</style>

<script>
    $(document).ready(function(){
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for(var i = 0; i < hashes.length; i++)
        {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        if(vars["se"] != null && vars["se"] != undefined)
        {
            showMessage({
                type: '@MessageType.Error',
                text: "You do not have permission to edit this automation",
                autoClose: false
            });
        }

        $(window).keydown(function(event){
            if(event.keyCode == 17) {
                closeLoadingWindow();
                event.preventDefault();
                return true;
            }
        });

    });

    function addAutomation() {

        var title = 'Add New Automation';
        var window = $("#FormWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '@Url.Action("Create")');
        kendoWindow.title(title);
        $("#FormContent").load('@Url.Action("LoadForm")', null, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }

    function editAutomation(MAID) {
        var title = 'Edit Automation Properties';// Bug 36975:Edit Automation Properties modal window should display header as 'Edit Automation Properties'
        var window = $("#FormWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '@Url.Action("Create")');
        kendoWindow.title(title);
        $("#FormContent").load('@Url.Action("LoadForm")', { id: MAID }, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }
    function pauseDiagram(MAID) {
        var title = 'Pause Automation';
        var window = $("#PauseWindow");
        kendo.bind(window, { Id: MAID });
        var kendoWindow = window.data('kendoWindow');
        $("#pauseDiv").load('@Url.Action("LoadPause")', { id: MAID }, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });


    }

    function pauseDiagramCallBack(MAID)
    {
        var grid = $("#ActiveDiagrams").data("kendoGrid");
        var dataItem = grid.dataSource.get(MAID);
        dataItem["State"] = "Paused";
        //dataItem.set("State", @((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Paused));
        window.location.reload(true);
    }

    function unPauseDiagramCallBack(MAID)
    {
        var grid = $("#ActiveDiagrams").data("kendoGrid");
        var dataItem = grid.dataSource.get(MAID);
        dataItem["State"] = "Published";
        //dataItem.set("State", @((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published));
        window.location.reload(true);
    }

    function publishAutomation(MAID) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Publish", "Home")',
            data: JSON.stringify({ id: MAID }),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response[0] == '200')//success
                {
                    var grid = $("#ActiveDiagrams").data("kendoGrid");
                    var dataItem = grid.dataSource.get(MAID);
                    dataItem["State"] = "Published";
                    //dataItem.set("State", @((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published));


                    window.location.reload(true);

                    showMessage({
                        type: '@MessageType.Success',
                        text: "Automation has been published",
                        autoClose: true
                    });
                }
                else if (response[0] = '500')//error
                {
                    showMessage({
                        type: '@MessageType.Error',
                        text: response[1],
                        autoClose: false
                    });
                }

            }
        });
    }

    function archiveDiagram(MAID) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Archive_UnArchive", "Home")',
            data: JSON.stringify({ MAID: MAID }),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response[0] == '200')//success
                {
                    var grid = $("#ActiveDiagrams").data("kendoGrid");
                    var dataItem = grid.dataSource.get(MAID);

                    //dataItem["State"] = parseInt(response[2]);
                    if (response[2] == "3") {
                        dataItem.set("State", "Archived");
                    }
                    else
                        dataItem.set("State", "Completed");

                    showMessage({
                        type: '@MessageType.Success',
                        text: response[1],
                        autoClose: true
                    });
                }
                else if (response[0] = '500')//error
                {
                    showMessage({
                        type: '@MessageType.Error',
                        text: response[1],
                        autoClose: true
                    });
                }

            }
        });
    }

    function unPauseDiagram(id) {
        var title = 'Resume Automation';
        var window = $("#PauseWindow");
        kendo.bind(window, { Id: id });
        var kendoWindow = window.data('kendoWindow');
        $("#pauseDiv").load('@Url.Action("LoadPause")', { id: id }, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }

    function copyAutomation(id) {
        var title = 'Copy Automation';
        var window = $("#FormWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '@Url.Action("Copy")');
        kendoWindow.title(title);
        $("#FormContent").load('@Url.Action("LoadForm")', { id: id, isCopy: true }, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }
    function deleteAutomation(id) {
        var win = $("#DeleteWindow");
        kendo.bind(win, { Id: id });
        var kendoWindow = win.data('kendoWindow');
        kendoWindow.center().open();
    }
    function closeWindow(id) {
        $("#" + id).data('kendoWindow').close();
    }
    function dataBound() {
        if (firstGridLoad) {

            firstGridLoad = false;
            SetPagerWidget("firstpage");

        }
        var grid = this;
        setTimeout(function () {
            $(".menuCell").each(function () {

                var cell = $(this), item = grid.dataItem(cell.closest("tr"));
                var endScript = cell.children("script").last().html();
                eval(cell.children("script").last().html());
                var menu = $("#Menu_" + item.MarketingAutomationID).data("kendoMenu");
                if (item.State == 'Saved')//saved
                {

                    menu.remove(".k-item:has(>.k-link:contains(Pause))");
                    menu.remove(".k-item:has(>.k-link:contains(Resume))");
                    menu.remove(".k-item:has(>.k-link:contains(View Heat Map))");
                    menu.remove(".k-item:has(>.k-link:contains(Archive))");
                    menu.remove(".k-item:has(>.k-link:contains(Unarchive))");
                }
                else if (item.State == 'Published')//published
                {
                    menu.remove(".k-item:has(>.k-link:contains(Publish))");
                    menu.remove(".k-item:has(>.k-link:contains(Resume))");
                    menu.remove(".k-item:has(>.k-link:contains(Archive))");
                    menu.remove(".k-item:has(>.k-link:contains(Unarchive))");
                    menu.remove(".k-item:has(>.k-link:contains(Delete))");
                }
                else if (item.State == 'Paused')//paused
                {
                    menu.remove(".k-item:has(>.k-link:contains(Unarchive))");
                    menu.remove(".k-item:has(>.k-link:contains(Archive))");
                    menu.remove(".k-item:has(>.k-link:contains(Pause))");
                    menu.remove(".k-item:has(>.k-link:contains(Delete))");
                    menu.remove(".k-item:has(>.k-link:contains(Publish))");
                }
                else if (item.State == 'Completed') {
                    menu.remove(".k-item:has(>.k-link:contains(Publish))");
                    //menu.remove(".k-item:has(>.k-link:contains(Edit))");
                    menu.remove(".k-item:has(>.k-link:contains(Pause))");
                    menu.remove(".k-item:has(>.k-link:contains(Resume))");
                    menu.remove(".k-item:has(>.k-link:contains(Delete))");
                    menu.remove(".k-item:has(>.k-link:contains(Unarchive))");
                }
                else if(item.State == 'Archived')//Archived
                {
                    menu.remove(".k-item:has(>.k-link:contains(Publish))");
                    //menu.remove(".k-item:has(>.k-link:contains(Edit))");
                    menu.remove(".k-item:has(>.k-link:contains(Pause))");
                    menu.remove(".k-item:has(>.k-link:contains(Resume))");
                    menu.remove(".k-item:has(>.k-link:contains(Archive))");
                    menu.remove(".k-item:has(>.k-link:contains(Delete))");
                }
                else {

                    // menu.remove(".k-item:has(>.k-link:contains(Edit))");
                    menu.remove(".k-item:has(>.k-link:contains(Delete))");
                    menu.remove(".k-item:has(>.k-link:contains(Resume))");
                    menu.remove(".k-item:has(>.k-link:contains(Archive))");
                    menu.remove(".k-item:has(>.k-link:contains(Unarchive))");
                }

            });
        }
        , 0);
        //this.element.find("[role='gridcell']").each(function () {
        //    eval($(this).children("script").html());
        //});
        //grid.tbody.find('>tr').each(function () {
        //    var dataItem = grid.dataItem(this);
        //    if (!dataItem.Child) {
        //        $(this).find(".k-hierarchy-cell a").hide();
        //    }
        //});
    }
    function getText(field) {
        var result;
        var grid = $("#ActiveDiagrams").data("kendoGrid");
        var column = getColumn(grid.columns, field.FieldName);
        var dataItem = grid.dataSource.get(field.id);
        return dataItem[field.FieldName];
        //$.each(grid.dataSource, function(i, row){
        //    if(v.id == field.id)
        //    {
        //        $.each(column.values, function (index, value) {
        //            if (value.value == field.FieldValue) {
        //                result = value.text;
        //            }
        //        });
        //    }
        //});
        //$.each(column.values, function (index, value) {
        //    if (value.value == field.FieldValue) {
        //        result = value.text;
        //    }
        //});
        //return result;
    }
    function getDate(value) {
        if (value == null) {
            return String.empty;
        }
        var date = kendo.parseDate(value);
        return kendo.toString(date, '@JavaScriptDateTimeFormat');
    }
    function getColumn(columns, name) {
        var result;
        $.each(columns, function (index, column) {
            if (column.field == name) {
                result = column;
            }
        });
        return result;
    }
    function getVisibility(state, action, MAID) {
        @*var visible = false;
        //var state = getText({ FieldName: 'State', FieldValue: status, id: MAID });
        switch (action) {
            case 'Edit': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved)' || state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)')
                    visible = true;
                break;
            }
            case 'Delete': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved)')
                    visible = true;
                break;
            }
            case 'Report': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)')
                    visible = true;
                break;
            }
            case 'Publish': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved)')
                    visible = true;
                break;
            }
            case 'Pause': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)')
                    visible = true;
                break;
            }
            case 'Unpause': {
                if (state == '@((int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Paused)')
                    visible = true;
                break;
            }
            default: break;
        }
        return visible;*@
    }
    function gotoATemplates() {
        showLoadingWindow();
        window.location.href = '@Url.Action("Index", "Templates")'
    }

    var targetUrl = '@Url.Action("MAReadToGrid", "Home")';
    var firstGridLoad = true;
    $(document).ready(function () {
        $("#ddPageSize").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            value:10,
            dataSource: [
              { text: "5", value: "5" },
              { text: "10", value: "10" },
              { text: "15", value: "15" },
              { text: "20", value: "20" }
            ]
        });
        $("#AutoStatus").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "-- All Statuses  --",
                value: ""
            },
            dataSource: [
              { text: "Saved", value: "Saved" },
              { text: "Paused", value: "Paused" },
              { text: "Completed", value: "Completed" },
              { text: "Archived", value: "Archived" },
              { text: "Published",value:"Published"}
            ]
        });
    });
    //Events - When First , Lats Previous and Next Buttons clicked on Pager.
    function GoToPage(e) {

        SetPagerWidget(e.target.id);
        var data = filterGridParams();
        ReBindGrid(data)

    }
    //Events - Triggers the Search using Search Criteria
    function Search() {
        SetPagerWidget("firstpage");
        firstGridLoad = true;
        var data = filterGridParams();
        ReBindGrid(data);
    }

    //Rebinds the Grid with data sends with DataSourceRequest
    function ReBindGrid(obj) {
        var grid = $("#ActiveDiagrams").data("kendoGrid");
        var options = grid.getOptions();
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: targetUrl,
                    dataType: "json",
                    data: obj
                }
            }
        })
        options.dataSource.data = dataSource.data;
        options.dataSource.pageSize = obj.PageSize;
        grid.setOptions(options);


    }
    //Data Sends with DataSourceRequest- Parameters that needs to be passed to the server
    function filterGridParams() {

        return {
            AutomationName: $("#AutomationName").val(),
            State:$("#AutoStatus").val(),
            SearchCriteria:$("#SearchCriterion").val(),
            PageNumber: $("#pagerInputPageNumber").val(),
            PageSize: $("#ddPageSize").val()
        };

    }
    //Function - Rebinds the Grid on Page Number input chnaged or Page size changed
    function RebindOnPageOrSizeChange() {

        if (parseInt($("#pagerInputPageNumber").val()) > 0 && !isNaN(parseInt($("#pagerInputPageNumber").val())) && $("#pagerInputPageNumber").val() <= parseInt($("#pagerTotalItems").text())) {
            SetPagerWidget($("#pagerInputPageNumber").val());
            var data = filterGridParams();
            ReBindGrid(data);
        }
        else {
            showMessage({
                type: 'Error',
                text: 'Please enter valid page number.',
                autoClose: false
            });

        }

    }
    //This drives the server side paging by getting current page and setting all Pager messages
    function SetPagerWidget(id) {
        var totalrecordCount = 0;
        var grid = $("#ActiveDiagrams").data("kendoGrid");
        if(grid.dataSource.view()[0]){
            totalrecordCount = parseInt(grid.dataSource.view()[0].TotalRecordCounts);
        }
        var pagesize = parseInt($("#ddPageSize").val());
        var currentpage = parseInt($("#pagerInputPageNumber").val());
        var lastpage = parseInt(totalrecordCount / pagesize) + 1;

        var firstpage = 1;

        if (id == "firstpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else {
                currentpage = firstpage;

            }
        }
        else if (id == "prevpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else
                currentpage = currentpage - 1;
        }
        else if (id == "nextpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = currentpage + 1;

        }
        else if (id == "lastpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = lastpage;

        }
        else {
            currentpage = parseInt(id);
        }
        var start = ((currentpage - 1) * pagesize + 1);
        var end = (currentpage * pagesize) < totalrecordCount ? (currentpage * pagesize) : totalrecordCount;
        var displaymessage = start + " - " + end + " of " + totalrecordCount + " items";

        $("#currentpage").text(currentpage);
        $("#pagerDisplay").text(displaymessage);
        $("#pagerTotalItems").text(lastpage);
        $("#pagerInputPageNumber").val(currentpage);

    }

    function checkChange(e){
        RebindOnPageOrSizeChange()
    }
</script>

<div class="gridttl">
    <div class="gridttlbox">
        <span>MARKETING AUTOMATION</span>
    </div>
</div>
<div class="gridttl" style="background-color:white; height: 0px; padding: 10px 0;">
    @if (KMPlatform.BusinessLogic.User.HasAccess(ViewBag.CurrentUser, KMPlatform.Enums.Services.MARKETINGAUTOMATION, KMPlatform.Enums.ServiceFeatures.MarketingAutomationTemplates, KMPlatform.Enums.Access.View))
    {
        @Html.Kendo().Button().Name("AutomationTemplates").Content("Automation Templates").HtmlAttributes(new { onclick = "gotoATemplates()", @class = "btn btn-blue2 float-left" })
    }
    @Html.Kendo().Button().Name("NewAutomation").Content("Add New Automation<i class='km-icon icon-kmplus-circled-1'></i>").HtmlAttributes(new { onclick = "addAutomation()", @class = "btn btn-blue2 float-right" })
</div>
   

@*@GetDiagrams(Model.ActiveAutomations, "ActiveDiagrams")*@


@*@helper GetDiagrams(IEnumerable<ECN_Framework_Entities.Communicator.MarketingAutomation> source, string name)*@
@{ 
        <div id="SearchPanel" style="margin:20px auto;">
           
            <span style="margin:20px"> <label class="lbl">Status:</label><input id="AutoStatus" /></span>
            <span style="margin:20px">
                 @Html.DropDownList("SearchCriterion", new List<SelectListItem> {
            new SelectListItem { Text = "starts with", Value = "starts" },
            new SelectListItem { Text = "contains", Value = "like" },
            new SelectListItem { Text = "equals", Value = "equals" },
            new SelectListItem { Text = "ends with", Value = "ends" }
            })
                <label class="lbl">Automation Name:</label>
                @Html.Kendo().TextBox().Name("AutomationName").HtmlAttributes(new { style = "overflow: hidden; width:45%" })
                
            </span>
            <input type="button" class="k-button" value="Search" id="search" onclick="Search()" />
        </div>
        <div id="resultgrid">
            <input type="hidden" value="1" id="latestpagehdn" />
            @(Html.Kendo().Grid<ecn.MarketingAutomation.Models.MarketingAutomtionViewModel>()
             .Name("ActiveDiagrams")
             .Events(e => e.DataBound("dataBound"))
             .Columns(columns =>
             {
             columns.Bound(p => p.TotalRecordCounts).Hidden(true);
             // Bug -36988 Automation Name field size limit should be 100 char and allow any special characters - To wrap Automation name in multiple lines
             columns.Bound(p => p.Name).Title("Automation Name").HtmlAttributes(new { style = "overflow: hidden; width:49%" })
                                  .Filterable(x => x.Cell(c => c.ShowOperators(false)));
             // columns.Bound(p => p.Type).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Automation Type").Width("120px");
             columns.Bound(p => p.State).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Status").Width("6%");
             columns.Bound(p => p.StartDate).Filterable(false).Format(DateFormat).Title("Start").Width("5%");
             columns.Bound(p => p.EndDate).Filterable(false).Format(DateFormat).Title("End").Width("5%");
             columns.Bound(p => p.CreatedDate).Filterable(false).Title("Created").Width("8%");
             columns.Bound(p => p.UpdatedDate).Filterable(false).Title("Last Updated").Width("7%");
             columns.Bound(p => p.LastPublishedDate).Filterable(false).Title("Last Published").Width("8%");
             columns.Bound(p => p).Template(@<text></text>).ClientTemplate(GetActions("ActiveDiagrams").ToString()).HtmlAttributes(new { @class = "menuCell" }).Filterable(false).Sortable(false);

             })
             .Sortable(sortable => sortable.SortMode(GridSortMode.SingleColumn))//Sort Based on Single column at a time, you can cnfigure allow for unsorting
             .Pageable(page => page.Enabled(false))
             .Filterable(filter => filter.Enabled(false))
             .DataSource(dataSource => dataSource // Configure the grid data source
                    .Ajax() // Specify that ajax binding is used
                    .Model(m =>
                    {
                        m.Id(y => y.MarketingAutomationID);
                    })
                    .Read(read => read.Data("filterGridParams").Action("MAReadToGrid", "Home"))// Set the action method which will return the data in JSON format
                    .PageSize(10) //Set up page size
                    .ServerOperation(true) //Get Data from Server
                    .Sort(sort => sort.Add("UpdatedDate").Descending())
            )


            )
        </div>
        <div id="pager" class="k-pager-wrap k-grid-pager k-widget k-floatwrap">
            <a class="k-link k-pager-nav k-state-disabled k-pager-first" title="Go to the first page" tabindex="-1">
                <span onclick="GoToPage(event)" id="firstpage" class="k-icon k-i-seek-w">seek-w</span>
            </a>
            <a class="k-link k-pager-nav k-state-disabled" title="Go to the previous page" tabindex="-1">
                <span onclick="GoToPage(event)" id="prevpage" class="k-icon k-i-arrow-w">arrow-w</span>
            </a>

            <ul class="k-pager-numbers k-reset">
                <li class="k-current-page"><span class="k-link k-pager-nav">1</span></li>
                <li><span class="k-state-selected" id="currentpage">1</span></li>

            </ul>
            <span class="k-pager-input k-label">Page<input class="k-textbox" id="pagerInputPageNumber" onchange="checkChange()">of <span id="pagerTotalItems"></span></span>
            <a class="k-link k-pager-nav" title="Go to the next page" tabindex="-1">
                <span onclick="GoToPage(event)" id="nextpage" class="k-icon k-i-arrow-e">arrow-e</span>
            </a>
            <a class="k-link k-pager-nav k-pager-last k-state-disabled" title="Go to the last page" tabindex="-1">
                <span onclick="GoToPage(event)" id="lastpage" class="k-icon k-i-seek-e">seek-e</span>
            </a>

            <span class="k-pager-sizes k-label">
                <span title="" class="k-widget k-dropdown k-header">
                    <input id="ddPageSize" onchange="checkChange()"/>
                </span>items per page
            </span>
            <span class="float-right" style="margin-right:10px;">
                <lable id="pagerDisplay"></lable>
            </span>
        </div>

        @*Html.Kendo()
            .Grid(source)
            .Name(name)
            .Columns(columns =>
            {

                // Bug -36988 Automation Name field size limit should be 100 char and allow any special characters - To wrap Automation name in multiple lines
                columns.Bound(p => p.Name).Title("Automation Name").HtmlAttributes(new { style = "overflow: hidden; width:55%" })
                                     .Filterable(x => x.Cell(c => c.ShowOperators(false)));
                // columns.Bound(p => p.Type).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Automation Type").Width("120px");
                columns.Bound(p => p.State).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Status").Width("8%");
            columns.Bound(p => p.StartDate).Filterable(false).Format(DateFormat).Title("Start").Width("5%");
            columns.Bound(p => p.EndDate).Filterable(false).Format(DateFormat).Title("End").Width("5%");
            columns.Bound(p => p.CreatedDate).Filterable(false).Format(DateTimeFormat).Title("Created").Width("7%");
            columns.Bound(p => p.UpdatedDate).Filterable(false).Format(DateTimeFormat).Title("Last Updated").Width("5%");
            columns.Bound(p => p.LastPublishedDate).Filterable(false).Format(DateTimeFormat).Title("Last Published").Width("5%");
            columns.Bound(p => p).Template(@<text></text>).ClientTemplate(GetActions(name).ToString()).HtmlAttributes(new { @class = "menuCell" }).Filterable(false).Sortable(false);
            })
                .Pageable()
                .Groupable()
                .Filterable(x => x.Mode(GridFilterMode.Row))
                .Sortable(x => x.AllowUnsort(false))
                .Resizable(x => x.Columns(true))
                .Events(x => x.DataBound("dataBound"))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Model(m =>
                    {
                        m.Id(y => y.MarketingAutomationID);
                    })
                    .PageSize(PageSize)
                    .ServerOperation(false)
                )
                //.ClientDetailTemplateId("Child")
                .Render();*@
        }

        @*@Html.Partial("Partials/_Source")
            @Html.Partial("Partials/_Report")*@

        @helper  GetActions(string name)
{
        @(Html.Kendo()
        .Menu()
        .Name("Menu_#=MarketingAutomationID#")
        .Direction(MenuDirection.Right)
        .Orientation(MenuOrientation.Vertical)
        .Animation(false)
        .Items(
            items => items.Add().Text("Actions").HtmlAttributes(new { @class = "k-menu-actions" }).Items(
                innerItems =>
                {

                    innerItems.Add().Text("Edit").HtmlAttributes(new { style = "#=getVisibility(State, 'Edit',MarketingAutomationID)#", onclick = "showLoadingWindow();" }).Action("Edit", "Diagrams", new { id = "#=MarketingAutomationID#" });
                    innerItems.Add().Text("Edit Automation Properties").HtmlAttributes(new { style = "#=getVisibility(State, 'Edit',MarketingAutomationID)#", onclick = "editAutomation('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Delete").HtmlAttributes(new { onclick = "deleteAutomation('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Publish").HtmlAttributes(new { style = "#=getVisibility(State, 'Publish',MarketingAutomationID)#", onclick = "publishAutomation('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("View Heat Map").HtmlAttributes(new { style = "#=getVisibility(State, 'Report',MarketingAutomationID)#" }).Action("Heatmap", "Diagrams", new { id = "#=MarketingAutomationID#" });
                    innerItems.Add().Text("Copy").HtmlAttributes(new { onclick = "copyAutomation('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Pause").HtmlAttributes(new { style = "#=getVisibility(State,'Pause',MarketingAutomationID)#", onclick = "pauseDiagram('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Resume").HtmlAttributes(new { style = "#=getVisibility(State,'Unpause',MarketingAutomationID)#", onclick = "unPauseDiagram('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Archive").HtmlAttributes(new { onclick = "archiveDiagram('#=MarketingAutomationID#')" });
                    innerItems.Add().Text("Unarchive").HtmlAttributes(new { onclick = "archiveDiagram('#=MarketingAutomationID#')" });
                    //innerItems.Add().Text("Reports").HtmlAttributes(new { onclick = "reportsDiagram('#=MarketingAutomationID#')" });
                }
            )
        ).ToClientTemplate())
}

        @functions{ bool GetVisiblity(string state, string action, string id)
            {
                bool visible = false;
                int stateInt = Convert.ToInt32(state);
                //var state = getText({ FieldName: 'State', FieldValue: status, id: MAID });
                switch (action)
                {
                    case "Edit":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved || stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)
                            {
                                visible = true;
                            }

                            break;
                        }
                    case "Delete":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved)
                            {
                                visible = true;
                            }
                            break;
                        }
                    case "Report":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)
                            {
                                visible = true;
                            }
                            break;
                        }
                    case "Publish":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Saved)
                            {
                                visible = true;
                            }
                            break;
                        }
                    case "Pause":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published)
                            {
                                visible = true;
                            }
                            break;
                        }
                    case "Unpause":
                        {
                            if (stateInt == (int)ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Paused)
                            {
                                visible = true;
                            }
                            break;
                        }
                    default: break;
                }
                if (!visible)
                {
                    return false;
                }
                return true;
            }
        }

        @{
            Html.Kendo()
                .Window()
                .Modal(true)
                .Animation(false)
                .Name("FormWindow")
                .Content(
                @<text>
                    @using (Ajax.BeginForm("Action", new AjaxOptions
                    {
                        HttpMethod = "POST",
                        InsertionMode = InsertionMode.Replace,
                        UpdateTargetId = "FormContent"

                        //OnFailure = "onError"
                    }))
                    {
                        <div id="FormContent"></div>
                    }
                </text>
)
        .Visible(false)
        .Render();
        }

        @{
            Html.Kendo()
                .Window()
                .Modal(true)
                .Animation(false)
                .Name("DeleteWindow")
                .Title(false)
                .Content(
                @<text>
                    @using (Ajax.BeginForm("Delete", new AjaxOptions
                    {
                        HttpMethod = "POST",
                        InsertionMode = InsertionMode.Replace,
                        UpdateTargetId = "deleteDiv",
                        //OnFailure = "onError"
                    }))
                    {
                        <div id="deleteDiv">
                            @Html.Partial("Partials/_AutomationDelete")
                        </div>
                    }
                </text>
)
        .Visible(false)
        .Render();
        }

        @{
            Html.Kendo()
                .Window()
                .Modal(true)
                .Animation(false)
                .Name("PauseWindow")
                .Title("Pause/Resume")
                .Content(
                @<text>

                    <div id="pauseDiv">

                    </div>

                </text>
)
        .Visible(false)
        .Render();
        }

        @{
            Html.Kendo()
                .Window()
                .Modal(true)
                .Animation(false)
                .Name("ViewTemplateWindow")
                .Width(800)
                .Height(750)
                .Visible(false)
                .Render();
        }

        @*@Html.Partial("Partials/_GroupExplorer")*@


