@using ecn.MarketingAutomation.Models


@model ecn.MarketingAutomation.Models.PostModels.MarketingAutomationPostModel

@{
    ViewBag.Title = "Edit Diagram";
}
<script src="~/Scripts/kendo/2017.1.223/kendo.all.min.js"></script>

<script src="~/Scripts/moment.min.js"></script>
<script src="~/Scripts/moment-timezone.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>

<style>
    .liItem {
        vertical-align: middle;
        height: 100%;
        float: left;
    }

        .liItem > span {
            vertical-align: middle;
            position: absolute;
            padding-top: 5px;
            padding-left: 5px;
        }

        .liItem :hover {
            vertical-align: middle;
            height: 100%;
            float: left;
        }

        .liItem > span :hover {
            vertical-align: middle;
            position: absolute;
            padding-top: 5px;
            padding-left: 5px;
        }


    #splitter {
        min-height: 600px;
    }

    #controlPropertiesPanel {
        height: 600px;
        overflow-y: auto;
    }

    #diagram {
        min-height: 600px;
    }

    #automationControlsPanel .k-panel .k-item {
        display: inline-block;
        width: 50%;
    }

    .shapeItem {
        margin: 10px;
        display: inline-block;
        width: 120px;
        height: 50px;
        background-image: url("../../Images/diagram-toolbox.png");
        /*background-size: auto 100%;*/
    }

    #automationControlsPanel span {
        text-align: center;
        display: inline;
    }

    .buttonsgroup {
        position: absolute;
        top: 760px;
        left: 20%;
    }

    .propertyItem {
        display: block;
        margin: 5px 0 0 5px;
    }

    .k-grid .k-grid-content {
        overflow-x: hidden;
        overflow-y: auto;
    }

    .automationinfo {
        background-color: #e3e3e3;
        color: #115fa9;
        text-align: left;
        padding: 8px 5px;
        font-size: 15px;
        letter-spacing: -0.3pt;
    }

        .automationinfo span {
            padding: 0 5px;
        }

    .ptitle {
        color: #115fa9;
        background-color: #6babe5;
        font-size: 18px;
        font-weight: 500;
        line-height: normal;
        text-align: left;
    }

        .ptitle .columntitle {
            color: #115fa9;
            font-size: 16px;
            font-weight: bolder;
            height: 24px;
            text-align: center;
            text-transform: uppercase;
            display: inline-block;
        }

    .propertyTitle {
        text-align: center;
        background-color: #f5f5f5;
        margin: 2px;
        height: 25px;
        color: #f07b05;
        font-size: 16px;
        font-weight: 600;
        padding-top: 15px;
    }
</style>
<div class="automationinfo">
    <span>@Model.Name</span><br>
    <span>From @Model.StartDate.ToString("M/d/yyyy") To @Model.EndDate.ToString("M/d/yyyy")</span><br>
    <span>Goal: @Model.Goal</span>
</div>
<div class="ptitle" style="width:100%">
    <div class="columntitle" style="width:15%;">Automation Controls</div>
    <div class="columntitle" style="width:55%;">Automation Canvas</div>
    <div class="columntitle" style="width:29%;">Control Properties</div>
</div>
<div id="splitter" class="form-wrapper formedit-formControls">
    <div id="left-pane" class="formeditorcolumn formcontrols">
        <div class="controlbox" id="automationControlsPanel" style="padding:10px;">
            <div id="myLeftDivOverlay" style="background-color:#E0E0E0; opacity:0.7; z-index:1000; width: 15%; height: 800px; position:absolute; top:0px; left:0px; visibility:hidden"></div>
            @(Html.Kendo()
        .PanelBar()
        .Name("shapesPanelBar")
        .Animation(false)
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Items(items =>
        {
            items.Add()
                .Text("Starting Controls")
                .HtmlAttributes(new { id = "pb_Start", @class = "sbox cstandart", name = "pb_Start" })
                .LinkHtmlAttributes(new { @class = "sboxtitle" })
                .Content(GetStartingControls().ToString());

            items.Add()
                .Text("Group Email Controls")
                .HtmlAttributes(new { id = "pb_GroupEmail", @class = "sbox cstandart", name = "pb_GroupEmail" })
                .LinkHtmlAttributes(new { @class = "sboxtitle" })
                .Content(GetGroupEmailControls().ToString());
            items.Add()
                .Text("Direct Email Controls")
                .HtmlAttributes(new { id = "pb_DirectEmail", @class = "sbox cstandart", name = "pb_DirectEmail" })
                .LinkHtmlAttributes(new { @class = "sboxtitle" })
                .Content(GetDirectEmailControls().ToString());
            items.Add()
                .Text("Other Controls")
                .HtmlAttributes(new { id = "pb_Other", @class = "sbox cstandart", name = "pb_Other" })
                .LinkHtmlAttributes(new { @class = "sboxtitle" })
                .Content(GetOtherControls().ToString());
        })

            )
            @helper GetStartingControls()
            {
            <ul>
                <li id="Start" class="item" data-shape='{"type":"rectangle","width":140,"height":40,"category":"Start","subcategory":"Start","fill":"#cccccc","content":{"text":"Start","fontSize":16,"color":"#142a52"},"isConfigured":true,"wasDropped":false}'><div class="liItem"><img src="~/Images/Green_Start.png" alt="Start" /><span>Start</span></div></li>
                <li id="Group" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Group","fill":"#FFFFFF","control_label":"Group","control_text":"Group","customer":"","customerid":0,"group":"","groupID":0,"isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Group_Orange.png" alt="Group" /><span>Group</span></div></li>
                <li id="Campaign" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"CampaignItem","fill":"#FFFFFF","control_label":"Campaign Item","control_text":"Campaign Item","customer":"","customerid":0,"campaign_item_value":true, "campaign_itemID":0, "campaign_item_name":"","campaign_item_name_value":0,"campaign_value":false,"campaign_ID":0,"campaign_name":"","campaign_itemtemplate_value":false, "campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","groups":"","groups_filter":"","suppression_groups":"","suppression_groups_filter":"","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","schedule":"","ECNID":-1,"isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Campaign_Orange.png" alt="Campaign Item" /><span>Campaign Item</span></div></li>
            </ul>
}
            @helper GetGroupEmailControls()
            {
            <ul>
                <li id="GCampaign" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"CampaignItem","subcategory":"Group","fill":"#FFFFFF","control_label":"Campaign Item","control_text":"Campaign Item","customer":"","customerid":0,"campaign_item_value":false, "campaign_itemID":0, "campaign_item_name":"","campaign_item_name_value":0,"campaign_value":false,"campaign_ID":0,"campaign_name":"","campaign_itemtemplate_value":false, "campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","groups":"","groups_filter":"","suppression_groups":"","suppression_groups_filter":"","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","schedule":"","ECNID":-1,"isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Campaign_Orange.png" alt="CampaignItem" /><span>Campaign Item</span></div></li>
                <li id="Noclick" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"NoClick","fill":"#FFFFFF","control_label":"Group Email No Click","control_text":"Group Email No Click","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="No Click" /><span>No Click</span></div></li>
                <li id="Noopen" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"NoOpen","fill":"#FFFFFF","control_label":"Group Email No Open","control_text":"Group Email No Open","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="No Open" /><span>No Open</span></div></li>
                <li id="Opennoclick" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Open_NoClick","fill":"#FFFFFF","control_label":"Group Email Open - No Click","control_text":"Group Email Open - No Click","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Open - No Click" /><span>Open - No Click</span></div></li>
                <li id="Sent" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Sent","fill":"#FFFFFF","control_label":"Group Email Sent","control_text":"Group Email Sent","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Sent" /><span>Sent</span></div></li>
                <li id="Notsent" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"NotSent","fill":"#FFFFFF","control_label":"Group Email Not Sent","control_text":"Group Email Not Sent","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Not Sent" /><span>Not Sent</span></div></li>
                <li id="Suppressed" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Suppressed","fill":"#FFFFFF","control_label":"Group Email Suppressed","control_text":"Group Email Suppressed","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Suppressed" /><span>Suppressed</span></div></li>
                <li id="GEclick" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Click","fill":"#FFFFFF","control_label":"Group Email Click","control_text":"Group Email Click","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Click" /><span>Click</span></div></li>
                <li id="GEopen" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Open","fill":"#FFFFFF","control_label":"Group Email Open","control_text":"Group Email Open","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customer":"","customerid":0,"campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","estSendTime":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/SmartSegment_1.png" alt="Open" /><span>Open</span></div></li>
            </ul>
}
            @helper GetDirectEmailControls()
            {
            <ul>
                <li id="DEclick" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Direct_Click","fill":"#FFFFFF","control_label":"Direct Email Click","control_text":"Direct Email Click","messageId":0,"message":"","linkRb":1,"link":"","link_alias":"","from_email":"","reply_to":"","from_name":"","subject":"", "isCancelled":false,"cancelDate":null,"ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/DirectClick_Blue.png" alt="Direct Click" /><span>Click</span></div></li>
                <li id="Formsubmit" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"FormSubmit","fill":"#FFFFFF","control_label":"Form Submit","control_text":"Form Submit","messageId":0,"message":"","linkRb":1,"link":"","link_alias":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/FormSubmission_Blue.png" alt="Form Submit" /><span>Submit</span></div></li>
                <li id="Formabandon" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"FormAbandon","fill":"#FFFFFF","control_label":"FormAbandon","control_text":"Form Abandon","messageId":0,"message":"","linkRb":1,"link":"","link_alias":"","from_email":"","reply_to":"","from_name":"","subject":"","ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/FormAbandon_Blue.png" alt="Form Abandon" /><span>Abandon</span></div></li>
                <li id="DEopen" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Direct_Open","fill":"#FFFFFF","control_label":"Direct Email Open","control_text":"Direct Email Open","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"", "isCancelled":false,"cancelDate":null,"ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/DirectOpen_Blue.png" alt="Direct Open" /><span>Open</span></div></li>
                <li id="DENoOpen" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Direct_NoOpen","fill":"#FFFFFF","control_label":"Direct Email No Open","control_text":"Direct Email No Open","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"", "isCancelled":false,"cancelDate":null,"ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/DirectNoOpen_Blue.png" alt="Direct No Open" /><span>No Open</span></div></li>
                <li id="Subscribe" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Subscribe","fill":"#FFFFFF","control_label":"Subscribe","control_text":"Subscribe","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"", "isCancelled":false,"cancelDate":null,"ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Subscribe_Blue.png" alt="Subscribe" /><span>Subscribe</span></div></li>
                <li id="Unsubscribe" class="item" data-shape='{"type":"rectangle","width":200,"height":40,"category":"Unsubscribe","fill":"#FFFFFF","control_label":"Unsubscribe","control_text":"Unsubscribe","messageId":0,"message":"","from_email":"","reply_to":"","from_name":"","subject":"", "isCancelled":false,"cancelDate":null,"ECNID":-1,"customerid":0,"customer":"","campaign_itemtemplate_value":false,"campaign_itemtemplateID":-1, "citemplatename":"","blastfield1":"","blastfield2":"","blastfield3":"","blastfield4":"","blastfield5":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Unsubscribe_Blue.png" alt="Unsubscribe" /><span>Unsubscribe</span></div></li>
            </ul>
}
            @helper GetOtherControls()
            {
            <ul>
                <li id="Form" class="item" data-shape='{"type":"rectangle","width":150,"height":40,"category":"Form","fill":"#FFFFFF","control_label":"Form","control_text":"Form","formId":0,"formname":"","linkRb":1,"link":"","link_alias":"","ECNID":-1,"customerid":0,"customer":"","isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Form_Orange.png" alt="Form" /><span>Form</span></div></li>
                <li id="Wait" class="item" data-shape='{"type":"rectangle","width":140,"height":40,"category":"Wait","fill":"#FFFFFF","control_label":"Wait","control_text":"Wait","days":null,"hours":null,"minutes":null,"isConfigured":false,"wasDropped":true}'><div class="liItem"><img src="~/Images/Yellow_Wait.png" alt="Wait" /><span>Wait</span></div></li>
                <li id="End" class="item" data-shape='{"type":"rectangle","width":140,"height":40,"control_label":"End","category":"End","fill":"#FFFFFF","content":{"text":"End","fontSize":16,"color":"#142a52"},"isConfigured":true,"wasDropped":true}'><div class="liItem"><img src="~/Images/Red_End.png" alt="No Click" /><span>End</span></div></li>
            </ul>
}

        </div>

    </div>
    <div id="center-pane" style="width:65%">
        <div id="myCenterDivOverlay" style="background-color:#E0E0E0; opacity:0.7; z-index:1000; width: 100%; min-height: 600px; position:absolute; top:0px; left:0px; visibility:hidden"></div>
        <div class="pane-content">
            <button id="zoomIn" style="border:none;padding:0;background-color:#E0E0E0;background-color: Transparent;"><img src="~/Images/Zoom_In.png" style="width:80%;height:80%;" alt="Zoom In" /></button>
            <button id="zoomOut" style="border:none;padding:0;background-color:#E0E0E0;background-color: Transparent;"><img src="~/Images/Zoom_Out.png" style="width:80%;height:80%;" alt="Zoom Out" /></button>
            <div id="diagram" style="border: none;min-height: 600px;overflow-y: auto;"></div>
        </div>
    </div>
    <div id="right-pane" style="width:29%">
        <div id="myRightDivOverlay" style="background-color:#E0E0E0; opacity:0.7; z-index:1000; width: 100%; min-height: 600px; position:absolute; top:0px; left:0px; visibility:hidden"></div>
        <div id="controlPropertiesPanel" class="pane-content">
            @Html.Partial("Partials/ControlProperties/_Campaign")
            @Html.Partial("Partials/ControlProperties/_Group")
            @Html.Partial("Partials/ControlProperties/_Wait")
            @Html.Partial("Partials/ControlProperties/_EmailControl")
            @Html.Partial("Partials/ControlProperties/_EmailClick")
        </div>
    </div>
</div>
<div class="bottomnavbox">
    <div class="bottomnav">
        <div class="lbtns">
            &nbsp;
        </div>
        <div class="cbtns">
            @if (Model.State == ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published || Model.State == ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Paused)
            {
                @Html.Kendo().Button().Name("SaveAutomation").Content("Publish").HtmlAttributes(new { @class = "btn btn-blue5", type = "button", onclick = "saveAutomation()" })
            }
            else
            {
                @Html.Kendo().Button().Name("SaveAutomation").Content("Save").HtmlAttributes(new { @class = "btn btn-blue5", type = "button", onclick = "saveAutomation()" })
            }
            @Html.Kendo().Button().Name("CancelAutomation").Content("Cancel").HtmlAttributes(new { @class = "btn btn-blue5", type = "button", onclick = "openCancelWindow()" })
        </div>
        <div class="rbtns">
            @Html.Kendo().Button().Name("SaveProps").Content("Save").HtmlAttributes(new { @class = "btn btn-blue5", type = "button", onclick = "saveProps()" })
            @Html.Kendo().Button().Name("CancelProps").Content("Cancel").HtmlAttributes(new { @class = "btn btn-blue5", type = "button", onclick = "cancelProps()" })
        </div>
    </div>
</div>

@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Animation(false)
        .Name("PopupWindow")
        .Content(
        @<text>
            @using (Ajax.BeginForm("Action", new AjaxOptions
            {
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "PopupContent",
                //OnFailure = "onError"
            }))
            {
                <div id="PopupContent"></div>
            }
        </text> )
        .Visible(false)
        .Render();
}
@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Title(false)
        .Animation(false)
        .Name("CancelWindow")
        .Content(
        @<text>
            @Html.Partial("Partials/_Cancel")
        </text> )
        .Visible(false)
        .Render();
}
@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Title(false)
        .Animation(false)
        .Name("SaveDialog")
        .Content(
        @<text>
            @Html.Partial("Partials/_Save")
        </text> )
        .Visible(false)
        .Render();
}
@Html.Partial("Partials/ControlPopups/_SelectCustomer")
@Html.Partial("Partials/ControlPopups/_SelectCampaignItem")
@Html.Partial("Partials/ControlPopups/_SelectCampaignItemTemplate")
@Html.Partial("Partials/ControlPopups/_SelectCampaignName")
@Html.Partial("Partials/ControlPopups/_SelectGroups")
@Html.Partial("Partials/ControlPopups/_SelectGroupFilters")
@Html.Partial("Partials/ControlPopups/_SelectSuppressionGroups")
@Html.Partial("Partials/ControlPopups/_SelectSuppressionGroupFilters")
@Html.Partial("Partials/ControlPopups/_SelectMessage")
@Html.Partial("Partials/ControlPopups/_SelectLinkAlias")
@Html.Partial("Partials/ControlPopups/_SelectGroup")
@Html.Partial("Partials/ControlPopups/_SelectForm")
<script>

    $(document).ready(function () {
        $("#diagram").kendoDiagram();

        var diagram = $("#diagram").data("kendoDiagram");

        var diagramNS = kendo.dataviz.diagram;
        var shape1 = diagram.addShape(new diagramNS.Point(100, 100));

        $("#zoomIn").on("click", function () {
            var zoom = $("#diagram").data("kendoDiagram").zoom();
            $("#diagram").data("kendoDiagram").zoom(zoom + 0.1,
                    {point: new diagramNS.Point(100, 100)});
        });

        $("#zoomOut").on("click", function () {
            var zoom = $("#diagram").data("kendoDiagram").zoom();
            $("#diagram").data("kendoDiagram").zoom(zoom - 0.1,
                    {point: new diagramNS.Point(100, 100)});
        });
    });
    var CanvasSave = 1;
    $(function() {
        var Shape = kendo.dataviz.diagram.Shape,
            Connection = kendo.dataviz.diagram.Connection,
            Rect = kendo.dataviz.diagram.Rect,
            Point = kendo.dataviz.diagram.Point,
            selected,
            lastItemSelected,
            lastItemSelectedConnsIn,
            newItemSelected,
            canEdit = true,
            wasDropped = false,
            MarketingAutomationID;
        $("nav > ul > li > a").prop("onclick",null);
        MarketingAutomationID = parseInt('@Model.MarketingAutomationID.ToString()');
        var modelState = '@Model.State.ToString()';
        var modelEndDate = new Date('@Model.EndDate.ToShortDateString()');
        var currentDate = new Date();
        var sysDatetime = new Date();
        var m = moment.utc(sysDatetime, "DD-MM-YYYY h:mm:ss A"); // parse input as UTC
        var tz = 'America/Chicago';
        var curcsttime = m.clone().tz(tz).format("MM/DD/YYYY h:mm:ss A");
        currentDate = new Date(curcsttime);
        currentDate = new Date(currentDate.getFullYear(),currentDate.getMonth(), currentDate.getDate(), 0,0,0,0 );
        if(modelState == 'Completed' || modelState == 'Archived')
        {
            canEdit = false;
            $('#SaveAutomation').hide();

        }

        if(modelState == 'Published' && modelEndDate < currentDate )
        {
            canEdit = false;
            $('#SaveAutomation').hide();
        }

        var diagram = $("#diagram").kendoDiagram({
            editable: {
                rotate: false,
                resize: false,
                drag:{snap:false}

            },
            shapeDefaults: {
                fill: "#0093f5",
                connectors:[{name:"top"},{name:"bottom"}]
            },
            connectionDefaults: {
                stroke: {
                    color: "#586477",
                    width: 2
                }
            },
            layout: {
                type: "tree",
                subtype: "down"
            },
            select: function (e) {
                if (e.selected.length) {
                    selected = e.selected;
                    var element = e.selected[0];
                    // Set selected item index
                    for (var i = 0; i < diagram.shapes.length; i++) {
                        if (diagram.shapes[i].id == element.id) {
                            lastItemSelected = i;
                            diagram.shapes[i].shapeVisual.redraw({
                                stroke: {
                                    width: 10,
                                    color: "#d8e9f7"
                                }
                            });
                        } else {
                            diagram.shapes[i].shapeVisual.redraw({
                                stroke: {
                                    width: 1,
                                    color: "#f5f5f5"
                                }
                            });
                        }
                    }
                    if (element instanceof Shape) {
                        lastItemSelectedConnsIn = diagram.shapes[lastItemSelected].connections("in");

                        onSelectedItem(element.options,wasDropped);
                        wasDropped = false;

                    } else {
                        onSelectedConn(element.options);
                    }
                }
                else
                {
                    paletteClear();
                    propsClear();
                }
            },
            remove: onRemove
        }).getKendoDiagram();
        // To disable the diagram Zoom Feature
        $("#diagram").unbind("mousewheel");
        $("#diagram").unbind("DOMMouseScroll");
        // Load initial diagram from Controller
        loadDiagram(JSON.parse(@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(Model.JSONDiagram, true))));
        initDiagram();
        enablePanelBar("Start",canEdit);
        disablePanelBar("GroupEmail",canEdit);
        disablePanelBar("DirectEmail",canEdit);
        disablePanelBar("Other",canEdit);
        var model = @Html.Raw(Json.Encode(Model));
        model.StartDate = '@Model.StartDate.ToString("M/d/yyyy")';
        model.EndDate = '@Model.EndDate.ToString("M/d/yyyy")';
        model.State = '@Model.State';

        function onSelectedItem(shape, fromDrop) {
            paletteClear();
            propsClear();
            clearRightOverlay();
            if(shape.customerid == 0)
            {
                shape.customerid = parseInt('@Model.CustomerID');
                shape.customer = '@Model.CustomerName';
            }

            if((shape.category =="Start") || (shape.category =="End") )
            {
                $('#SaveProps').hide(); $('#CancelProps').hide();
            }
            else if(canEdit)
            {
                $('#SaveProps').show(); $('#CancelProps').show();
            }
            else
            {
                $('#SaveProps').hide();  $('#CancelProps').hide();
            }

            var parentShape = getParent(shape);
            var sysDatetime = new Date();
            var m = moment.utc(sysDatetime, "DD-MM-YYYY h:mm:ss A"); // parse input as UTC
            var tz = 'America/Chicago';
            var curcsttime = m.clone().tz(tz).format("MM/DD/YYYY h:mm:ss A");
            var nowDate = new Date(curcsttime);
            var currentDate= new Date((nowDate.getMonth() + 1) + "/" + (nowDate.getDate()) + "/" + nowDate.getFullYear());
            switch (shape.category){
                case "Start":
                    if (diagram.shapes.length == 1)
                    {

                        enablePanelBar("Start", canEdit);
                        disablePanelBar("GroupEmail",canEdit);
                        disablePanelBar("DirectEmail",canEdit);
                        disablePanelBar("Other",canEdit);
                        fadeInControl('#Campaign');
                        fadeInControl('#Group');
                    }
                    else{
                        disablePanelBar("Start",canEdit);
                        disablePanelBar("GroupEmail",canEdit);
                        disablePanelBar("DirectEmail",canEdit);
                        disablePanelBar("Other",canEdit);
                    }
                    showRightOverlay();
                    break;
                case "Group":
                    //fadeInControl('#Subscribe');
                    //fadeInControl('#Unsubscribe');

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);
                    if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    {
                        disablePanelBar("Other",canEdit);
                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Wait');
                    }

                    if(parentShape.isConfigured || parentShape.category == "Start")
                    {
                        fadeInProp('#GroupProp');
                        propsGroup(shape, false, canEdit);

                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableGroupControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "CampaignItem":
                    //fadeInControl('#GCampaign');
                    //fadeInControl('#Noclick');
                    //fadeInControl('#Noopen');
                    //fadeInControl('#Opennoclick');
                    //fadeInControl('#Sent');
                    //fadeInControl('#Notsent');
                    //fadeInControl('#Suppressed');
                    //fadeInControl('#GEclick');
                    //fadeInControl('#GEopen');
                    //fadeInControl('#DEclick');
                    //fadeInControl('#DEopen');

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    enablePanelBar("Other",canEdit);
                    if(shape.editable.remove == true || shape.ECNID <= 0)
                    {
                        fadeInControl('#Form');
                    }
                    fadeInControl('#Wait');
                    if(shape.subcategory == 'Group')
                        fadeInControl('#End');
                    if(parentShape.isConfigured || parentShape.category == "Start")
                    {
                        fadeInProp('#CampaignProp');
                        if(shape.editable.remove == false)
                            $('#SaveProps').show();

                        var parentSendTime = traceSendTime(shape);
                        propsCampaign(shape, model.StartDate,model.EndDate, false, canEdit, parentSendTime,MarketingAutomationID,model.State);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' && new Date(model.EndDate)< currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableCIControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "NoClick":
                case "NoOpen":
                case "Open_NoClick":
                case "Sent":
                case "NotSent":
                case "Suppressed":
                case "Click":
                case "Open":
                    //fadeInControl('#Noclick');
                    //fadeInControl('#Noopen');
                    //fadeInControl('#Opennoclick');
                    //fadeInControl('#Sent');
                    //fadeInControl('#Notsent');
                    //fadeInControl('#Suppressed');
                    //fadeInControl('#GEclick');
                    //fadeInControl('#GEopen');
                    //fadeInControl('#DEclick');
                    //fadeInControl('#DEopen');

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);

                        enablePanelBar("Other",canEdit);
                        if(shape.editable.remove == false )
                        {
                            $('#SaveProps').show();

                            fadeInControl('#Wait');
                            fadeInControl('#End');

                        }
                        else{
                            fadeInControl('#Form');
                            fadeInControl('#Wait');
                            fadeInControl('#End');
                        }


                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailControlProp');
                        propsEmailControl(shape, traceCustomerId(shape), false, traceSendTime(shape),canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableEmailControls();
                        }
                        else if (model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published')
                        {
                            var est_sendtime = new Date(traceSendTime(shape));

                            if(est_sendtime - nowDate < 0)
                            {
                                disableforest_sendtime();
                            }
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Direct_Click":

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    var parentCIGE = getParentCIGE(shape);
                    var isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                    var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                    {
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#Wait');
                        fadeInControl('#End');

                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#End');
                    }

                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailClickProp');
                        propsEmailClick(shape, traceCustomerId(shape), false,null, traceLayoutID(shape),null,MarketingAutomationID,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disbleEmailClickControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "FormSubmit":
                case "FormAbandon":
                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);

                    var parentCIGE = getParentCIGE(shape);
                    var isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                    var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))

                    if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                    {
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#Wait');
                        fadeInControl('#End');

                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#End');
                    }

                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailClickProp');
                        propsEmailClick(shape, traceCustomerId(shape), false,null, traceLayoutID(shape),traceFormID(shape),MarketingAutomationID,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disbleEmailClickControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Form":
                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    var parentCIGE = getParentCIGE(shape);
                    var isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                    var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))

                    if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                    {
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Wait');
                        fadeInControl('#End');
                    }
                    else{
                        disablePanelBar("Other",canEdit);
                    }

                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailClickProp');
                        propsEmailClick(shape, traceCustomerId(shape), false,null, traceLayoutID(shape),null,MarketingAutomationID,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disbleEmailClickControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Direct_Open":

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    var parentCIGE = getParentCIGE(shape);
                    var isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                    var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                    {
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#Wait');
                        fadeInControl('#End');
                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#End');
                    }


                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailControlProp');
                        propsEmailControl(shape, traceCustomerId(shape),false, null,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableEmailControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Direct_NoOpen":
                    //fadeInControl('#Wait');

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);

                    var parentCIGE = getParentCIGE(shape);
                    var isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                    var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                    {
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#End');
                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#End');
                    }
                    if(shape.editable.remove == false)
                        $('#SaveProps').show();

                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailControlProp');
                        propsEmailControl(shape, traceCustomerId(shape),false, null,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableEmailControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Subscribe":
                    //fadeInControl('#Wait');

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    {
                        disablePanelBar("Other",canEdit);
                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#End');
                    }

                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailControlProp');
                        propsEmailControl(shape, traceCustomerId(shape),false, null,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableEmailControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Unsubscribe":

                    disablePanelBar("DirectEmail",canEdit);

                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);


                    if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                    {
                        disablePanelBar("Other",canEdit);
                    }
                    else{
                        enablePanelBar("Other",canEdit);
                        fadeInControl('#Form');
                        fadeInControl('#End');
                    }

                    if(shape.editable.remove == false)
                        $('#SaveProps').show();
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#EmailControlProp');
                        propsEmailControl(shape, traceCustomerId(shape),false,null,canEdit);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disableEmailControls();
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "Wait":
                    for (var i = 0; i < diagram.connections.length; i++) {
                        if (shape.id == diagram.connections[i].to.id) {
                            var parentShape = diagram.connections[i].from.options;
                            var isGroup = false;
                            var parentCIGE = getParentCIGE(shape);
                            if(parentShape.category == 'Form')
                            {
                                var parentParentCIGE = getParentCIGE(parentShape);
                                isGroup = parentParentCIGE.category == 'Unsubscribe' || parentParentCIGE.category == 'Subscribe';
                            }
                            else{
                                isGroup = parentCIGE.category == 'Unsubscribe' || parentCIGE.category == 'Subscribe';
                            }


                            var cantAdd = ((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))

                            if (parentShape.category == "CampaignItem"){
                                var sendTime = new Date(parentShape.schedule);

                                if(parentShape.editable.remove == true || parentShape.ECNID <= 0)
                                {
                                    enablePanelBar("DirectEmail",canEdit);
                                    fadeInControl('#DEclick');
                                    fadeInControl('#DEopen');

                                }

                                var year = sendTime.getFullYear();
                                var month = sendTime.getMonth();
                                var days = sendTime.getDate() - 1;
                                var hours = sendTime.getHours();
                                var minutes = sendTime.getMinutes();
                                var seconds = sendTime.getSeconds();

                                if(shape.days != null && shape.days != 'undefined' && shape.days != undefined)
                                {
                                    days += parseInt(shape.days);
                                }
                                else{shape.days = 0;}
                                if(shape.hours != null && shape.hours != 'undefined' && shape.hours != undefined)
                                {
                                    hours += parseInt(shape.hours);
                                }else{shape.hours = 0;}
                                if(shape.minutes != null && shape.minutes != 'undefined' && shape.minutes != undefined)
                                {
                                    minutes += parseInt(shape.minutes);
                                }
                                else{shape.minutes = 0;}
                                
                                sendTime = new Date(year, month , 1,  hours , minutes , seconds, 0);
                                sendTime.setDate(sendTime.getDate() + days);
                                var mWait = moment.utc(sendTime, "DD-MM-YYYY h:mm:ss A"); // parse input as UTC

                                var curcsttimeWait = mWait.clone().tz(tz).format("MM/DD/YYYY h:mm:ss A");
                                var sendTime = new Date(curcsttimeWait);
                                if(sendTime > nowDate || parentShape.ECNID <= 0)
                                {
                                    enablePanelBar("GroupEmail",canEdit);
                                    fadeInControl('#GCampaign');
                                    fadeInControl('#Noclick');
                                    fadeInControl('#Noopen');
                                    fadeInControl('#Opennoclick');
                                    fadeInControl('#Sent');
                                    fadeInControl('#Notsent');
                                    fadeInControl('#Suppressed');
                                    fadeInControl('#GEclick');
                                    fadeInControl('#GEopen');
                                }
                                break;
                            }
                            else if((parentShape.category == "Direct_Click" || parentShape.category == "Direct_Open" || parentShape.category == "FormSubmit" || parentShape.category == "FormAbandon") && (parentShape.editable.remove == true || !parentShape.ECNID || parentShape.ECNID <= 0))
                            {
                                if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined)  && !(cantAdd && isGroup))
                                {
                                    enablePanelBar("DirectEmail",canEdit);
                                    fadeInControl('#DENoOpen');
                                    fadeInControl('#DEclick');
                                    fadeInControl('#DEopen');
                                    disablePanelBar("GroupEmail",canEdit);
                                }
                                break;
                            }
                            else if(parentShape.category == "Form" && (parentShape.editable.remove == true || !parentShape.ECNID || parentShape.ECNID <= 0))
                            {
                                if((parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined) && !(cantAdd && isGroup))
                                {
                                    enablePanelBar("DirectEmail",canEdit);
                                    fadeInControl('#Formsubmit');
                                    fadeInControl('#Formabandon');
                                    disablePanelBar("GroupEmail",canEdit);
                                }
                                break;
                            }
                            else if(parentShape.category == "Group" && (parentShape.editable.remove == true || !parentShape.ECNID || parentShape.ECNID <= 0))
                            {
                                if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published'))
                                {

                                }
                                else{
                                    nReturn =traceGroupOptions(shape);
                                    switch (nReturn){
                                        case 0:
                                            fadeInControl('#Subscribe');
                                            fadeInControl('#Unsubscribe');
                                            enablePanelBar("DirectEmail",canEdit);
                                            break;
                                        default:
                                            fadeInControl('#Subscribe');
                                            enablePanelBar("DirectEmail",canEdit);
                                            break;
                                    }
                                }

                                disablePanelBar("GroupEmail",canEdit);
                                break;
                            }
                            else
                            {
                                var sendTime = new Date(parentShape.estSendTime);
                                var year = sendTime.getFullYear();
                                var month = sendTime.getMonth();
                                var days = sendTime.getDate() - 1;
                                var hours = sendTime.getHours();
                                var minutes = sendTime.getMinutes();
                                var seconds = sendTime.getSeconds();

                                if(shape.days != null && shape.days != 'undefined' && shape.days != undefined)
                                {
                                    days += parseInt(shape.days);
                                }
                                else{shape.days = 0;}
                                if(shape.hours != null && shape.hours != 'undefined' && shape.hours != undefined)
                                {
                                    hours += parseInt(shape.hours);
                                }else{shape.hours = 0;}
                                if(shape.minutes != null && shape.minutes != 'undefined' && shape.minutes != undefined)
                                {
                                    minutes += parseInt(shape.minutes);
                                }
                                else{shape.minutes = 0;}
                                sendTime = new Date(year, month , 1,  hours , minutes , seconds, 0);
                                sendTime.setDate(sendTime.getDate() + days);
                                var mWait = moment.utc(sendTime, "DD-MM-YYYY h:mm:ss A"); // parse input as UTC

                                var curcsttimeWait = mWait.clone().tz(tz).format("MM/DD/YYYY h:mm:ss A");
                                var sendTime = new Date(curcsttimeWait);
                                if(sendTime > nowDate )
                                {

                                    enablePanelBar("GroupEmail",canEdit);
                                    fadeInControl('#Noclick');
                                    fadeInControl('#Noopen');
                                    fadeInControl('#Opennoclick');
                                    fadeInControl('#Sent');
                                    fadeInControl('#Notsent');
                                    fadeInControl('#Suppressed');
                                    fadeInControl('#GEclick');
                                    fadeInControl('#GEopen');
                                    if(parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined)
                                    {
                                        if(parentShape.editable.remove == true || parentShape.editable.remove == undefined || parentShape.editable.remove == 'undefined')
                                        {
                                            enablePanelBar("DirectEmail",canEdit);
                                            fadeInControl('#DEclick');
                                            fadeInControl('#DEopen');
                                        }
                                    }

                                }
                                else if(parentShape.ECNID <= 0){

                                        enablePanelBar("GroupEmail",canEdit);
                                        fadeInControl('#Noclick');
                                        fadeInControl('#Noopen');
                                        fadeInControl('#Opennoclick');
                                        fadeInControl('#Sent');
                                        fadeInControl('#Notsent');
                                        fadeInControl('#Suppressed');
                                        fadeInControl('#GEclick');
                                        fadeInControl('#GEopen');
                                    if(parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined)
                                    {
                                        if(parentShape.editable.remove == true || parentShape.editable.remove == undefined || parentShape.editable.remove == 'undefined')
                                        {
                                            enablePanelBar("DirectEmail",canEdit);
                                            fadeInControl('#DEclick');
                                            fadeInControl('#DEopen');
                                        }
                                    }
                                }
                                else if((parentShape.editable.remove == true || parentShape.editable.remove == undefined || parentShape.editable.remove == 'undefined') && (parentCIGE.editable.remove == true || parentCIGE.editable.remove == undefined))
                                {

                                        enablePanelBar("GroupEmail",canEdit);
                                        enablePanelBar("DirectEmail",canEdit);
                                        fadeInControl('#DEclick');
                                        fadeInControl('#DEopen');
                                        fadeInControl('#GEopen');
                                        fadeInControl('#Noopen');
                                        fadeInControl('#GEclick');
                                        fadeInControl('#Noclick');
                                        fadeInControl('#Opennoclick');
                                        fadeInControl('#Sent');
                                        fadeInControl('#Notsent');
                                        fadeInControl('#Suppressed');

                                }





                                break;
                            }
                        }
                    }

                    disablePanelBar("Other",canEdit);
                    disablePanelBar("Start",canEdit);
                    if(parentShape.isConfigured)
                    {
                        fadeInProp('#WaitProp');
                        propsWait(shape,false,canEdit,parentShape,null,false);
                        if((model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Archived') ||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Completed')||(model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published' &&  new Date(model.EndDate) < currentDate ))
                        {
                            $('#SaveProps').hide(); $('#CancelProps').hide();
                            disbleWaitControls();
                        }
                        else if (model.State =='@ECN_Framework_Common.Objects.Communicator.Enums.MarketingAutomationStatus.Published')
                        {
                            var childShape = getGrpEmailChild(shape);
                            if(childShape != null && (childShape.category != "Unsubscribe") && (childShape.category != "Subscribe"))
                            {
                                if(childShape.ECNID > 0)
                                {
                                    var est_sendtime = new Date(traceSendTime(childShape));

                                    if(est_sendtime - nowDate < 0)
                                    {
                                        disablewaitforBlastSent();
                                    }
                                }
                            }
                        }
                    }
                    else{
                        if(!fromDrop && !shape.wasDropped)
                        {
                            showMessage({
                                type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                                text:"Control Properties have not been configured for Parent Control. Please configure Control Properties from the top down.",
                                autoClose: false,
                                action:focusGrid
                            });
                        }
                        showRightOverlay();
                        $('#SaveProps').hide(); $('#CancelProps').hide();
                    }
                    break;
                case "End":
                    disablePanelBar("Other",canEdit);
                    disablePanelBar("Start",canEdit);
                    disablePanelBar("GroupEmail",canEdit);
                    disablePanelBar("DirectEmail",canEdit);
                    showRightOverlay();
                    break;
            }



        }
        function onSelectedConn(conn) {
            paletteClear();
            propsClear();
            if(conn.endCap == "ArrowEnd")
                initDiagram(); // Prevents selecting and dragging a connection other than valid ones
            else
                diagram.undo(); // Prevents adding new connections from shapes
        }

        function focusGrid()
        {
            diagram.focus();
        }
        function onRemove(e) {
            e.preventDefault();
            if(e.shape) {
                if(e.shape.options.editable.remove == null || e.shape.options.editable.remove == true)
                {
                    var connOut = e.shape.connections("out")
                    var connIn = e.shape.connections("in")
                    if(connOut.length == 0) {
                        diagram.remove(e.shape);
                        diagram.remove(connIn);
                    }
                    else
                    {
                        showMessage({
                            type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                            text:"Automation Controls has child Controls. Please delete the child Controls before deleting the Parent Control.",
                            autoClose: false
                        });
                    }
                }
                else{
                    showMessage({
                        type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                        text:"Automation Control cannot be removed because it is in progress or completed.",
                        autoClose: false
                    });
                }

            }
            initDiagram();
        }
        function paletteClear()
        {
            var ancestor = document.getElementById('automationControlsPanel'),
            descendents = ancestor.getElementsByClassName('item');
            var i, e, d;
            for (i = 0; i < descendents.length; i++) {
                e = descendents[i];
                e.style.display = 'none';
                //e.style.transition = 'opacity 0.6s ease-out';
                //e.style.opacity = '0';
                //e.style.height = '0';
                //e.style.margin = '0';
                //e.style.overflow = 'hidden';
            }
        }
        function propsClear() {
            var ancestor = document.getElementById('controlPropertiesPanel'),
            descendents = ancestor.getElementsByTagName('div');
            var i, e, d;
            for (i = 0; i < descendents.length; i++) {
                e = descendents[i];
                e.style.display = 'none';
            }
        }
        //$("#shapesPanelBar").kendoPanelBar({
        //    expandMode: "single"
        //}).getKendoPanelBar().expand($("#shapesPanelBar_StartingCtrls"));

        if(canEdit)
        {
            $("#automationControlsPanel .item").kendoDraggable({
                hint: function () {
                    return this.element.clone().addClass("clone");
                }
            });

            $("#diagram").kendoDropTarget({
                drop: function (e) {
                    var item, pos, transformed;
                    if (e.draggable.hint) {
                        wasDropped = true;
                        item = e.draggable.hint.data("shape");
                        pos = e.draggable.hintOffset;
                        pos = new Point(pos.left, pos.top);
                        var transformed = diagram.documentToModel(pos);
                        item.x = transformed.x;
                        item.y = transformed.y;

                        // Add Control text
                        var shapeItem = new kendo.dataviz.diagram.Shape(item);

                        switch (item.category) {
                            case "CampaignItem":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/OrangeBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Campaign_Orange.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Group":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/OrangeBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Group_Orange.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Open_NoClick":
                            case "Suppressed":
                            case "Click":
                            case "Open":
                            case "NoOpen":
                            case "NoClick":
                            case "Sent":
                            case "NotSent":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/GreyBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/SmartSegment_1.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Subscribe":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Subscribe_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Unsubscribe":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Unsubscribe_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Wait":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/YellowBox.png",
                                    x:0,
                                    y:0,
                                    width:140,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Yellow_Wait.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Form":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/OrangeBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Form_Orange.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "FormSubmit":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/FormSubmission_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "FormAbandon":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/FormAbandon_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Direct_Click":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/DirectClick_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Direct_Open":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/DirectOpen_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Direct_NoOpen":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/BlueBox.png",
                                    x:0,
                                    y:0,
                                    width:200,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/DirectNoOpen_Blue.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "Start":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/GreenBox.png",
                                    x:0,
                                    y:0,
                                    width:140,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Green_Start.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            case "End":
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/RedBox.png",
                                    x:0,
                                    y:0,
                                    width:140,
                                    height:40
                                }));
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/Red_End.png",
                                    x:-15,
                                    y:5,
                                    width:30,
                                    height:30
                                }));
                                break;
                            default:
                                shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                                    source: "../../Images/shapeBck.png",
                                    x: 0,
                                    y: 0,
                                    width: 150,
                                    height: 40
                                }));
                                break;
                        }

                        var tb = new kendo.dataviz.diagram.TextBlock({
                            text: item.control_label,
                            x: 15,
                            y: 5,
                            color: "#000",
                            fontSize:12,
                            fontWeight:600
                        });
                        shapeItem.visual.append(tb);
                        tb = new kendo.dataviz.diagram.TextBlock({
                            text: item.control_text,
                            x: 15,
                            y: 20,
                            color: "#000",
                            fontSize:12
                        });
                        shapeItem.visual.append(tb);

                        // Draw shape
                        diagram.addShape(shapeItem);
                        newItemSelected = diagram.shapes.length - 1;

                        // Connect new with last selected shape
                        var connection, options = { startCap: "None", endCap: "ArrowEnd" };
                        if (lastItemSelected != undefined && newItemSelected != undefined && lastItemSelected != newItemSelected) {
                            connection = diagram.connect(diagram.shapes[lastItemSelected], diagram.shapes[newItemSelected], {toConnector: "top"});
                            connection.redraw(options);
                        }

                        diagram.save();

                        // Select shape
                        diagram.select(diagram.shapes[newItemSelected]);
                    }
                }
            });
        }

        $('#controlPropertiesPanel').click(function () {
            showOverlays();
            $("#SaveAutomation").data("kendoButton").enable(false);
        });

        $('#controlPropertiesPanel').focus(function(){
            showOverlays();
            $("#SaveAutomation").data("kendoButton").enable(false);
        });

        $('#controlPropertiesPanel').select(function(){
            showOverlays();
            $("#SaveAutomation").data("kendoButton").enable(false);
        });

        window.saveAutomation = function () {
            var newModel = @Html.Raw(Json.Encode( new ecn.MarketingAutomation.Models.PostModels.MarketingAutomationPostModel()));
            newModel.MarketingAutomationID = @Model.MarketingAutomationID;
            newModel.Name = '@Model.Name';
            newModel.CreatedDate = '@Model.CreatedDate';
            newModel.CreatedUserID = @Model.CreatedUserID;
            newModel.EndDate = '@Model.EndDate';
            newModel.Goal = '@HttpUtility.JavaScriptStringEncode(Model.Goal)';
            newModel.IsDeleted = '@Model.IsDeleted';
            newModel.StartDate = '@Model.StartDate';
            newModel.State = '@Model.State';
            newModel.UpdatedDate = '@Model.UpdatedDate';
            newModel.UpdatedUserID = @Model.UpdatedUserID;
            newModel.Diagram = JSON.stringify(diagram.save());
            newModel.JSONDiagram = newModel.Diagram;
            newModel = getDiagramObjects(newModel,diagram.shapes);
            newModel = getDiagramConnectors(newModel, diagram.connections);
            var modelJson = JSON.stringify(model)
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Save")',
                data: JSON.stringify(newModel),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if(response[0] == '200')//success
                    {
                        if(CanvasSave!=0)
                            window.location.reload(true);
                        else
                            location.href = SaveDialog.data("address");
                        showMessage({
                            type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                            autoClose: true
                        });
                    }
                    else if (response[0] == '500')//error
                    {
                        //loadDiagram(response[2]);

                        showMessage({
                            type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                            text:response[1],
                            autoClose: false
                        });
                    }
                    else if(response[0] == '302')
                    {
                        location.href = response[1];
                    }

                }
            });
        };
        window.cancelAutomation = function () {
            loadDiagram(JSON.parse(model.JSONDiagram));
            clearOverlays();
            initDiagram();
        };
        window.saveProps = function () {
            var options = null;
            options = diagram.shapes[lastItemSelected].options;
            var parentConnector = diagram.shapes[lastItemSelected].connections("in")
            var parentControl = parentConnector[0].from;
            try
            {
                var bReturn = false;
                bReturn=getShapeProperties(options,model.StartDate, model.EndDate, parentControl.options);
                options.isdirty = true;
                model.Diagram = JSON.stringify(diagram.save());
                loadDiagram(JSON.parse(model.Diagram));
                clearOverlays();
                $("#SaveAutomation").data("kendoButton").enable(true);
                //adjust send times
                if(options.category == "Wait" || options.category == "CampaignItem" )
                    adjustSendTimes(diagram.shapes[lastItemSelected].options)

                diagram.select(diagram.shapes[lastItemSelected]);
                if(bReturn)
                {
                    showMessage({
                        type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Information',
                        autoClose: false,
                        text :"To finalize the Cancellation, you need to click on the Publish button in the Automation Canvas."
                    });
                }
                else
                {
                    showMessage({
                        type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Success',
                        autoClose: true
                    });
                }
            }
            catch(error)
            {
                showMessage({
                    type: '@ECN_Framework_Common.Objects.Communicator.Enums.MessageType.Error',
                    autoClose:false,
                    text: error

                })
            }

        };
        window.cancelProps = function () {
            clearOverlays();
            $("#SaveAutomation").data("kendoButton").enable(true);
            diagram.select(diagram.shapes[lastItemSelected]);
        };
        window.reset = function () {
            diagram.clear();
            initDiagram();
            lastItemSelected = undefined;
            newItemSelected = undefined;
        };

        window.openCancelWindow = function(){
            var CancelDialog = $("#CancelWindow");
            CancelDialogWindow = CancelDialog.data("kendoWindow");
            CancelDialogWindow.center().open();
        }

        window.OkToCancel = function(){
            loadDiagram(JSON.parse(@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(Model.JSONDiagram, true))));
            clearOverlays();
            initDiagram();
            var CancelDialog = $("#CancelWindow");
            CancelDialogWindow = CancelDialog.data("kendoWindow");
            CancelDialogWindow.close();
        }
        window.closeCancelWindow = function(){
            var CancelDialog = $("#CancelWindow");
            CancelDialogWindow = CancelDialog.data("kendoWindow");
            CancelDialogWindow.close();
        }

        function adjustSendTimes(currentShape)
        {
            var isWait = false;

            if(currentShape.category == "Wait")
            {
                isWait = true;
            }



            //adjust send times of children

            var childArray = new  Array();//need to process possible multiple children
            for(var i = 0; i < diagram.connections.length; i++)
            {

                if(diagram.connections[i].from.id == currentShape.id && diagram.connections[i].to.category != "End")
                {
                    childArray.push(diagram.connections[i].to)
                }
            }

            for(var i = 0; i < childArray.length; i++)
            {
                for(var j = 0; j < diagram.shapes.length; j ++)
                {
                    if(diagram.shapes[j].options.id == childArray[i].options.id)
                    {
                        if(diagram.shapes[j].options.category != "Form" && diagram.shapes[j].options.category != "Wait" && diagram.shapes[j].options.category != "End")
                        {

                            var est_sendTime = traceSendTime(childArray[i]);;
                            var jsonDate = JSON.stringify(est_sendTime);
                            var AMPM = "AM";
                            if(est_sendTime !=null)
                            {
                                var adjustedHours = est_sendTime.getHours();
                                if (adjustedHours > 12) {
                                    AMPM = "PM";
                                    adjustedHours = adjustedHours - 12;
                                }
                                else if (adjustedHours == 12) { AMPM = "PM"; adjustedHours = adjustedHours }
                                else if (adjustedHours == 0) { adjustedHours = 12; }

                                var newSchedule2 = est_sendTime.getFullYear() + "-" + (est_sendTime.getMonth() + 1 < 10 ? "0" : "") + (est_sendTime.getMonth() + 1) + "-" + (est_sendTime.getDate() < 10 ? "0" : "") + (est_sendTime.getDate()) + "T" + (est_sendTime.getHours() < 10 ? '0' : '') + est_sendTime.getHours() + ":" + (est_sendTime.getMinutes() < 10 ? '0' : '') + est_sendTime.getMinutes() + ":" + (est_sendTime.getSeconds() < 10 ? '0': '') + est_sendTime.getSeconds();
                                if(newSchedule2 != diagram.shapes[j].options.schedule)
                                {
                                    diagram.shapes[j].options.isdirty = true;
                                }
                            }
                            if(diagram.shapes[j].options.category == 'CampaignItem')
                                diagram.shapes[j].options.schedule = newSchedule2;
                            else
                                diagram.shapes[j].options.est_sendTime = newSchedule2;


                        }
                        if(childArray[i].options.category != "Form")
                            adjustSendTimes(childArray[i].options)
                    }
                }
            }


        }

        function getDateFromString(dateString)
        {
            var days = 0;
            var hours = 0;
            var minutes = 0;
            var IsISOFormat = dateString.search('T');
            if(IsISOFormat > 0)
                var parentDate = new Date(parseIsoDatetime(dateString));
            else
                var parentDate = new Date(dateString);
            var parentyear = parentDate.getFullYear();
            var parentmonth = parentDate.getMonth()
            var parentdays = parentDate.getDate();
            var parenthours = parentDate.getHours();
            var parentminutes =parentDate.getMinutes();
            var parentseconds = parentDate.getSeconds();

            if(parentdays != null && parentdays > 0)
            {
                days += parseInt(parentdays);
            }
            if(parenthours != null && parenthours > 0)
                hours += parseInt(parenthours);
            if(parentminutes != null && parentminutes > 0)
                minutes += parseInt(parentminutes);

            var waitDate = new Date(parentyear,parentmonth,days, hours, minutes,parentseconds,0);


            return waitDate;
        }

        function getDiagramConnectors(newModel, connections)
        {

            for(var i = 0; i < connections.length;i++)
            {
                var current = connections[i];
                var newConnect = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Connector()));
                newConnect.id = current.id;
                newConnect.from.shapeId = current.from.id;
                newConnect.to.shapeId = current.to.id;
                newConnect.MAConnectorID = current.MAConnectorID;
                newModel.Connectors.push(newConnect);
            }
            return newModel;
        }

        function getDiagramObjects(newModel, shapes){

            for(var i = 0;i< shapes.length;i++)
            {
                var current = shapes[i].options;
                switch(current.category)
                {
                    case "CampaignItem":
                        var ci = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.CampaignItem()));
                        ci.CampaignID = current.campaign_item_nameID;
                        ci.CampaignItemID = current.campaign_itemID;
                        ci.CampaignItemName = current.campaign_item_name;
                        ci.CampaignName = current.campaign_name;
                        ci.ControlID = current.id;
                        ci.CustomerID = current.customerid;
                        ci.CustomerName = current.customer;
                        if(ci.campaign_itemID)
                        {
                            ci.ECNID = current.campaign_itemID;
                        }
                        else{
                            ci.ECNID = current.ECNID;
                        }
                        ci.EmailSubject = current.subject;
                        ci.ExtraText = "";
                        ci.FromEmail = current.from_email;
                        ci.FromName = current.from_name;
                        ci.IsDirty = current.isDirty;
                        ci.MAControlID = current.MAControlID;
                        ci.MessageID = current.messageId;
                        ci.MessageName = current.message;
                        ci.ReplyTo = current.reply_to;
                        ci.CreateCampaignItem = current.campaign_item_value;
                        ci.CreateCampaign = current.campaign_value;
                        ci.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        ci.CampaignItemTemplateID=current.citemplateID;
                        ci.CampaignItemTemplateName =current.citemplatename;
                        ci.BlastField1=current.blastfield1;
                        ci.BlastField2=current.blastfield2;
                        ci.BlastField3=current.blastfield3;
                        ci.BlastField4=current.blastfield4;
                        ci.BlastField5=current.blastfield5;
                        ci.SendTime = current.schedule;
                        ci.Text = current.control_text;
                        ci.xPosition = current.x;
                        ci.yPosition = current.y;
                        ci.SelectedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                        ci.SelectedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                        ci.SuppressedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                        ci.SuppressedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                        ci.editable.remove = current.editable.remove;
                        if(current.groups != null)
                        {
                            for(var g = 0; g < current.groups.length;g++)
                            {
                                var group = current.groups[g];
                                var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                                gs.CustomerID = ci.CustomerID;
                                gs.FolderID = group.FolderID;
                                gs.GroupID = group.GroupID;
                                gs.GroupName = group.GroupName;
                                ci.SelectedGroups.push(gs);
                            }
                        }

                        if(current.groups_filter != null)
                        {
                            for(var g = 0; g< current.groups_filter.length;g++)
                            {
                                var filter = current.groups_filter[g];
                                var fs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                                fs.CustomerID = ci.CustomerID;
                                fs.FilterID = filter.FilterID;
                                fs.FilterName = filter.FilterName;
                                fs.GroupID = filter.GroupID;
                                ci.SelectedGroupFilters.push(fs);
                            }
                        }

                        if(current.suppression_groups != null)
                        {
                            for(var g = 0; g <current.suppression_groups.length;g++)
                            {
                                var supGroup = current.suppression_groups[g];
                                var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                                gs.CustomerID = ci.CustomerID;
                                gs.FolderID = supGroup.FolderID;
                                gs.GroupID = supGroup.GroupID;
                                gs.GroupName = supGroup.GroupName;
                                ci.SuppressedGroups.push(gs);
                            }
                        }

                        if(current.suppression_groups_filter != null)
                        {
                            for (var g = 0; g < current.suppression_groups_filter;g++)
                            {
                                var supFilter = current.suppression_groups_filter[g];
                                var fs =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                                fs.CustomerID = ci.CustomerID;
                                fs.FilterID = supFilter.FilterID;
                                fs.FilterName = supFilter.FilterName;
                                fs.GroupID = supFilter.GroupID;
                                ci.SuppressedGroupFilters.push(fs);
                            }
                        }
                        newModel["CampaignItem"].push(ci);

                        break;
                    case "Group":
                        var group = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Group()));
                        group.ControlID = current.id;
                        group.CustomerID = current.customerid;
                        group.CustomerName = current.customer;
                        group.ECNID = current.groupID;
                        group.ExtraText = "";
                        group.GroupID = current.groupID;
                        group.GroupName = current.group;
                        group.IsDirty = current.isDirty;
                        group.MAControlID = current.MAControlID;
                        group.Text = current.control_text;
                        group.xPosition = current.x;
                        group.yPosition = current.y;
                        group.editable.remove = current.editable.remove;
                        newModel["Group"].push(group);
                        break;
                    case "NoClick":
                        var noClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoClick()));
                        noClick.ControlID = current.id;
                        if(noClick.campaign_itemID && current.campaign_itemID > 0)
                        {
                            noClick.ECNID = current.campaign_itemID;
                        }
                        else{
                            noClick.ECNID = current.ECNID;
                        }
                        if(current.estSendTime)
                        {
                            noClick.EstSendTime = current.estSendTime;
                        }
                        noClick.EmailSubject = current.subject;
                        noClick.ExtraText = "";
                        noClick.FromEmail = current.from_email;
                        noClick.FromName = current.from_name;
                        noClick.IsDirty = current.isDirty;
                        noClick.MAControlID = current.MAControlID;
                        noClick.MessageID = current.messageId;
                        noClick.MessageName = current.message;
                        noClick.ReplyTo = current.reply_to;
                        noClick.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        noClick.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        noClick.CampaignItemTemplateName =current.citemplatename;
                        noClick.BlastField1=current.blastfield1;
                        noClick.BlastField2=current.blastfield2;
                        noClick.BlastField3=current.blastfield3;
                        noClick.BlastField4=current.blastfield4;
                        noClick.BlastField5=current.blastfield5;
                        noClick.Text = current.control_text;
                        noClick.xPosition = current.x;
                        noClick.yPosition = current.y;
                        noClick.CampaignItemName = current.campaign_item_name;
                        noClick.editable.remove = current.editable.remove;
                        newModel["NoClick"].push(noClick);
                        break;
                    case "NoOpen":
                        var noOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoOpen()));
                        noOpen.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            noOpen.ECNID = current.campaign_itemID;
                        }
                        else{
                            noOpen.ECNID = current.ECNID;
                        }

                        if(current.estSendTime)
                        {
                            noOpen.EstSendTime = current.estSendTime;
                        }
                        noOpen.EmailSubject = current.subject;
                        noOpen.ExtraText = "";
                        noOpen.FromEmail = current.from_email;
                        noOpen.FromName = current.from_name;
                        noOpen.IsDirty = current.isDirty;
                        noOpen.MAControlID = current.MAControlID;
                        noOpen.MessageID = current.messageId;
                        noOpen.MessageName = current.message;
                        noOpen.ReplyTo = current.reply_to;
                        noOpen.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        noOpen.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        noOpen.CampaignItemTemplateName =current.citemplatename;
                        noOpen.BlastField1=current.blastfield1;
                        noOpen.BlastField2=current.blastfield2;
                        noOpen.BlastField3=current.blastfield3;
                        noOpen.BlastField4=current.blastfield4;
                        noOpen.BlastField5=current.blastfield5;
                        noOpen.Text = current.control_text;
                        noOpen.xPosition = current.x;
                        noOpen.yPosition = current.y;
                        noOpen.CampaignItemName = current.campaign_item_name;
                        noOpen.editable.remove = current.editable.remove;
                        newModel["NoOpen"].push(noOpen);
                        break;
                    case "Open_NoClick":
                        var Opennoclick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open_NoClick()));
                        Opennoclick.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            Opennoclick.ECNID = current.campaign_itemID;
                        }
                        else{
                            Opennoclick.ECNID = current.ECNID;
                        }
                        if(current.estSendTime)
                        {
                            Opennoclick.EstSendTime = current.estSendTime;
                        }
                        Opennoclick.EmailSubject = current.subject;
                        Opennoclick.ExtraText = "";
                        Opennoclick.FromEmail = current.from_email;
                        Opennoclick.FromName = current.from_name;
                        Opennoclick.IsDirty = current.isDirty;
                        Opennoclick.MAControlID = current.MAControlID;
                        Opennoclick.MessageID = current.messageId;
                        Opennoclick.MessageName = current.message;
                        Opennoclick.ReplyTo = current.reply_to;
                        Opennoclick.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        Opennoclick.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        Opennoclick.CampaignItemTemplateName =current.citemplatename;
                        Opennoclick.BlastField1=current.blastfield1;
                        Opennoclick.BlastField2=current.blastfield2;
                        Opennoclick.BlastField3=current.blastfield3;
                        Opennoclick.BlastField4=current.blastfield4;
                        Opennoclick.BlastField5=current.blastfield5;
                        Opennoclick.Text = current.control_text;
                        Opennoclick.xPosition = current.x;
                        Opennoclick.yPosition = current.y;
                        Opennoclick.CampaignItemName = current.campaign_item_name;
                        Opennoclick.editable.remove = current.editable.remove;
                        newModel["Open_NoClick"].push(Opennoclick);
                        break;
                    case "Sent":
                        var sent =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Sent()));
                        sent.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            sent.ECNID = current.campaign_itemID;
                        }
                        else{
                            sent.ECNID = current.ECNID;
                        }
                        if(current.estSendTime)
                        {
                            sent.EstSendTime = current.estSendTime;
                        }

                        sent.EmailSubject = current.subject;
                        sent.ExtraText = "";
                        sent.FromEmail = current.from_email;
                        sent.FromName = current.from_name;
                        sent.IsDirty = current.isDirty;
                        sent.MAControlID = current.MAControlID;
                        sent.MessageID = current.messageId;
                        sent.MessageName = current.message;
                        sent.ReplyTo = current.reply_to;
                        sent.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        sent.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        sent.CampaignItemTemplateName =current.citemplatename;
                        sent.BlastField1=current.blastfield1;
                        sent.BlastField2=current.blastfield2;
                        sent.BlastField3=current.blastfield3;
                        sent.BlastField4=current.blastfield4;
                        sent.BlastField5=current.blastfield5;
                        sent.Text = current.control_text;
                        sent.xPosition = current.x;
                        sent.yPosition = current.y;
                        sent.CampaignItemName = current.campaign_item_name;
                        sent.editable.remove = current.editable.remove;
                        newModel["Sent"].push(sent);
                        break;
                    case "NotSent":
                        var notSent = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NotSent()));
                        notSent.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            notSent.ECNID = current.campaign_itemID;
                        }
                        else{
                            notSent.ECNID = current.ECNID;
                        }
                        if(current.estSendTime)
                        {
                            notSent.EstSendTime = current.estSendTime;
                        }

                        notSent.EmailSubject = current.subject;
                        notSent.ExtraText = "";
                        notSent.FromEmail = current.from_email;
                        notSent.FromName = current.from_name;
                        notSent.IsDirty = current.isDirty;
                        notSent.MAControlID = current.MAControlID;
                        notSent.MessageID = current.messageId;
                        notSent.MessageName = current.message;
                        notSent.ReplyTo = current.reply_to;
                        notSent.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        notSent.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        notSent.CampaignItemTemplateName =current.citemplatename;
                        notSent.BlastField1=current.blastfield1;
                        notSent.BlastField2=current.blastfield2;
                        notSent.BlastField3=current.blastfield3;
                        notSent.BlastField4=current.blastfield4;
                        notSent.BlastField5=current.blastfield5;
                        notSent.Text = current.control_text;
                        notSent.xPosition = current.x;
                        notSent.yPosition = current.y;
                        notSent.CampaignItemName = current.campaign_item_name;
                        notSent.editable.remove = current.editable.remove;
                        newModel["NotSent"].push(notSent);
                        break;
                    case "Suppressed":
                        var suppressed =  @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Suppressed()));
                        suppressed.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            suppressed.ECNID = current.campaign_itemID;
                        }
                        else{
                            suppressed.ECNID = current.ECNID;
                        }

                        if(current.estSendTime)
                        {
                            suppressed.EstSendTime = current.estSendTime;
                        }

                        suppressed.EmailSubject = current.subject;
                        suppressed.ExtraText = "";
                        suppressed.FromEmail = current.from_email;
                        suppressed.FromName = current.from_name;
                        suppressed.IsDirty = current.isDirty;
                        suppressed.MAControlID = current.MAControlID;
                        suppressed.MessageID = current.messageId;
                        suppressed.MessageName = current.message;
                        suppressed.ReplyTo = current.reply_to;
                        suppressed.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        suppressed.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        suppressed.CampaignItemTemplateName =current.citemplatename;
                        suppressed.BlastField1=current.blastfield1;
                        suppressed.BlastField2=current.blastfield2;
                        suppressed.BlastField3=current.blastfield3;
                        suppressed.BlastField4=current.blastfield4;
                        suppressed.BlastField5=current.blastfield5;
                        suppressed.Text = current.control_text;
                        suppressed.xPosition = current.x;
                        suppressed.yPosition = current.y;
                        suppressed.CampaignItemName = current.campaign_item_name;
                        suppressed.editable.remove = current.editable.remove;
                        newModel["Suppressed"].push(suppressed);
                        break;
                    case "Click":
                        var click = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Click()));
                        click.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            click.ECNID = current.campaign_itemID;
                        }
                        else{
                            click.ECNID = current.ECNID;
                        }

                        if(current.estSendTime)
                        {
                            click.EstSendTime = current.estSendTime;
                        }

                        click.EmailSubject = current.subject;
                        click.ExtraText = "";
                        click.FromEmail = current.from_email;
                        click.FromName = current.from_name;
                        click.IsDirty = current.isDirty;
                        click.MAControlID = current.MAControlID;
                        click.MessageID = current.messageId;
                        click.MessageName = current.message;
                        click.ReplyTo = current.reply_to;
                        click.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        click.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        click.CampaignItemTemplateName =current.citemplatename;
                        click.BlastField1=current.blastfield1;
                        click.BlastField2=current.blastfield2;
                        click.BlastField3=current.blastfield3;
                        click.BlastField4=current.blastfield4;
                        click.BlastField5=current.blastfield5;
                        click.Text = current.control_text;
                        click.xPosition = current.x;
                        click.yPosition = current.y;
                        click.CampaignItemName = current.campaign_item_name;
                        click.editable.remove = current.editable.remove;
                        newModel["Click"].push(click);
                        break;
                    case "Open":
                        var open = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open()));
                        open.ControlID = current.id;
                        if(current.campaign_itemID && current.campaign_itemID > 0)
                        {
                            open.ECNID = current.campaign_itemID;
                        }
                        else{
                            open.ECNID = current.ECNID;
                        }
                        if(current.estSendTime)
                        {
                            open.EstSendTime = current.estSendTime;
                        }
                        open.EmailSubject = current.subject;
                        open.ExtraText = "";
                        open.FromEmail = current.from_email;
                        open.FromName = current.from_name;
                        open.IsDirty = current.isDirty;
                        open.MAControlID = current.MAControlID;
                        open.MessageID = current.messageId;
                        open.MessageName = current.message;
                        open.ReplyTo = current.reply_to;
                        open.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        open.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        open.CampaignItemTemplateName =current.citemplatename;
                        open.BlastField1=current.blastfield1;
                        open.BlastField2=current.blastfield2;
                        open.BlastField3=current.blastfield3;
                        open.BlastField4=current.blastfield4;
                        open.BlastField5=current.blastfield5;
                        open.Text = current.control_text;
                        open.xPosition = current.x;
                        open.yPosition = current.y;
                        open.CampaignItemName = current.campaign_item_name;
                        open.editable.remove = current.editable.remove;
                        newModel["Open"].push(open);
                        break;
                    case "Direct_Open":
                        var directOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Open()));
                        directOpen.ControlID = current.id;
                        directOpen.ECNID = current.campaign_itemID;
                        directOpen.EmailSubject = current.subject;
                        directOpen.ExtraText = "";
                        directOpen.FromEmail = current.from_email;
                        directOpen.FromName = current.from_name;
                        directOpen.IsDirty = current.isDirty;
                        directOpen.MAControlID = current.MAControlID;
                        directOpen.MessageID = current.messageId;
                        directOpen.MessageName = current.message;
                        directOpen.ReplyTo = current.reply_to;
                        directOpen.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        directOpen.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        directOpen.CampaignItemTemplateName =current.citemplatename;
                        directOpen.BlastField1=current.blastfield1;
                        directOpen.BlastField2=current.blastfield2;
                        directOpen.BlastField3=current.blastfield3;
                        directOpen.BlastField4=current.blastfield4;
                        directOpen.BlastField5=current.blastfield5;
                        directOpen.Text = current.control_text;
                        directOpen.xPosition = current.x;
                        directOpen.yPosition = current.y;
                        directOpen.IsCancelled = current.isCancelled;
                        directOpen.CancelDate = current.cancelDate;
                        directOpen.CampaignItemName = current.campaign_item_name;
                        directOpen.editable.remove = current.editable.remove;
                        newModel["Direct_Open"].push(directOpen);
                        break;
                    case "Direct_NoOpen":
                        var directNoOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_NoOpen()));
                        directNoOpen.ControlID = current.id;
                        directNoOpen.ECNID = current.campaign_itemID;
                        directNoOpen.EmailSubject = current.subject;
                        directNoOpen.ExtraText = "";
                        directNoOpen.FromEmail = current.from_email;
                        directNoOpen.FromName = current.from_name;
                        directNoOpen.IsDirty = current.isDirty;
                        directNoOpen.MAControlID = current.MAControlID;
                        directNoOpen.MessageID = current.messageId;
                        directNoOpen.MessageName = current.message;
                        directNoOpen.ReplyTo = current.reply_to;
                        directNoOpen.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        directNoOpen.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        directNoOpen.CampaignItemTemplateName =current.citemplatename;
                        directNoOpen.BlastField1=current.blastfield1;
                        directNoOpen.BlastField2=current.blastfield2;
                        directNoOpen.BlastField3=current.blastfield3;
                        directNoOpen.BlastField4=current.blastfield4;
                        directNoOpen.BlastField5=current.blastfield5;
                        directNoOpen.Text = current.control_text;
                        directNoOpen.xPosition = current.x;
                        directNoOpen.yPosition = current.y;
                        directNoOpen.IsCancelled = current.isCancelled;
                        directNoOpen.CancelDate = current.cancelDate;
                        directNoOpen.CampaignItemName = current.campaign_item_name;
                        directNoOpen.editable.remove = current.editable.remove;
                        newModel["Direct_NoOpen"].push(directNoOpen);
                        break;
                    case "Subscribe":
                        var subscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Subscribe()));
                        subscribe.ControlID = current.id;
                        subscribe.ECNID = current.ECNID;
                        subscribe.EmailSubject = current.subject;
                        subscribe.ExtraText = "";
                        subscribe.FromEmail = current.from_email;
                        subscribe.FromName = current.from_name;
                        subscribe.IsDirty = current.isDirty;
                        subscribe.MAControlID = current.MAControlID;
                        subscribe.MessageID = current.messageId;
                        subscribe.MessageName = current.message;
                        subscribe.ReplyTo = current.reply_to;
                        subscribe.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        subscribe.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        subscribe.CampaignItemTemplateName =current.citemplatename;
                        subscribe.BlastField1=current.blastfield1;
                        subscribe.BlastField2=current.blastfield2;
                        subscribe.BlastField3=current.blastfield3;
                        subscribe.BlastField4=current.blastfield4;
                        subscribe.BlastField5=current.blastfield5;
                        subscribe.Text = current.control_text;
                        subscribe.xPosition = current.x;
                        subscribe.yPosition = current.y;
                        subscribe.IsCancelled = current.isCancelled;
                        subscribe.CancelDate = current.cancelDate;
                        subscribe.CampaignItemName = current.campaign_item_name;
                        subscribe.editable.remove = current.editable.remove;
                        newModel["Subscribe"].push(subscribe);
                        break;
                    case "Unsubscribe":
                        var unSubscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Unsubscribe()));
                        unSubscribe.ControlID = current.id;
                        unSubscribe.ECNID = current.ECNID;
                        unSubscribe.EmailSubject = current.subject;
                        unSubscribe.ExtraText = "";
                        unSubscribe.FromEmail = current.from_email;
                        unSubscribe.FromName = current.from_name;
                        unSubscribe.IsDirty = current.isDirty;
                        unSubscribe.MAControlID = current.MAControlID;
                        unSubscribe.MessageID = current.messageId;
                        unSubscribe.MessageName = current.message;
                        unSubscribe.ReplyTo = current.reply_to;
                        unSubscribe.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        unSubscribe.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        unSubscribe.CampaignItemTemplateName =current.citemplatename;
                        unSubscribe.BlastField1=current.blastfield1;
                        unSubscribe.BlastField2=current.blastfield2;
                        unSubscribe.BlastField3=current.blastfield3;
                        unSubscribe.BlastField4=current.blastfield4;
                        unSubscribe.BlastField5=current.blastfield5;
                        unSubscribe.Text = current.control_text;
                        unSubscribe.xPosition = current.x;
                        unSubscribe.yPosition = current.y;
                        unSubscribe.IsCancelled = current.isCancelled;
                        unSubscribe.CancelDate = current.cancelDate;
                        unSubscribe.CampaignItemName = current.campaign_item_name;
                        unSubscribe.editable.remove = current.editable.remove;
                        newModel["Unsubscribe"].push(unSubscribe);
                        break;
                    case "FormSubmit":
                        var formSubmit = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormSubmit()));
                        formSubmit.ControlID = current.id;
                        formSubmit.ECNID = current.campaign_itemID;
                        formSubmit.EmailSubject = current.subject;
                        formSubmit.ExtraText = "";
                        formSubmit.FromEmail = current.from_email;
                        formSubmit.FromName = current.from_name;
                        formSubmit.IsDirty = current.isDirty;
                        formSubmit.MAControlID = current.MAControlID;
                        formSubmit.MessageID = current.messageId;
                        formSubmit.MessageName = current.message;
                        formSubmit.ReplyTo = current.reply_to;
                        formSubmit.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        formSubmit.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        formSubmit.CampaignItemTemplateName =current.citemplatename;
                        formSubmit.BlastField1=current.blastfield1;
                        formSubmit.BlastField2=current.blastfield2;
                        formSubmit.BlastField3=current.blastfield3;
                        formSubmit.BlastField4=current.blastfield4;
                        formSubmit.BlastField5=current.blastfield5;
                        formSubmit.Text = current.control_text;
                        formSubmit.xPosition = current.x;
                        formSubmit.yPosition = current.y;
                        formSubmit.AnyLink = current.linkRb;
                        formSubmit.SpecificLink = current.link;
                        formSubmit.ActualLink = current.link;
                        formSubmit.IsCancelled = current.isCancelled;
                        formSubmit.CancelDate = current.cancelDate;
                        formSubmit.CampaignItemName = current.campaign_item_name;
                        formSubmit.editable.remove = current.editable.remove;
                        newModel["FormSubmit"].push(formSubmit);
                        break;
                    case "Form":
                        var form = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Form()));
                        form.ControlID = current.id;
                        form.ECNID = current.campaign_itemID;
                        form.ExtraText = "";
                        form.IsDirty = current.isDirty;
                        form.MAControlID = current.MAControlID;
                        form.FormID = current.formId;
                        form.FormName = current.formname;
                        form.Text = current.control_text;
                        form.xPosition = current.x;
                        form.yPosition = current.y;
                        form.AnyLink = current.linkRb;
                        form.SpecificLink = current.link;
                        form.editable.remove = current.editable.remove;
                        newModel["Form"].push(form);
                        break;
                    case "FormAbandon":
                        var formAbandon = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormAbandon()));
                        formAbandon.ControlID = current.id;
                        formAbandon.ECNID = current.campaign_itemID;
                        formAbandon.EmailSubject = current.subject;
                        formAbandon.ExtraText = "";
                        formAbandon.FromEmail = current.from_email;
                        formAbandon.FromName = current.from_name;
                        formAbandon.IsDirty = current.isDirty;
                        formAbandon.MAControlID = current.MAControlID;
                        formAbandon.MessageID = current.messageId;
                        formAbandon.MessageName = current.message;
                        formAbandon.ReplyTo = current.reply_to;
                        formAbandon.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        formAbandon.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        formAbandon.CampaignItemTemplateName =current.citemplatename;
                        formAbandon.BlastField1=current.blastfield1;
                        formAbandon.BlastField2=current.blastfield2;
                        formAbandon.BlastField3=current.blastfield3;
                        formAbandon.BlastField4=current.blastfield4;
                        formAbandon.BlastField5=current.blastfield5;
                        formAbandon.Text = current.control_text;
                        formAbandon.xPosition = current.x;
                        formAbandon.yPosition = current.y;
                        formAbandon.AnyLink = current.linkRb;
                        formAbandon.SpecificLink = current.link;
                        formAbandon.ActualLink = current.link;
                        formAbandon.IsCancelled = current.isCancelled;
                        formAbandon.CancelDate = current.cancelDate;
                        formAbandon.CampaignItemName = current.campaign_item_name;
                        formAbandon.editable.remove = current.editable.remove;
                        newModel["FormAbandon"].push(formAbandon);
                        break;
                    case "Direct_Click":
                        var directClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Click()));
                        directClick.ControlID = current.id;
                        directClick.ECNID = current.campaign_itemID;
                        directClick.EmailSubject = current.subject;
                        directClick.ExtraText = "";
                        directClick.FromEmail = current.from_email;
                        directClick.FromName = current.from_name;
                        directClick.IsDirty = current.isDirty;
                        directClick.MAControlID = current.MAControlID;
                        directClick.MessageID = current.messageId;
                        directClick.MessageName = current.message;
                        directClick.ReplyTo = current.reply_to;
                        directClick.UseCampaignItemTemplate=current.campaign_itemtemplate_value;
                        directClick.CampaignItemTemplateID=current.campaign_itemtemplateID;
                        directClick.CampaignItemTemplateName =current.citemplatename;
                        directClick.BlastField1=current.blastfield1;
                        directClick.BlastField2=current.blastfield2;
                        directClick.BlastField3=current.blastfield3;
                        directClick.BlastField4=current.blastfield4;
                        directClick.BlastField5=current.blastfield5;
                        directClick.Text = current.control_text;
                        directClick.xPosition = current.x;
                        directClick.yPosition = current.y;
                        directClick.AnyLink = current.linkRb;
                        directClick.SpecificLink = current.link;
                        directClick.ActualLink = current.link;
                        directClick.IsCancelled = current.isCancelled;
                        directClick.CancelDate = current.cancelDate;
                        directClick.CampaignItemName = current.campaign_item_name;
                        directClick.editable.remove = current.editable.remove;
                        newModel["Direct_Click"].push(directClick);
                        break;
                    case "Wait":
                        var wait = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Wait()));
                        wait.ControlID = current.id;
                        wait.ECNID = -1;
                        wait.ExtraText = "";
                        wait.IsDirty = current.isDirty;
                        wait.MAControlID = current.MAControlID;
                        wait.Text = current.control_text;
                        wait.Days = parseInt(current.days);
                        wait.Hours = parseInt(current.hours);
                        wait.Minutes = parseInt(current.minutes);

                        wait.WaitTime = new Date(0,0,current.days, current.hours, current.minutes,0);
                        wait.xPosition = current.x;
                        wait.yPosition = current.y;

                        newModel["Wait"].push(wait);
                        break;
                    case "Start":
                        var start = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Start()));
                        start.ControlID = current.id;
                        start.ECNID = -1;
                        start.ExtraText = "";
                        start.IsDirty = current.isDirty;
                        start.MAControlID = current.MAControlID;
                        start.Text = "Start";
                        start.xPosition = current.x;
                        start.yPosition = current.y;
                        newModel["Start"] = start;
                        break;
                    case "End":
                        var end = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.End()));
                        end.ControlID = current.id;
                        end.ECNID = -1;
                        end.ExtraText = "";
                        end.IsDirty = current.isDirty;
                        end.MAControlID = current.MAControlID;
                        end.Text = "End";
                        end.xPosition = current.x;
                        end.yPosition = current.y;
                        newModel["End"].push(end);
                        break;
                }
            }
            return newModel;
        }

        function loadDiagram(diag){

            diagram.load(diag);

            var itemsToLoop = diagram.shapes.length;
            for (var i = 0; i < itemsToLoop; i++) {
                var item = diagram.shapes[i].options;
                var shapeItem = new kendo.dataviz.diagram.Shape(item);
                switch (item.category) {
                    case "CampaignItem":
                        var connIn = diagram.shapes[i].connections("in");
                        for(var j = 0;j < diagram.shapes.length; j++)
                        {
                            var currentShape = diagram.shapes[j].options;
                            if(currentShape.id == connIn.from && currentShape.category != "Start")
                            {
                                diagram.shapes[i].options.subcategory = "Group";
                            }
                        }
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/OrangeBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Campaign_Orange.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbCampaignItem = new kendo.dataviz.diagram.TextBlock({
                            text: "Campaign Item",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbCampaignItem);
                        break;
                    case "Group":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/OrangeBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Group_Orange.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbGroup = new kendo.dataviz.diagram.TextBlock({
                            text: "Group",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbGroup);
                        break;
                    case "Open_NoClick":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbOpen_NoClick = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Open - No Click",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbOpen_NoClick);
                        break;
                    case "Suppressed":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbSuppressed = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Suppressed",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbSuppressed);
                        break;
                    case "Click":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbClick = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Click",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbClick);
                        break;
                    case "Open":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbOpen = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Open",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbOpen);
                        break;
                    case "NoOpen":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbNoOpen = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email No Open",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbNoOpen);
                        break;
                    case "NoClick":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbNoClick = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email No Click",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbNoClick);
                        break;
                    case "Sent":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbSent = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Sent",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbSent);
                        break;
                    case "NotSent":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreyBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/SmartSegment_1.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbNotSent = new kendo.dataviz.diagram.TextBlock({
                            text: "Group Email Not Sent",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbNotSent);
                        break;
                    case "Subscribe":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Subscribe_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbSubsribe = new kendo.dataviz.diagram.TextBlock({
                            text: "Direct Email Subscribe",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbSubsribe);
                        break;
                    case "Unsubscribe":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Unsubscribe_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbUnsub = new kendo.dataviz.diagram.TextBlock({
                            text: "Direct Email Unsubscribe",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbUnsub);
                        break;
                    case "Wait":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/YellowBox.png",
                            x:0,
                            y:0,
                            width:140,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Yellow_Wait.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbWait = new kendo.dataviz.diagram.TextBlock({
                            text: "Wait",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });

                        if(item.time_changed)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Yellow_Wait2.png",
                                x:125,
                                y:5,
                                width:30,
                                height:30,
                                tempID:"WaitEX"
                            }));
                        }

                        diagram.shapes[i].visual.append(tbWait);
                        break;
                    case "Form":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/OrangeBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Form_Orange.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbform = new kendo.dataviz.diagram.TextBlock({
                            text: "Form",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbform);
                        break;

                    case "FormAbandon":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/FormAbandon_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbformAbond = new kendo.dataviz.diagram.TextBlock({
                            text: "Form Abandon",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbformAbond);
                        break;
                    case "FormSubmit":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/FormSubmission_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbformSub = new kendo.dataviz.diagram.TextBlock({
                            text: "Form Submit",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbformSub);
                        break;
                    case "Direct_Click":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/DirectClick_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbDClick = new kendo.dataviz.diagram.TextBlock({
                            text: "Direct Email Click",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbDClick);
                        break;
                    case "Direct_Open":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/DirectOpen_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbDOpen = new kendo.dataviz.diagram.TextBlock({
                            text: "Direct Email Open",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbDOpen);
                        break;
                    case "Direct_NoOpen":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/BlueBox.png",
                            x:0,
                            y:0,
                            width:200,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/DirectNoOpen_Blue.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbDNoOpen = new kendo.dataviz.diagram.TextBlock({
                            text: "Direct Email No Open",
                            x: 15,
                            y: 5,
                            color: "#000000",
                            fontSize:12,
                            fontWeight:600
                        });
                        if(item.isCancelled)
                        {
                            diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                                source: "../../Images/Red_Cancel.png",
                                x:175,
                                y:5,
                                width:30,
                                height:30,
                            }));
                        }
                        diagram.shapes[i].visual.append(tbDNoOpen);
                        break;
                    case "Start":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/GreenBox.png",
                            x:0,
                            y:0,
                            width:140,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Green_Start.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbStart = new kendo.dataviz.diagram.TextBlock({
                            text: "Start",
                            x: 15,
                            y: 5,
                            color: "#000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbStart);
                        break;
                    case "End":
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/RedBox.png",
                            x:0,
                            y:0,
                            width:140,
                            height:40
                        }));
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/Red_End.png",
                            x:-15,
                            y:5,
                            width:30,
                            height:30
                        }));
                        var tbEnd = new kendo.dataviz.diagram.TextBlock({
                            text: "End",
                            x: 15,
                            y: 5,
                            color: "#000",
                            fontSize:12,
                            fontWeight:600
                        });
                        diagram.shapes[i].visual.append(tbEnd);
                        break;
                    default:
                        diagram.shapes[i].visual.append(new kendo.dataviz.diagram.Image({
                            source: "../../Images/shapeBck.png",
                            x: 0,
                            y: 0,
                            width: 150,
                            height: 40
                        }));
                        break;
                }


                if(diagram.shapes[i].options.category != "Start" && diagram.shapes[i].options.category != "End")
                {
                    tb = new kendo.dataviz.diagram.TextBlock({
                        text: diagram.shapes[i].options.control_text,
                        x: 15,
                        y: 20,
                        color: "#000000",
                        fontSize:12
                    });
                    diagram.shapes[i].visual.append(tb);
                }
                //diagram.shapes[i] = shapeItem;
            }
            diagram.save();
        }
        function getGrpEmailChild(shape)
        {
            var traceShape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (shape.id == diagram.connections[i].from.id) {
                        traceShape = diagram.connections[i].to.options;
                        if((traceShape.category == "NoOpen") || (traceShape.category == "Open_NoClick") || (traceShape.category == "Sent")||(traceShape.category == "NotSent") || (traceShape.category == "Suppressed")|| (traceShape.category == "Click")|| (traceShape.category == "Open") || (traceShape.category == "NoClick"))
                        {
                            tracer = false;
                            break;
                        }
                    }
                }
                tracer = false;
            }
            return traceShape;
        }

        function getParentCIGE(shape)
        {
            var catArray = new Array();
            catArray.push('CampaignItem');
            catArray.push('NoOpen');
            catArray.push('Open_NoClick');
            catArray.push('NotSent');
            catArray.push('Suppressed');
            catArray.push('Click');
            catArray.push('Open');
            catArray.push('NoClick');
            catArray.push('Sent');
            catArray.push('Subscribe');
            catArray.push('Unsubscribe');
            catArray.push('Group');

            var traceShape = shape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (traceShape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        if(catArray.indexOf(traceShape.category) >= 0)
                        {
                            tracer = false;
                            break;
                        }
                    }
                }
            }
            return traceShape;
        }
        function GetParentCI(shape)
        {
            var ci = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.CampaignItem()));
            var traceShape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (shape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        ci.CampaignID = traceShape.campaign_item_nameID;
                        ci.CampaignItemID = traceShape.campaign_itemID;
                        ci.CampaignItemName = traceShape.campaign_item_name;
                        ci.CampaignName = traceShape.campaign_name;
                        ci.ControlID = traceShape.id;
                        ci.CustomerID = traceShape.customerid;
                        ci.CustomerName = traceShape.customer;
                        ci.ECNID = traceShape.CampaignItemID;
                        ci.EmailSubject = traceShape.subject;
                        ci.ExtraText = "";
                        ci.FromEmail = traceShape.from_email;
                        ci.FromName = traceShape.from_name;
                        ci.IsDirty = traceShape.isDirty;
                        ci.MAControlID = traceShape.MAControlID;
                        ci.MessageID = traceShape.messageId;
                        ci.MessageName = traceShape.message;
                        ci.ReplyTo = traceShape.reply_to;
                        ci.CreateCampaignItem = traceShape.campaign_item_value;
                        ci.UseCampaignItemTemplate=traceShape.campaign_itemtemplate_value;
                        ci.CampaignItemTemplateID=traceShape.citemplateID;
                        ci.BlastField1=traceShape.blastfield1;
                        ci.BlastField2=traceShape.blastfield2;
                        ci.BlastField3=traceShape.blastfield3;
                        ci.BlastField4=traceShape.blastfield4;
                        ci.BlastField5=traceShape.blastfield5;
                        ci.SendTime = traceShape.schedule;
                        ci.Text = traceShape.control_text;
                        ci.xPosition = traceShape.x;
                        ci.yPosition = traceShape.y;
                        ci.SelectedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                        ci.SelectedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                        ci.SuppressedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                        ci.SuppressedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                        for(var g = 0; g < traceShape.groups.length;g++)
                        {
                            var group = traceShape.groups[g];
                            var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                            gs.CustomerID = ci.CustomerID;
                            gs.FolderID = group.FolderID;
                            gs.GroupID = group.GroupID;
                            gs.GroupName = group.GroupName;
                            ci.SelectedGroups.push(gs);
                        }

                        for(var g = 0; g< traceShape.groups_filter.length;g++)
                        {
                            var filter = traceShape.groups_filter[g];
                            var fs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                            fs.CustomerID = ci.CustomerID;
                            fs.FilterID = filter.FilterID;
                            fs.FilterName = filter.FilterName;
                            fs.GroupID = filter.GroupID;
                            ci.SelectedGroupFilters.push(fs);
                        }

                        for(var g = 0; g <traceShape.suppression_groups.length;g++)
                        {
                            var supGroup = traceShape.suppression_groups[g];
                            var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                            gs.CustomerID = ci.CustomerID;
                            gs.FolderID = supGroup.FolderID;
                            gs.GroupID = supGroup.GroupID;
                            gs.GroupName = supGroup.GroupName;
                            ci.SuppressedGroups.push(gs);
                        }

                        for (var g = 0; g < traceShape.suppression_groups_filter;g++)
                        {
                            var supFilter = traceShape.suppression_groups_filter[g];
                            var fs =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                            fs.CustomerID = ci.CustomerID;
                            fs.FilterID = supFilter.FilterID;
                            fs.FilterName = supFilter.FilterName;
                            fs.GroupID = supFilter.GroupID;
                            ci.SuppressedGroupFilters.push(fs);
                        }


                        tracer = false;
                        break;
                    }
                }
            }
            return ci;
        }

        function GetParentGroup(shape)
        {
            var group = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Group()));
            var traceShape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (shape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        group.ControlID = traceShape.id;
                        group.CustomerID = traceShape.customerid;
                        group.CustomerName = traceShape.customer;
                        group.ECNID = traceShape.groupID;
                        group.ExtraText = "";
                        group.GroupID = traceShape.groupID;
                        group.GroupName = traceShape.group;
                        group.IsDirty = traceShape.isDirty;
                        group.MAControlID = traceShape.MAControlID;
                        group.Text = traceShape.control_text;
                        group.xPosition = traceShape.x;
                        group.yPosition = traceShape.y;
                        tracer = false;
                        break;
                    }
                }
            }
            return group;
        }

        function replaceControl(type,automation, shape)
        {
            switch(type)
            {
                case "CampaignItem":
                    for(var i in automation["CampaignItem"])
                    {
                        if(automation["CampaignItem"][i].ControlID == shape.ControlID)
                        {
                            automation["CampaignItem"][i] = shape;
                        }
                    }
                    break;
                case "Group":
                    for(var i in automation["Group"])
                    {
                        if(automation["Group"][i].ControlID == shape.ControlID)
                        {
                            automation["Group"][i] = shape;
                        }
                    }
                    break;
                case "NoClick":
                    for(var i in automation["NoClick"])
                    {
                        if(automation["NoClick"][i].ControlID == shape.ControlID)
                        {
                            automation["NoClick"][i] = shape;
                        }
                    }
                    break;
                case "NoOpen":
                    for(var i in automation["NoOpen"])
                    {
                        if(automation["NoOpen"][i].ControlID == shape.ControlID)
                        {
                            automation["NoOpen"][i] = shape;
                        }
                    }
                    break;
                case "Open_NoClick":
                    for(var i in automation["Open_NoClick"])
                    {
                        if(automation["Open_NoClick"][i].ControlID == shape.ControlID)
                        {
                            automation["Open_NoClick"][i] = shape;
                        }
                    }
                    break;
                case "Sent":
                    for(var i in automation["Sent"])
                    {
                        if(automation["Sent"][i].ControlID == shape.ControlID)
                        {
                            automation["Sent"][i] = shape;
                        }
                    }
                    break;
                case "NotSent":
                    for(var i in automation["NotSent"])
                    {
                        if(automation["NotSent"][i].ControlID == shape.ControlID)
                        {
                            automation["NotSent"][i] = shape;
                        }
                    }
                    break;
                case "Suppressed":
                    for(var i in automation["Suppressed"])
                    {
                        if(automation["Suppressed"][i].ControlID == shape.ControlID)
                        {
                            automation["Suppressed"][i] = shape;
                        }
                    }
                    break;
                case "Click":
                    for(var i in automation["Click"])
                    {
                        if(automation["Click"][i].ControlID == shape.ControlID)
                        {
                            automation["Click"][i] = shape;
                        }
                    }
                    break;
                case "Open":
                    for(var i in automation["Open"])
                    {
                        if(automation["Open"][i].ControlID == shape.ControlID)
                        {
                            automation["Open"][i] = shape;
                        }
                    }
                    break;
                case "Direct_Open":
                    for(var i in automation["Direct_Open"])
                    {
                        if(automation["Direct_Open"][i].ControlID == shape.ControlID)
                        {
                            automation["Direct_Open"][i] = shape;
                        }
                    }
                    break;
                case "Direct_NoOpen":
                    for(var i in automation["Direct_NoOpen"])
                    {
                        if(automation["Direct_NoOpen"][i].ControlID == shape.ControlID)
                        {
                            automation["Direct_NoOpen"][i] = shape;
                        }
                    }
                    break;
                case "Subscribe":
                    for(var i in automation["Subscribe"])
                    {
                        if(automation["Subscribe"][i].ControlID == shape.ControlID)
                        {
                            automation["Subscribe"][i] = shape;
                        }
                    }
                    break;
                case "Unsubscribe":
                    for(var i in automation["Unsubscribe"])
                    {
                        if(automation["Unsubscribe"][i].ControlID == shape.ControlID)
                        {
                            automation["Unsubscribe"][i] = shape;
                        }
                    }
                    break;
                case "Direct_Click":
                    for(var i in automation["Direct_Click"])
                    {
                        if(automation["Direct_Click"][i].ControlID == shape.ControlID)
                        {
                            automation["Direct_Click"][i] = shape;
                        }
                    }

                    break;
                case "FormSubmit":
                    for(var i in automation["FormSubmit"])
                    {
                        if(automation["FormSubmit"][i].ControlID == shape.ControlID)
                        {
                            automation["FormSubmit"][i] = shape;
                        }
                    }

                    break;
                case "FormAbandon":
                    for(var i in automation["FormAbandon"])
                    {
                        if(automation["FormAbandon"][i].ControlID == shape.ControlID)
                        {
                            automation["FormAbandon"][i] = shape;
                        }
                    }

                    break;
                case "Form":
                    for(var i in automation["Form"])
                    {
                        if(automation["Form"][i].ControlID == shape.ControlID)
                        {
                            automation["Form"][i] = shape;
                        }
                    }

                    break;
                case "Wait":
                    for(var i in automation["Wait"])
                    {
                        if(automation["Wait"][i].ControlID == shape.ControlID)
                        {
                            automation["Wait"][i] = shape;
                        }
                    }
                    break;
            }
            return automation;
        }

        function ValidateShape(shape, parent)
        {
            var automation = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.MarketingAutomationPostModel()));
            automation.MarketingAutomationID = @Model.MarketingAutomationID;
            automation.Name = '@Model.Name';
            automation.CreatedDate = '@Model.CreatedDate';
            automation.CreatedUserID = @Model.CreatedUserID;
            automation.EndDate = '@Model.EndDate';
            automation.Goal = '@HttpUtility.JavaScriptStringEncode(Model.Goal)';
            automation.IsDeleted = '@Model.IsDeleted';
            automation.StartDate = '@Model.StartDate';
            automation.State = '@Model.State';
            automation.UpdatedDate = '@Model.UpdatedDate';
            automation.UpdatedUserID = @Model.UpdatedUserID;
            automation.Diagram = JSON.stringify(diagram.save());
            automation.JSONDiagram = automation.Diagram;
            automation = getDiagramObjects(automation,diagram.shapes);
            automation = getDiagramConnectors(automation, diagram.connections);

            returnObj = {
                success:true,
                errorMessage:""
            };
            switch(shape.category)
            {
                case "CampaignItem":
                    var ci = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.CampaignItem()));
                    ci.Text = $("#campaignItem_controlName").val();
                    ci.CustomerID = $("#campaignItem_customerID").val();
                    ci.CustomerName = $("#campaignItem_customerName").text();
                    ci.CampaignItemID = $("#campaignItemID").val();
                    ci.ECNID = shape.ECNID;
                    ci.CampaignItemTemplateID=$("#citemplateID").val();
                    if($('input:radio[name=rbl_citemplate_selected]')[1].checked)
                        ci.UseCampaignItemTemplate =false;
                    else
                        ci.UseCampaignItemTemplate =true;
                    if(parent.category == "Start")
                        ci.SubCategory = "Start";
                    else
                        ci.SubCategory = "Group";
                    ci.ControlID = shape.id;
                    if($('input:radio[name=rbl_campaign_item_selected]:checked').val() > 0)
                    {
                        ci.CreateCampaignItem = true;
                        if(ci.SubCategory == "Group")
                        {
                            ci.SendTime = $("#campaign_estimatedSendTime").text();
                        }
                        else
                        {
                            ci.SendTime = $("#cam13").val();
                        }
                        var systemtz = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        if (systemtz != 'America/Chicago')
                        {
                            var GMTdt = new Date($("#cam13").val());
                            var csttime = moment(GMTdt).tz('America/Chicago');
                            var scheduleDate = new Date(csttime);
                            var AMPM = "AM";
                            var adjustedHours = scheduleDate.getHours();
                            if (adjustedHours > 12) {
                                AMPM = "PM";
                                adjustedHours = adjustedHours - 12;
                            }
                            else if (adjustedHours == 12) 
                            { 
                                AMPM = "PM"; 
                                adjustedHours = adjustedHours 
                            }
                            else if (adjustedHours == 0) 
                            { 
                                adjustedHours = 12; 
                            }                            
                        }
                        ci.MessageName = $("#messageName").text();
                        ci.MessageID = $("#messageID").val();
                        ci.FromEmail = $("#cam09").val();
                        ci.ReplyTo = $("#cam10").val();
                        ci.FromName = $("#cam11").val();
                        ci.EmailSubject = $("#cam12").val();
                        var bfv1 = $("#blastfieldvalue1").data("kendoDropDownList");
                        var bfv2 = $("#blastfieldvalue2").data("kendoDropDownList");
                        var bfv3 = $("#blastfieldvalue3").data("kendoDropDownList");
                        var bfv4 = $("#blastfieldvalue4").data("kendoDropDownList");
                        var bfv5 = $("#blastfieldvalue5").data("kendoDropDownList");
                        ci.BlastField1 = $("#cam14").val();
                        ci.BlastField2 = $("#cam15").val();
                        ci.BlastField3 = $("#cam16").val();
                        ci.BlastField4 = $("#cam17").val();
                        ci.BlastField5 = $("#cam18").val();
                        if((bfv1.text()!=null) && (bfv1.text() !="Custom Value"))
                        {

                            ci.BlastField1 =bfv1.text();
                        }
                        if((bfv2.text()!=null) && (bfv2.text() !="Custom Value"))
                        {
                            ci.BlastField2 =bfv2.text();

                        }
                        if((bfv3.text()!=null) && (bfv3.text() !="Custom Value"))
                        {
                            ci.BlastField3 =bfv3.text();
                        }
                        if((bfv4.text()!=null) && (bfv4.text() !="Custom Value"))
                        {
                            ci.BlastField4 =bfv4.text();
                        }
                        if((bfv5.text()!=null) && (bfv5.text() !="Custom Value"))
                        {
                            ci.BlastField5 =bfv5.text();
                        }
                        if($('input:radio[name=rbl_campaign_item_selected]')[0].checked)
                        {
                            ci.CampaignItemName= $("#campaignItemName").text();
                        }
                        else
                        {
                            ci.CampaignItemName = $("#campaignItem_NewCampaignItemName").val();
                        }

                        if($("#campaignID").val().length == 0){
                            ci.CampaignID = -1;
                        }
                        else {
                            ci.CampaignID = $("#campaignID").val();
                        }

                        if($('input:radio[name=rbl_campaign_selected]')[0].checked)
                            ci.CampaignName = $("#campaignName").text();
                        else
                        {
                            ci.CampaignName = $("#campaign_NewCampaignName").val();
                            ci.CreateCampaign =true;
                        }
                        ci.SelectedGroups = new Array();
                        ci.SelectedGroupFilters = new Array();
                        ci.SuppressedGroups = new Array();
                        ci.SuppressedGroupFilters = new Array();

                        if(Campaign_SelectedGroups != null)
                        {
                            for(var g = 0; g < Campaign_SelectedGroups.length;g++)
                            {
                                var group = Campaign_SelectedGroups[g];
                                var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                                gs.CustomerID = ci.CustomerID;
                                gs.FolderID = group.FolderID;
                                gs.GroupID = group.GroupID;
                                gs.GroupName = group.GroupName;
                                ci.SelectedGroups.push(gs);
                            }
                        }

                        if(Campaign_SelectedGroupFilters != null)
                        {
                            for(var g = 0; g< Campaign_SelectedGroupFilters.length;g++)
                            {
                                var filter = Campaign_SelectedGroupFilters[g];
                                var fs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                                fs.CustomerID = ci.CustomerID;
                                fs.FilterID = filter.FilterID;
                                fs.FilterName = filter.FilterName;
                                fs.GroupID = filter.GroupID;
                                ci.SelectedGroupFilters.push(fs);
                            }
                        }

                        if(Campaign_SelectedSuppressionGroups != null)
                        {
                            for(var g = 0; g < Campaign_SelectedSuppressionGroups.length;g++)
                            {
                                var supGroup = Campaign_SelectedSuppressionGroups[g];
                                var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                                gs.CustomerID = ci.CustomerID;
                                gs.FolderID = supGroup.FolderID;
                                gs.GroupID = supGroup.GroupID;
                                gs.GroupName = supGroup.GroupName;
                                ci.SuppressedGroups.push(gs);
                            }
                        }

                        if(Campaign_SelectedSuppressionGroupFilters != null)
                        {
                            for (var g = 0; g < Campaign_SelectedSuppressionGroupFilters.length;g++)
                            {
                                var supFilter = Campaign_SelectedSuppressionGroupFilters[g];
                                var fs =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                                fs.CustomerID = ci.CustomerID;
                                fs.FilterID = supFilter.FilterID;
                                fs.FilterName = supFilter.FilterName;
                                fs.GroupID = supFilter.GroupID;
                                ci.SuppressedGroupFilters.push(fs);
                            }
                        }
                    }
                    else
                    {
                        ci.CreateCampaignItem = false;
                        ci.ECNID = $("#campaignItemID").val();
                        ci.CampaignItemName = $("#campaignItemName").text();
                        ci.MessageID = $("#messageID").val();
                        ci.MessageName = $("#messageName").text();
                        ci.SendTime =$("#scheduledTime").text();
                    }

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateCampaignItem","Home")',
                        data: JSON.stringify(ci),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Group":
                    var group = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Group()));
                    group.CustomerID = $("#_Group_customerID").val();
                    group.CustomerName = $("#_Group_customerName").text();
                    group.GroupName = $("#_Group_groupName").text();
                    group.GroupID = $("#_Group_groupID").val();
                    group.Text = $("#gro01").val();
                    group.ControlID = shape.id;
                    group.ECNID = shape.ECNID;
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroup", "Home")',
                        data: JSON.stringify(group),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "NoClick":
                    var noClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoClick()));
                    noClick.Text = $("#eco01").val();
                    noClick.MessageName = $("#EmailCtrl_messageName").text();
                    noClick.MessageID = $("#EmailCtrl_messageID").val();
                    noClick.FromEmail = $("#eco04").val();
                    noClick.ReplyTo = $("#eco05").val();
                    noClick.FromName = $("#eco06").val();
                    noClick.EmailSubject = $("#eco07").val();
                    noClick.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        noClick.UseCampaignItemTemplate =false;
                    else
                        noClick.UseCampaignItemTemplate =true;
                    noClick.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    noClick.BlastField1=$("#eco08").val();
                    noClick.BlastField2=$("#eco09").val();
                    noClick.BlastField3=$("#eco10").val();
                    noClick.BlastField4=$("#eco11").val();
                    noClick.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        noClick.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        noClick.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        noClick.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        noClick.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        noClick.BlastField5 =ebfv5.text();
                    }
                    noClick.ControlID = shape.id;
                    noClick.ECNID = shape.ECNID;
                    noClick.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    noClick.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("NoClick",automation, noClick);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: noClick.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });

                    break;
                case "NoOpen":
                    var noOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoOpen()));
                    noOpen.Text = $("#eco01").val();
                    noOpen.MessageName = $("#EmailCtrl_messageName").text();
                    noOpen.MessageID = $("#EmailCtrl_messageID").val();
                    noOpen.FromEmail = $("#eco04").val();
                    noOpen.ReplyTo = $("#eco05").val();
                    noOpen.FromName = $("#eco06").val();
                    noOpen.EmailSubject = $("#eco07").val();
                    noOpen.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        noOpen.UseCampaignItemTemplate =false;
                    else
                        noOpen.UseCampaignItemTemplate =true;
                    noOpen.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    noOpen.BlastField1=$("#eco08").val();
                    noOpen.BlastField2=$("#eco09").val();
                    noOpen.BlastField3=$("#eco10").val();
                    noOpen.BlastField4=$("#eco11").val();
                    noOpen.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        noOpen.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        noOpen.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        noOpen.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        noOpen.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        noOpen.BlastField5 =ebfv5.text();
                    }
                    noOpen.ControlID = shape.id;
                    noOpen.ECNID = shape.ECNID;
                    noOpen.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    noOpen.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("NoOpen",automation, noOpen);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: noOpen.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Open_NoClick":
                    var open_NoCLick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open_NoClick()));
                    open_NoCLick.Text = $("#eco01").val();
                    open_NoCLick.MessageName = $("#EmailCtrl_messageName").text();
                    open_NoCLick.MessageID = $("#EmailCtrl_messageID").val();
                    open_NoCLick.FromEmail = $("#eco04").val();
                    open_NoCLick.ReplyTo = $("#eco05").val();
                    open_NoCLick.FromName = $("#eco06").val();
                    open_NoCLick.EmailSubject = $("#eco07").val();
                    open_NoCLick.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        open_NoCLick.UseCampaignItemTemplate =false;
                    else
                        open_NoCLick.UseCampaignItemTemplate =true;
                    open_NoCLick.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    open_NoCLick.BlastField1=$("#eco08").val();
                    open_NoCLick.BlastField2=$("#eco09").val();
                    open_NoCLick.BlastField3=$("#eco10").val();
                    open_NoCLick.BlastField4=$("#eco11").val();
                    open_NoCLick.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        open_NoCLick.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        open_NoCLick.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        open_NoCLick.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        open_NoCLick.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        open_NoCLick.BlastField5 =ebfv5.text();
                    }
                    open_NoCLick.ControlID = shape.id;
                    open_NoCLick.ECNID = shape.ECNID;
                    open_NoCLick.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    open_NoCLick.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("Open_NoClick",automation, open_NoCLick);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: open_NoCLick.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Sent":
                    var sent = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Sent()));
                    sent.Text = $("#eco01").val();
                    sent.MessageName = $("#EmailCtrl_messageName").text();
                    sent.MessageID = $("#EmailCtrl_messageID").val();
                    sent.FromEmail = $("#eco04").val();
                    sent.ReplyTo = $("#eco05").val();
                    sent.FromName = $("#eco06").val();
                    sent.EmailSubject = $("#eco07").val();
                    sent.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        sent.UseCampaignItemTemplate =false;
                    else
                        sent.UseCampaignItemTemplate =true;
                    sent.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    sent.BlastField1=$("#eco08").val();
                    sent.BlastField2=$("#eco09").val();
                    sent.BlastField3=$("#eco10").val();
                    sent.BlastField4=$("#eco11").val();
                    sent.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        sent.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        sent.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        sent.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        sent.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        sent.BlastField5 =ebfv5.text();
                    }
                    sent.ControlID = shape.id;
                    sent.ECNID = shape.ECNID;
                    sent.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    sent.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("Sent",automation, sent);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: sent.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "NotSent":
                    var notSent = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NotSent()));
                    notSent.Text = $("#eco01").val();
                    notSent.MessageName = $("#EmailCtrl_messageName").text();
                    notSent.MessageID = $("#EmailCtrl_messageID").val();
                    notSent.FromEmail = $("#eco04").val();
                    notSent.ReplyTo = $("#eco05").val();
                    notSent.FromName = $("#eco06").val();
                    notSent.EmailSubject = $("#eco07").val();
                    notSent.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        notSent.UseCampaignItemTemplate =false;
                    else
                        notSent.UseCampaignItemTemplate =true;
                    notSent.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    notSent.BlastField1=$("#eco08").val();
                    notSent.BlastField2=$("#eco09").val();
                    notSent.BlastField3=$("#eco10").val();
                    notSent.BlastField4=$("#eco11").val();
                    notSent.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        notSent.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        notSent.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        notSent.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        notSent.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        notSent.BlastField5 =ebfv5.text();
                    }
                    notSent.ControlID = shape.id;
                    notSent.ECNID = shape.ECNID;
                    notSent.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    notSent.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("NotSent",automation, notSent);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: notSent.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Suppressed":
                    var suppressed = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Suppressed()));
                    suppressed.Text = $("#eco01").val();
                    suppressed.MessageName = $("#EmailCtrl_messageName").text();
                    suppressed.MessageID = $("#EmailCtrl_messageID").val();
                    suppressed.FromEmail = $("#eco04").val();
                    suppressed.ReplyTo = $("#eco05").val();
                    suppressed.FromName = $("#eco06").val();
                    suppressed.EmailSubject = $("#eco07").val();
                    suppressed.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        suppressed.UseCampaignItemTemplate =false;
                    else
                        suppressed.UseCampaignItemTemplate =true;
                    suppressed.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    suppressed.BlastField1=$("#eco08").val();
                    suppressed.BlastField2=$("#eco09").val();
                    suppressed.BlastField3=$("#eco10").val();
                    suppressed.BlastField4=$("#eco11").val();
                    suppressed.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        suppressed.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        suppressed.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        suppressed.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        suppressed.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        suppressed.BlastField5 =ebfv5.text();
                    }
                    suppressed.ControlID = shape.id;
                    suppressed.ECNID = shape.ECNID;
                    suppressed.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    suppressed.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("Suppressed",automation, suppressed);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: suppressed.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Click":
                    var click = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Click()));
                    click.Text = $("#eco01").val();
                    click.MessageName = $("#EmailCtrl_messageName").text();
                    click.MessageID = $("#EmailCtrl_messageID").val();
                    click.FromEmail = $("#eco04").val();
                    click.ReplyTo = $("#eco05").val();
                    click.FromName = $("#eco06").val();
                    click.EmailSubject = $("#eco07").val();
                    click.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        click.UseCampaignItemTemplate =false;
                    else
                        click.UseCampaignItemTemplate =true;
                    click.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    click.BlastField1=$("#eco08").val();
                    click.BlastField2=$("#eco09").val();
                    click.BlastField3=$("#eco10").val();
                    click.BlastField4=$("#eco11").val();
                    click.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        click.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        click.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        click.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        click.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        click.BlastField5 =ebfv5.text();
                    }
                    click.ControlID = shape.id;
                    click.ECNID = shape.ECNID;
                    click.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    click.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("Click",automation, click);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: click.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Open":
                    var open = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open()));
                    open.Text = $("#eco01").val();
                    open.MessageName = $("#EmailCtrl_messageName").text();
                    open.MessageID = $("#EmailCtrl_messageID").val();
                    open.FromEmail = $("#eco04").val();
                    open.ReplyTo = $("#eco05").val();
                    open.FromName = $("#eco06").val();
                    open.EmailSubject = $("#eco07").val();
                    open.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        open.UseCampaignItemTemplate =false;
                    else
                        open.UseCampaignItemTemplate =true;
                    open.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    open.BlastField1=$("#eco08").val();
                    open.BlastField2=$("#eco09").val();
                    open.BlastField3=$("#eco10").val();
                    open.BlastField4=$("#eco11").val();
                    open.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        open.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        open.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        open.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        open.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        open.BlastField5 =ebfv5.text();
                    }
                    open.ControlID = shape.id;
                    open.ECNID = shape.ECNID;
                    open.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    open.EstSendTime=$("#emailcontrol_estSendTime").val();
                    automation = replaceControl("Open",automation, open);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupEmail", "Home")',
                        data: JSON.stringify({automation: automation, wait:BuildParent(parent),controlID: open.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Direct_Open":
                    var dOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Open()));
                    dOpen.Text = $("#eco01").val();
                    dOpen.MessageName = $("#EmailCtrl_messageName").text();
                    dOpen.MessageID = $("#EmailCtrl_messageID").val();
                    dOpen.FromEmail = $("#eco04").val();
                    dOpen.ReplyTo = $("#eco05").val();
                    dOpen.FromName = $("#eco06").val();
                    dOpen.EmailSubject = $("#eco07").val();
                    dOpen.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        dOpen.UseCampaignItemTemplate =false;
                    else
                        dOpen.UseCampaignItemTemplate =true;
                    dOpen.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    dOpen.BlastField1=$("#eco08").val();
                    dOpen.BlastField2=$("#eco09").val();
                    dOpen.BlastField3=$("#eco10").val();
                    dOpen.BlastField4=$("#eco11").val();
                    dOpen.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        dOpen.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        dOpen.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        dOpen.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        dOpen.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        dOpen.BlastField5 =ebfv5.text();
                    }
                    dOpen.ControlID = shape.id;
                    dOpen.ECNID = shape.ECNID;
                    dOpen.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    automation = replaceControl("Direct_Open",automation, dOpen);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateDirectEmail", "Home")',
                        data: JSON.stringify({automation:automation, wait:BuildParent(parent),controlID:dOpen.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Direct_NoOpen":
                    var dNoOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_NoOpen()));
                    dNoOpen.Text = $("#eco01").val();
                    dNoOpen.MessageName = $("#EmailCtrl_messageName").text();
                    dNoOpen.MessageID = $("#EmailCtrl_messageID").val();
                    dNoOpen.FromEmail = $("#eco04").val();
                    dNoOpen.ReplyTo = $("#eco05").val();
                    dNoOpen.FromName = $("#eco06").val();
                    dNoOpen.EmailSubject = $("#eco07").val();
                    dNoOpen.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        dNoOpen.UseCampaignItemTemplate =false;
                    else
                        dNoOpen.UseCampaignItemTemplate =true;
                    dNoOpen.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    dNoOpen.BlastField1=$("#eco08").val();
                    dNoOpen.BlastField2=$("#eco09").val();
                    dNoOpen.BlastField3=$("#eco10").val();
                    dNoOpen.BlastField4=$("#eco11").val();
                    dNoOpen.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        dNoOpen.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        dNoOpen.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        dNoOpen.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        dNoOpen.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        dNoOpen.BlastField5 =ebfv5.text();
                    }
                    dNoOpen.ControlID = shape.id;
                    dNoOpen.ECNID = shape.ECNID;
                    dNoOpen.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    automation = replaceControl("Direct_NoOpen",automation, dNoOpen);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateDirectEmail", "Home")',
                        data: JSON.stringify({automation:automation, wait:BuildParent(parent),controlID:dNoOpen.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Subscribe":
                    var subscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Subscribe()));
                    subscribe.Text = $("#eco01").val();
                    subscribe.MessageName = $("#EmailCtrl_messageName").text();
                    subscribe.MessageID = $("#EmailCtrl_messageID").val();
                    subscribe.FromEmail = $("#eco04").val();
                    subscribe.ReplyTo = $("#eco05").val();
                    subscribe.FromName = $("#eco06").val();
                    subscribe.EmailSubject = $("#eco07").val();
                    subscribe.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        subscribe.UseCampaignItemTemplate =false;
                    else
                        subscribe.UseCampaignItemTemplate =true;
                    subscribe.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    subscribe.BlastField1=$("#eco08").val();
                    subscribe.BlastField2=$("#eco09").val();
                    subscribe.BlastField3=$("#eco10").val();
                    subscribe.BlastField4=$("#eco11").val();
                    subscribe.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        subscribe.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        subscribe.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        subscribe.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        subscribe.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        subscribe.BlastField5 =ebfv5.text();
                    }
                    subscribe.ControlID = shape.id;
                    subscribe.ECNID = shape.ECNID;
                    subscribe.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    automation = replaceControl("Subscribe",automation, subscribe);
                    parent = BuildParent(parent);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupTrigger", "Home")',
                        data: JSON.stringify({automation:automation, wait:parent,controlID:subscribe.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Unsubscribe":
                    var unSubscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Unsubscribe()));
                    unSubscribe.Text = $("#eco01").val();
                    unSubscribe.MessageName = $("#EmailCtrl_messageName").text();
                    unSubscribe.MessageID = $("#EmailCtrl_messageID").val();
                    unSubscribe.FromEmail = $("#eco04").val();
                    unSubscribe.ReplyTo = $("#eco05").val();
                    unSubscribe.FromName = $("#eco06").val();
                    unSubscribe.EmailSubject = $("#eco07").val();
                    unSubscribe.CampaignItemTemplateID = $("#EmailCtrl_citemplateID").val();
                    if($('input:radio[name=rbl_eco_citemplate_selected]')[1].checked)
                        unSubscribe.UseCampaignItemTemplate =false;
                    else
                        unSubscribe.UseCampaignItemTemplate =true;
                    unSubscribe.CampaignItemTemplateName =$("#EmailCtrl_templateName").text();
                    unSubscribe.BlastField1=$("#eco08").val();
                    unSubscribe.BlastField2=$("#eco09").val();
                    unSubscribe.BlastField3=$("#eco10").val();
                    unSubscribe.BlastField4=$("#eco11").val();
                    unSubscribe.BlastField5=$("#eco12").val();
                    var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                    var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                    var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                    var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                    var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                    if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                    {

                        unSubscribe.BlastField1 =ebfv1.text();
                    }
                    if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                    {
                        unSubscribe.BlastField2 =ebfv2.text();

                    }
                    if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                    {
                        unSubscribe.BlastField3 =ebfv3.text();
                    }
                    if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                    {
                        unSubscribe.BlastField4 =ebfv4.text();
                    }
                    if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                    {
                        unSubscribe.BlastField5 =ebfv5.text();
                    }
                    unSubscribe.ControlID = shape.id;
                    unSubscribe.ECNID = shape.ECNID;
                    unSubscribe.CampaignItemName = $("#emailcontrol_CampaignItemName").val();
                    automation = replaceControl("Unsubscribe",automation, unSubscribe);
                    parent = BuildParent(parent);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateGroupTrigger", "Home")',
                        data: JSON.stringify({automation:automation, wait:parent,controlID:unSubscribe.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
                case "Form":

                    var form = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Form()));
                    form.Text = $("#cli01").val();
                    form.FormID = $("#LinkAlias_formID").val();
                    form.FormName = $("#LinkAlias_formName").text();
                    form.SpecificLink = $("#LinkAlias_Alias").text();
                    form.ActualLink = $("#LinkAlias_Link").val();
                    form.ControlID = shape.id;
                    form.ECNID = shape.ECNID;
                    if($('input:radio[name=link]:checked').val() == "0")
                    {
                        form.AnyLink = true;
                    }
                    else
                    {
                        form.AnyLink = false;
                    }
                    automation = replaceControl("Form",automation, form);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateFormControl", "Home")',
                        data: JSON.stringify({automation:automation, form:form,controlID:form.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });

                    break;
                case "FormAbandon":

                    var formAbandon = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormAbandon()));
                    formAbandon.Text = $("#cli01").val();
                    formAbandon.MessageID = $("#LinkAlias_messageID").val();
                    formAbandon.MessageName = $("#LinkAlias_messageName").text();
                    formAbandon.SpecificLink = $("#LinkAlias_Alias").val();
                    formAbandon.ActualLink = $("#LinkAlias_Link").val();
                    formAbandon.FromEmail = $("#cli06").val();
                    formAbandon.ReplyTo = $("#cli07").val();
                    formAbandon.FromName = $("#cli08").val();
                    formAbandon.EmailSubject = $("#cli09").val();
                    formAbandon.CampaignItemTemplateID = $("#EmailCli_citemplateID").val();
                    if($('input:radio[name=rbl_citemplateGE_selected]')[1].checked)
                        formAbandon.UseCampaignItemTemplate =false;
                    else
                        formAbandon.UseCampaignItemTemplate =true;
                    formAbandon.CampaignItemTemplateName =$("#EmailCli_templateName").text();
                    formAbandon.BlastField1=$("#cli10").val();
                    formAbandon.BlastField2=$("#cli11").val();
                    formAbandon.BlastField3=$("#cli12").val();
                    formAbandon.BlastField4=$("#cli13").val();
                    formAbandon.BlastField5=$("#cli14").val();
                    var cbfv1 = $("#cli_blastfieldvalue1").data("kendoDropDownList");
                    var cbfv2 = $("#cli_blastfieldvalue2").data("kendoDropDownList");
                    var cbfv3 = $("#cli_blastfieldvalue3").data("kendoDropDownList");
                    var cbfv4 = $("#cli_blastfieldvalue4").data("kendoDropDownList");
                    var cbfv5 = $("#cli_blastfieldvalue5").data("kendoDropDownList");
                    if((cbfv1.text()!=null) && (cbfv1.text() !="Custom Value"))
                    {
                        formAbandon.BlastField1 =cbfv1.text();
                    }
                    if((cbfv2.text()!=null) && (cbfv2.text() !="Custom Value"))
                    {
                        formAbandon.BlastField2 =cbfv2.text();

                    }
                    if((cbfv3.text()!=null) && (cbfv3.text() !="Custom Value"))
                    {
                        formAbandon.BlastField3 =cbfv3.text();
                    }
                    if((cbfv4.text()!=null) && (cbfv4.text() !="Custom Value"))
                    {
                        formAbandon.BlastField4 =cbfv4.text();
                    }
                    if((cbfv5.text()!=null) && (cbfv5.text() !="Custom Value"))
                    {
                        formAbandon.BlastField5 =cbfv5.text();
                    }
                    formAbandon.ControlID = shape.id;
                    formAbandon.ECNID = shape.ECNID;
                    formAbandon.CampaignItemName = $("#emailclick_CampaignItemName").val();
                    if($('input:radio[name=link]:checked').val() == "0")
                    {
                        formAbandon.AnyLink = true;
                    }
                    else{
                        formAbandon.AnyLink = false;
                    }
                    automation = replaceControl("FormAbandon",automation, formAbandon);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateDirectEmail", "Home")',
                        data: JSON.stringify({automation:automation, wait:BuildParent(parent),controlID:formAbandon.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });

                    break;
                case "FormSubmit":

                    var formSubmit = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormSubmit()));
                    formSubmit.Text = $("#cli01").val();
                    formSubmit.MessageID = $("#LinkAlias_messageID").val();
                    formSubmit.MessageName = $("#LinkAlias_messageName").text();
                    formSubmit.SpecificLink = $("#LinkAlias_Alias").val();
                    formSubmit.ActualLink = $("#LinkAlias_Link").val();
                    formSubmit.FromEmail = $("#cli06").val();
                    formSubmit.ReplyTo = $("#cli07").val();
                    formSubmit.FromName = $("#cli08").val();
                    formSubmit.EmailSubject = $("#cli09").val();
                    formSubmit.CampaignItemTemplateID = $("#EmailCli_citemplateID").val();
                    if($('input:radio[name=rbl_citemplateGE_selected]')[1].checked)
                        formSubmit.UseCampaignItemTemplate =false;
                    else
                        formSubmit.UseCampaignItemTemplate =true;
                    formSubmit.CampaignItemTemplateName =$("#EmailCli_templateName").text();
                    formSubmit.BlastField1=$("#cli10").val();
                    formSubmit.BlastField2=$("#cli11").val();
                    formSubmit.BlastField3=$("#cli12").val();
                    formSubmit.BlastField4=$("#cli13").val();
                    formSubmit.BlastField5=$("#cli14").val();
                    var cbfv1 = $("#cli_blastfieldvalue1").data("kendoDropDownList");
                    var cbfv2 = $("#cli_blastfieldvalue2").data("kendoDropDownList");
                    var cbfv3 = $("#cli_blastfieldvalue3").data("kendoDropDownList");
                    var cbfv4 = $("#cli_blastfieldvalue4").data("kendoDropDownList");
                    var cbfv5 = $("#cli_blastfieldvalue5").data("kendoDropDownList");
                    if((cbfv1.text()!=null) && (cbfv1.text() !="Custom Value"))
                    {
                        formSubmit.BlastField1 =cbfv1.text();
                    }
                    if((cbfv2.text()!=null) && (cbfv2.text() !="Custom Value"))
                    {
                        formSubmit.BlastField2 =cbfv2.text();

                    }
                    if((cbfv3.text()!=null) && (cbfv3.text() !="Custom Value"))
                    {
                        formSubmit.BlastField3 =cbfv3.text();
                    }
                    if((cbfv4.text()!=null) && (cbfv4.text() !="Custom Value"))
                    {
                        formSubmit.BlastField4 =cbfv4.text();
                    }
                    if((cbfv5.text()!=null) && (cbfv5.text() !="Custom Value"))
                    {
                        formSubmit.BlastField5 =cbfv5.text();
                    }
                    formSubmit.ControlID = shape.id;
                    formSubmit.ECNID = shape.ECNID;
                    formSubmit.CampaignItemName = $("#emailclick_CampaignItemName").val();
                    if($('input:radio[name=link]:checked').val() == "0")
                    {
                        formSubmit.AnyLink = true;
                    }
                    else{
                        formSubmit.AnyLink = false;
                    }
                    automation = replaceControl("FormSubmit",automation, formSubmit);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateDirectEmail", "Home")',
                        data: JSON.stringify({automation:automation, wait:BuildParent(parent),controlID:formSubmit.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });

                    break;
                case "Direct_Click":

                    var directClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Click()));
                    directClick.Text = $("#cli01").val();
                    directClick.MessageID = $("#LinkAlias_messageID").val();
                    directClick.MessageName = $("#LinkAlias_messageName").text();
                    directClick.SpecificLink = $("#LinkAlias_Alias").val();
                    directClick.ActualLink = $("#LinkAlias_Link").val();
                    directClick.FromEmail = $("#cli06").val();
                    directClick.ReplyTo = $("#cli07").val();
                    directClick.FromName = $("#cli08").val();
                    directClick.EmailSubject = $("#cli09").val();
                    directClick.CampaignItemTemplateID = $("#EmailCli_citemplateID").val();
                    if($('input:radio[name=rbl_citemplateGE_selected]')[1].checked)
                        directClick.UseCampaignItemTemplate =false;
                    else
                        directClick.UseCampaignItemTemplate =true;
                    directClick.CampaignItemTemplateName =$("#EmailCli_templateName").text();
                    directClick.BlastField1=$("#cli10").val();
                    directClick.BlastField2=$("#cli11").val();
                    directClick.BlastField3=$("#cli12").val();
                    directClick.BlastField4=$("#cli13").val();
                    directClick.BlastField5=$("#cli14").val();
                    var cbfv1 = $("#cli_blastfieldvalue1").data("kendoDropDownList");
                    var cbfv2 = $("#cli_blastfieldvalue2").data("kendoDropDownList");
                    var cbfv3 = $("#cli_blastfieldvalue3").data("kendoDropDownList");
                    var cbfv4 = $("#cli_blastfieldvalue4").data("kendoDropDownList");
                    var cbfv5 = $("#cli_blastfieldvalue5").data("kendoDropDownList");
                    if((cbfv1.text()!=null) && (cbfv1.text() !="Custom Value"))
                    {
                        directClick.BlastField1 =cbfv1.text();
                    }
                    if((cbfv2.text()!=null) && (cbfv2.text() !="Custom Value"))
                    {
                        directClick.BlastField2 =cbfv2.text();

                    }
                    if((cbfv3.text()!=null) && (cbfv3.text() !="Custom Value"))
                    {
                        directClick.BlastField3 =cbfv3.text();
                    }
                    if((cbfv4.text()!=null) && (cbfv4.text() !="Custom Value"))
                    {
                        directClick.BlastField4 =cbfv4.text();
                    }
                    if((cbfv5.text()!=null) && (cbfv5.text() !="Custom Value"))
                    {
                        directClick.BlastField5 =cbfv5.text();
                    }
                    directClick.ControlID = shape.id;
                    directClick.ECNID = shape.ECNID;
                    directClick.CampaignItemName = $("#emailclick_CampaignItemName").val();
                    if($('input:radio[name=link]:checked').val() == "0")
                    {
                        directClick.AnyLink = true;
                    }
                    else{
                        directClick.AnyLink = false;
                    }

                    directClick.IsCancelled = $("input:radio[name=cancelClick]").is(":checked");
                    if( $("input:radio[name=cancelClick]").attr("disabled") == false)
                    {
                        directClick.CancelDate = $("#cancelClickDate").text();
                    }

                    automation = replaceControl("Direct_Click",automation, directClick);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateDirectEmail", "Home")',
                        data: JSON.stringify({automation:automation, wait:BuildParent(parent),controlID:directClick.ControlID}),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });

                    break;
                case "Wait":
                    var controlList = new Array();
                    var wait = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Wait()));
                    wait.Days = $("#wai01").val().trim();
                    wait.Hours = $("#wai02").val().trim();
                    wait.Minutes = $("#wai03").val().trim()
                    wait.ControlID = shape.id;
                    wait.Text = $("#wai00").val();
                    wait.IsDirty = shape.isdirty;
                    try
                    {
                        var waitDecimal = parseInt(wait.Days) + (parseInt(wait.Hours) / 24) + (parseInt(wait.Minutes) / 24 / 60);
                        wait.WaitTime = waitDecimal;
                    }
                    catch(e)
                    {}



                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ValidateWait", "Home")',
                        data: JSON.stringify({ automation: automation,wait: wait }),
                        contentType: "application/json; charset=utf-8",
                        async:false,
                        success:function(response){
                            if(response[0] == '200')
                            {
                                returnObj.success = true;
                                returnObj.errorMessage = "";

                            }
                            else if(response[0] == '500')
                            {
                                returnObj.success = false;
                                returnObj.errorMessage = response[1];

                            }
                        },
                        error:function(e)
                        {
                            returnObj.success = false;
                            returnObj.errorMessage = "An error occurred";
                        }
                    });
                    break;
            }
            return returnObj;

        }

        function BuildParent(parent)
        {
            var MAID = parseInt('@Model.MarketingAutomationID.ToString()');
            switch(parent.category)
            {
                case "CampaignItem":
                    var ci = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.CampaignItem()));
                    ci.MarketingAutomationID = MAID;
                    ci.CampaignID = parent.campaign_item_nameID;
                    ci.CampaignItemID = parent.campaign_itemID;
                    ci.CampaignItemName = parent.campaign_item_name;
                    ci.CampaignName = parent.campaign_name;
                    ci.ControlID = parent.id;
                    ci.CustomerID = parent.customerid;
                    ci.CustomerName = parent.customer;
                    ci.ECNID = ci.CampaignItemID;
                    ci.EmailSubject = parent.subject;
                    ci.ExtraText = "";
                    ci.FromEmail = parent.from_email;
                    ci.FromName = parent.from_name;
                    ci.IsDirty = parent.isDirty;
                    ci.MAControlID = parent.MAControlID;
                    ci.MessageID = parent.messageId;
                    ci.MessageName = parent.message;
                    ci.ReplyTo = parent.reply_to;
                    ci.CreateCampaignItem = parent.campaign_item_value;
                    ci.CreateCampaign = parent.campaign_value;
                    ci.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    ci.CampaignItemTemplateID=parent.citemplateID;
                    ci.CampaignItemTemplateName =parent.citemplatename;
                    ci.BlastField1=parent.blastfield1;
                    ci.BlastField2=parent.blastfield2;
                    ci.BlastField3=parent.blastfield3;
                    ci.BlastField4=parent.blastfield4;
                    ci.BlastField5=parent.blastfield5;
                    ci.SendTime = parent.schedule;
                    ci.Text = parent.control_text;
                    ci.xPosition = parent.x;
                    ci.yPosition = parent.y;
                    ci.SelectedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                    ci.SelectedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                    ci.SuppressedGroups = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect>()));
                    ci.SuppressedGroupFilters = @Html.Raw(Json.Encode(new List<ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect>()));
                    for(var g = 0; g < parent.groups.length;g++)
                    {
                        var group = parent.groups[g];
                        var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                        gs.CustomerID = ci.CustomerID;
                        gs.FolderID = group.FolderID;
                        gs.GroupID = group.GroupID;
                        gs.GroupName = group.GroupName;
                        ci.SelectedGroups.push(gs);
                    }

                    for(var g = 0; g< parent.groups_filter.length;g++)
                    {
                        var filter = parent.groups_filter[g];
                        var fs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                        fs.CustomerID = ci.CustomerID;
                        fs.FilterID = filter.FilterID;
                        fs.FilterName = filter.FilterName;
                        fs.GroupID = filter.GroupID;
                        ci.SelectedGroupFilters.push(fs);
                    }

                    for(var g = 0; g <parent.suppression_groups.length;g++)
                    {
                        var supGroup = parent.suppression_groups[g];
                        var gs = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.GroupSelect()));
                        gs.CustomerID = ci.CustomerID;
                        gs.FolderID = supGroup.FolderID;
                        gs.GroupID = supGroup.GroupID;
                        gs.GroupName = supGroup.GroupName;
                        ci.SuppressedGroups.push(gs);
                    }

                    for (var g = 0; g < parent.suppression_groups_filter;g++)
                    {
                        var supFilter = parent.suppression_groups_filter[g];
                        var fs =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.ECN_Objects.FilterSelect()));
                        fs.CustomerID = ci.CustomerID;
                        fs.FilterID = supFilter.FilterID;
                        fs.FilterName = supFilter.FilterName;
                        fs.GroupID = supFilter.GroupID;
                        ci.SuppressedGroupFilters.push(fs);
                    }
                    return ci;
                    break;
                case "Group":
                    var group = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Group()));
                    group.MarketingAutomationID = MAID;
                    group.ControlID = parent.id;
                    group.CustomerID = parent.customerid;
                    group.CustomerName = parent.customer;
                    group.ECNID = parent.groupID;
                    group.ExtraText = "";
                    group.GroupID = parent.groupID;
                    group.GroupName = parent.group;
                    group.IsDirty = parent.isDirty;
                    group.MAControlID = parent.MAControlID;
                    group.Text = parent.control_text;
                    group.xPosition = parent.x;
                    group.yPosition = parent.y;

                    return group;
                    break;
                case "NoClick":
                    var noClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoClick()));
                    noClick.MarketingAutomationID = MAID;
                    noClick.ControlID = parent.id;
                    noClick.ECNID = parent.campaign_itemID;
                    noClick.EmailSubject = parent.subject;
                    noClick.ExtraText = "";
                    noClick.FromEmail = parent.from_email;
                    noClick.FromName = parent.from_name;
                    noClick.IsDirty = parent.isDirty;
                    noClick.MAControlID = parent.MAControlID;
                    noClick.MessageID = parent.messageId;
                    noClick.MessageName = parent.message;
                    noClick.ReplyTo = parent.reply_to;
                    noClick.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    noClick.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    noClick.CampaignItemTemplateName =parent.citemplatename;
                    noClick.BlastField1=parent.blastfield1;
                    noClick.BlastField2=parent.blastfield2;
                    noClick.BlastField3=parent.blastfield3;
                    noClick.BlastField4=parent.blastfield4;
                    noClick.BlastField5=parent.blastfield5;
                    noClick.Text = parent.control_text;
                    noClick.xPosition = parent.x;
                    noClick.yPosition = parent.y;
                    noClick.CampaignItemName = parent.campaign_item_name;
                    return noClick;
                    break;
                case "NoOpen":
                    var noOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NoOpen()));
                    noOpen.MarketingAutomationID = MAID;
                    noOpen.ControlID = parent.id;
                    noOpen.ECNID = parent.campaign_itemID;
                    noOpen.EmailSubject = parent.subject;
                    noOpen.ExtraText = "";
                    noOpen.FromEmail = parent.from_email;
                    noOpen.FromName = parent.from_name;
                    noOpen.IsDirty = parent.isDirty;
                    noOpen.MAControlID = parent.MAControlID;
                    noOpen.MessageID = parent.messageId;
                    noOpen.MessageName = parent.message;
                    noOpen.ReplyTo = parent.reply_to;
                    noOpen.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    noOpen.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    noOpen.CampaignItemTemplateName =parent.citemplatename;
                    noOpen.BlastField1=parent.blastfield1;
                    noOpen.BlastField2=parent.blastfield2;
                    noOpen.BlastField3=parent.blastfield3;
                    noOpen.BlastField4=parent.blastfield4;
                    noOpen.BlastField5=parent.blastfield5;
                    noOpen.Text = parent.control_text;
                    noOpen.xPosition = parent.x;
                    noOpen.yPosition = parent.y;
                    noOpen.CampaignItemName = parent.campaign_item_name;
                    return noOpen;
                    break;
                case "Open_NoClick":
                    var Opennoclick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open_NoClick()));
                    Opennoclick.MarketingAutomationID = MAID;
                    Opennoclick.ControlID = parent.id;
                    Opennoclick.ECNID = parent.campaign_itemID;
                    Opennoclick.EmailSubject = parent.subject;
                    Opennoclick.ExtraText = "";
                    Opennoclick.FromEmail = parent.from_email;
                    Opennoclick.FromName = parent.from_name;
                    Opennoclick.IsDirty = parent.isDirty;
                    Opennoclick.MAControlID = parent.MAControlID;
                    Opennoclick.MessageID = parent.messageId;
                    Opennoclick.MessageName = parent.message;
                    Opennoclick.ReplyTo = parent.reply_to;
                    Opennoclick.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    Opennoclick.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    Opennoclick.CampaignItemTemplateName =parent.citemplatename;
                    Opennoclick.BlastField1=parent.blastfield1;
                    Opennoclick.BlastField2=parent.blastfield2;
                    Opennoclick.BlastField3=parent.blastfield3;
                    Opennoclick.BlastField4=parent.blastfield4;
                    Opennoclick.BlastField5=parent.blastfield5;
                    Opennoclick.Text = parent.control_text;
                    Opennoclick.xPosition = parent.x;
                    Opennoclick.yPosition = parent.y;
                    Opennoclick.CampaignItemName = parent.campaign_item_name;
                    return Opennoclick;
                    break;
                case "Sent":
                    var sent =@Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Sent()));
                    sent.MarketingAutomationID = MAID;
                    sent.ControlID = parent.id;
                    sent.ECNID = parent.campaign_itemID;
                    sent.EmailSubject = parent.subject;
                    sent.ExtraText = "";
                    sent.FromEmail = parent.from_email;
                    sent.FromName = parent.from_name;
                    sent.IsDirty = parent.isDirty;
                    sent.MAControlID = parent.MAControlID;
                    sent.MessageID = parent.messageId;
                    sent.MessageName = parent.message;
                    sent.ReplyTo = parent.reply_to;
                    sent.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    sent.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    sent.CampaignItemTemplateName =parent.citemplatename;
                    sent.BlastField1=parent.blastfield1;
                    sent.BlastField2=parent.blastfield2;
                    sent.BlastField3=parent.blastfield3;
                    sent.BlastField4=parent.blastfield4;
                    sent.BlastField5=parent.blastfield5;
                    sent.Text = parent.control_text;
                    sent.xPosition = parent.x;
                    sent.yPosition = parent.y;
                    sent.CampaignItemName = parent.campaign_item_name;
                    return sent;
                    break;
                case "NotSent":
                    var notSent = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.NotSent()));
                    notSent.MarketingAutomationID = MAID;
                    notSent.ControlID = parent.id;
                    notSent.ECNID = parent.campaign_itemID;
                    notSent.EmailSubject = parent.subject;
                    notSent.ExtraText = "";
                    notSent.FromEmail = parent.from_email;
                    notSent.FromName = parent.from_name;
                    notSent.IsDirty = parent.isDirty;
                    notSent.MAControlID = parent.MAControlID;
                    notSent.MessageID = parent.messageId;
                    notSent.MessageName = parent.message;
                    notSent.ReplyTo = parent.reply_to;
                    notSent.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    notSent.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    notSent.CampaignItemTemplateName =parent.citemplatename;
                    notSent.BlastField1=parent.blastfield1;
                    notSent.BlastField2=parent.blastfield2;
                    notSent.BlastField3=parent.blastfield3;
                    notSent.BlastField4=parent.blastfield4;
                    notSent.BlastField5=parent.blastfield5;
                    notSent.Text = parent.control_text;
                    notSent.xPosition = parent.x;
                    notSent.yPosition = parent.y;
                    notSent.CampaignItemName = parent.campaign_item_name;
                    return notSent;
                    break;
                case "Suppressed":
                    var suppressed =  @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Suppressed()));
                    suppressed.MarketingAutomationID = MAID;
                    suppressed.ControlID = parent.id;
                    suppressed.ECNID = parent.campaign_itemID;
                    suppressed.EmailSubject = parent.subject;
                    suppressed.ExtraText = "";
                    suppressed.FromEmail = parent.from_email;
                    suppressed.FromName = parent.from_name;
                    suppressed.IsDirty = parent.isDirty;
                    suppressed.MAControlID = parent.MAControlID;
                    suppressed.MessageID = parent.messageId;
                    suppressed.MessageName = currentparent.message;
                    suppressed.ReplyTo = parent.reply_to;
                    suppressed.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    suppressed.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    suppressed.CampaignItemTemplateName =parent.citemplatename;
                    suppressed.BlastField1=parent.blastfield1;
                    suppressed.BlastField2=parent.blastfield2;
                    suppressed.BlastField3=parent.blastfield3;
                    suppressed.BlastField4=parent.blastfield4;
                    suppressed.BlastField5=parent.blastfield5;
                    suppressed.Text = parent.control_text;
                    suppressed.xPosition = parent.x;
                    suppressed.yPosition = parent.y;
                    suppressed.CampaignItemName = parent.campaign_item_name;
                    return suppressed;
                    break;
                case "Click":
                    var click = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Click()));
                    click.MarketingAutomationID = MAID;
                    click.ControlID = parent.id;
                    click.ECNID = parent.campaign_itemID;
                    click.EmailSubject = parent.subject;
                    click.ExtraText = "";
                    click.FromEmail = parent.from_email;
                    click.FromName = parent.from_name;
                    click.IsDirty = parent.isDirty;
                    click.MAControlID = parent.MAControlID;
                    click.MessageID = parent.messageId;
                    click.MessageName = parent.message;
                    click.ReplyTo = parent.reply_to;
                    click.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    click.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    click.CampaignItemTemplateName =parent.citemplatename;
                    click.BlastField1=parent.blastfield1;
                    click.BlastField2=parent.blastfield2;
                    click.BlastField3=parent.blastfield3;
                    click.BlastField4=parent.blastfield4;
                    click.BlastField5=parent.blastfield5;
                    click.Text = parent.control_text;
                    click.xPosition = parent.x;
                    click.yPosition = parent.y;
                    click.CampaignItemName = parent.campaign_item_name;
                    return click;
                    break;
                case "Open":
                    var open = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Open()));
                    open.MarketingAutomationID = MAID;
                    open.ControlID = parent.id;
                    open.ECNID = parent.campaign_itemID;
                    open.EmailSubject = parent.subject;
                    open.ExtraText = "";
                    open.FromEmail = parent.from_email;
                    open.FromName = parent.from_name;
                    open.IsDirty = parent.isDirty;
                    open.MAControlID = parent.MAControlID;
                    open.MessageID = parent.messageId;
                    open.MessageName = parent.message;
                    open.ReplyTo = parent.reply_to;
                    open.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    open.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    open.CampaignItemTemplateName =parent.citemplatename;
                    open.BlastField1=parent.blastfield1;
                    open.BlastField2=parent.blastfield2;
                    open.BlastField3=parent.blastfield3;
                    open.BlastField4=parent.blastfield4;
                    open.BlastField5=parent.blastfield5;
                    open.Text = parent.control_text;
                    open.xPosition = parent.x;
                    open.yPosition = parent.y;
                    open.CampaignItemName = parent.campaign_item_name;
                    return open;
                    break;
                case "Direct_Open":
                    var directOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Open()));
                    directOpen.MarketingAutomationID = MAID;
                    directOpen.ControlID = parent.id;
                    directOpen.ECNID = parent.ECNID;
                    directOpen.EmailSubject = parent.subject;
                    directOpen.ExtraText = "";
                    directOpen.FromEmail = parent.from_email;
                    directOpen.FromName = parent.from_name;
                    directOpen.IsDirty = parent.isDirty;
                    directOpen.MAControlID = parent.MAControlID;
                    directOpen.MessageID = parent.messageId;
                    directOpen.MessageName = parent.message;
                    directOpen.ReplyTo = parent.reply_to;
                    directOpen.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    directOpen.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    directOpen.CampaignItemTemplateName =parent.citemplatename;
                    directOpen.BlastField1=parent.blastfield1;
                    directOpen.BlastField2=parent.blastfield2;
                    directOpen.BlastField3=parent.blastfield3;
                    directOpen.BlastField4=parent.blastfield4;
                    directOpen.BlastField5=parent.blastfield5;
                    directOpen.Text = parent.control_text;
                    directOpen.xPosition = parent.x;
                    directOpen.yPosition = parent.y;
                    directOpen.IsCancelled = parent.isCancelled;
                    directOpen.CancelDate = parent.cancelDate;
                    directOpen.CampaignItemName = parent.campaign_item_name;
                    return directOpen;
                    break;
                case "Direct_NoOpen":
                    var directNoOpen = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_NoOpen()));
                    directNoOpen.MarketingAutomationID = MAID;
                    directNoOpen.ControlID = parent.id;
                    directNoOpen.ECNID = parent.ECNID;
                    directNoOpen.EmailSubject = parent.subject;
                    directNoOpen.ExtraText = "";
                    directNoOpen.FromEmail = parent.from_email;
                    directNoOpen.FromName = parent.from_name;
                    directNoOpen.IsDirty = parent.isDirty;
                    directNoOpen.MAControlID = parent.MAControlID;
                    directNoOpen.MessageID = parent.messageId;
                    directNoOpen.MessageName = parent.message;
                    directNoOpen.ReplyTo = parent.reply_to;
                    directNoOpen.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    directNoOpen.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    directNoOpen.CampaignItemTemplateName =parent.citemplatename;
                    directNoOpen.BlastField1=parent.blastfield1;
                    directNoOpen.BlastField2=parent.blastfield2;
                    directNoOpen.BlastField3=parent.blastfield3;
                    directNoOpen.BlastField4=parent.blastfield4;
                    directNoOpen.BlastField5=parent.blastfield5;
                    directNoOpen.Text = parent.control_text;
                    directNoOpen.xPosition = parent.x;
                    directNoOpen.yPosition = parent.y;
                    directNoOpen.IsCancelled = parent.isCancelled;
                    directNoOpen.CancelDate = parent.cancelDate;
                    directNoOpen.CampaignItemName = parent.campaign_item_name;
                    return directNoOpen;
                    break;
                case "Subscribe":
                    var subscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Subscribe()));
                    subscribe.MarketingAutomationID = MAID;
                    subscribe.ControlID = parent.id;
                    subscribe.ECNID = parent.ECNID;
                    subscribe.EmailSubject = parent.subject;
                    subscribe.ExtraText = "";
                    subscribe.FromEmail = parent.from_email;
                    subscribe.FromName = parent.from_name;
                    subscribe.IsDirty = parent.isDirty;
                    subscribe.MAControlID = parent.MAControlID;
                    subscribe.MessageID = parent.messageId;
                    subscribe.MessageName = parent.message;
                    subscribe.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    subscribe.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    subscribe.CampaignItemTemplateName =parent.citemplatename;
                    subscribe.BlastField1=parent.blastfield1;
                    subscribe.BlastField2=parent.blastfield2;
                    subscribe.BlastField3=parent.blastfield3;
                    subscribe.BlastField4=parent.blastfield4;
                    subscribe.BlastField5=parent.blastfield5;
                    subscribe.ReplyTo = parent.reply_to;
                    subscribe.Text = parent.control_text;
                    subscribe.xPosition = parent.x;
                    subscribe.yPosition = parent.y;
                    subscribe.IsCancelled = parent.isCancelled;
                    subscribe.CancelDate = parent.cancelDate;
                    subscribe.CampaignItemName = parent.campaign_item_name;
                    return subscribe;
                    break;
                case "Unsubscribe":
                    var unSubscribe = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Unsubscribe()));
                    unSubscribe.MarketingAutomationID = MAID;
                    unSubscribe.ControlID = parent.id;
                    unSubscribe.ECNID = parent.ECNID;
                    unSubscribe.EmailSubject = parent.subject;
                    unSubscribe.ExtraText = "";
                    unSubscribe.FromEmail = parent.from_email;
                    unSubscribe.FromName = parent.from_name;
                    unSubscribe.IsDirty = parent.isDirty;
                    unSubscribe.MAControlID = parent.MAControlID;
                    unSubscribe.MessageID = parent.messageId;
                    unSubscribe.MessageName = parent.message;
                    unSubscribe.ReplyTo = parent.reply_to;
                    unSubscribe.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    unSubscribe.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    unSubscribe.CampaignItemTemplateName =parent.citemplatename;
                    unSubscribe.BlastField1=parent.blastfield1;
                    unSubscribe.BlastField2=parent.blastfield2;
                    unSubscribe.BlastField3=parent.blastfield3;
                    unSubscribe.BlastField4=parent.blastfield4;
                    unSubscribe.BlastField5=parent.blastfield5;
                    unSubscribe.Text = parent.control_text;
                    unSubscribe.xPosition = parent.x;
                    unSubscribe.yPosition = parent.y;
                    unSubscribe.IsCancelled = parent.isCancelled;
                    unSubscribe.CancelDate = parent.cancelDate;
                    unSubscribe.CampaignItemName = parent.campaign_item_name;
                    return unSubscribe;
                    break;
                case "FormSubmit":
                    var formSubmit = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormSubmit()));
                    formSubmit.MarketingAutomationID = MAID;
                    formSubmit.ControlID = parent.id;
                    formSubmit.ECNID = parent.ECNID;
                    formSubmit.EmailSubject = parent.subject;
                    formSubmit.ExtraText = "";
                    formSubmit.FromEmail = parent.from_email;
                    formSubmit.FromName = parent.from_name;
                    formSubmit.IsDirty = parent.isDirty;
                    formSubmit.MAControlID = parent.MAControlID;
                    formSubmit.MessageID = parent.messageId;
                    formSubmit.MessageName = parent.message;
                    formSubmit.ReplyTo = parent.reply_to;
                    formSubmit.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    formSubmit.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    formSubmit.CampaignItemTemplateName =parent.citemplatename;
                    formSubmit.BlastField1=parent.blastfield1;
                    formSubmit.BlastField2=parent.blastfield2;
                    formSubmit.BlastField3=parent.blastfield3;
                    formSubmit.BlastField4=parent.blastfield4;
                    formSubmit.BlastField5=parent.blastfield5;
                    formSubmit.Text = parent.control_text;
                    formSubmit.xPosition = parent.x;
                    formSubmit.yPosition = parent.y;
                    formSubmit.AnyLink = parent.linkRb;
                    formSubmit.SpecificLink = parent.link;
                    formSubmit.IsCancelled = parent.isCancelled;
                    formSubmit.CancelDate = parent.cancelDate;
                    formSubmit.CampaignItemName = parent.campaign_item_name;
                    return formSubmit;
                    break;
                case "FormAbandon":
                    var formAbandon = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.FormAbandon()));
                    formAbandon.MarketingAutomationID = MAID;
                    formAbandon.ControlID = parent.id;
                    formAbandon.ECNID = parent.ECNID;
                    formAbandon.EmailSubject = parent.subject;
                    formAbandon.ExtraText = "";
                    formAbandon.FromEmail = parent.from_email;
                    formAbandon.FromName = parent.from_name;
                    formAbandon.IsDirty = parent.isDirty;
                    formAbandon.MAControlID = parent.MAControlID;
                    formAbandon.MessageID = parent.messageId;
                    formAbandon.MessageName = parent.message;
                    formAbandon.ReplyTo = parent.reply_to;
                    formAbandon.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    formAbandon.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    formAbandon.CampaignItemTemplateName =parent.citemplatename;
                    formAbandon.BlastField1=parent.blastfield1;
                    formAbandon.BlastField2=parent.blastfield2;
                    formAbandon.BlastField3=parent.blastfield3;
                    formAbandon.BlastField4=parent.blastfield4;
                    formAbandon.BlastField5=parent.blastfield5;
                    formAbandon.Text = parent.control_text;
                    formAbandon.xPosition = parent.x;
                    formAbandon.yPosition = parent.y;
                    formAbandon.AnyLink = parent.linkRb;
                    formAbandon.SpecificLink = parent.link;
                    formAbandon.IsCancelled = parent.isCancelled;
                    formAbandon.CancelDate = parent.cancelDate;
                    formAbandon.CampaignItemName = parent.campaign_item_name;
                    return formAbandon;
                    break;
                case "Direct_Click":
                    var directClick = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Direct_Click()));
                    directClick.MarketingAutomationID = MAID;
                    directClick.ControlID = parent.id;
                    directClick.ECNID = parent.ECNID;
                    directClick.EmailSubject = parent.subject;
                    directClick.ExtraText = "";
                    directClick.FromEmail = parent.from_email;
                    directClick.FromName = parent.from_name;
                    directClick.IsDirty = parent.isDirty;
                    directClick.MAControlID = parent.MAControlID;
                    directClick.MessageID = parent.messageId;
                    directClick.MessageName = parent.message;
                    directClick.ReplyTo = parent.reply_to;
                    directClick.UseCampaignItemTemplate=parent.campaign_itemtemplate_value;
                    directClick.CampaignItemTemplateID=parent.campaign_itemtemplateID;
                    directClick.CampaignItemTemplateName =parent.citemplatename;
                    directClick.BlastField1=parent.blastfield1;
                    directClick.BlastField2=parent.blastfield2;
                    directClick.BlastField3=parent.blastfield3;
                    directClick.BlastField4=parent.blastfield4;
                    directClick.BlastField5=parent.blastfield5;
                    directClick.Text = parent.control_text;
                    directClick.xPosition = parent.x;
                    directClick.yPosition = parent.y;
                    directClick.AnyLink = parent.linkRb;
                    directClick.SpecificLink = parent.link;
                    directClick.IsCancelled = parent.isCancelled;
                    directClick.CancelDate = parent.cancelDate;
                    directClick.CampaignItemName = parent.campaign_item_name;
                    return directClick;
                    break;
                case "Wait":
                    var wait = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Wait()));
                    wait.MarketingAutomationID = MAID;
                    wait.ControlID = parent.id;
                    wait.ECNID = -1;
                    wait.ExtraText = "";
                    wait.IsDirty = parent.isDirty;
                    wait.MAControlID = parent.MAControlID;
                    wait.Text = parent.control_text;
                    wait.Days = parent.days;
                    wait.Hours = parent.hours;
                    wait.Minutes = parent.minutes;
                    wait.WaitTime = parseInt(parent.days) + (parseInt(parent.hours) / 24) + (parseInt(parent.minutes) / 24 / 60);
                    wait.xPosition = parent.x;
                    wait.yPosition = parent.y;
                    return wait;
                    break;
                case "Start":
                    var start = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.Start()));
                    start.MarketingAutomationID = MAID;
                    start.ControlID = parent.id;
                    start.ECNID = -1;
                    start.ExtraText = "";
                    start.IsDirty = parent.isDirty;
                    start.MAControlID = parent.MAControlID;
                    start.Text = parent.control_text;
                    start.xPosition = parent.x;
                    start.yPosition = parent.y;
                    return start;
                    break;
                case "End":
                    var end = @Html.Raw(Json.Encode(new ecn.MarketingAutomation.Models.PostModels.Controls.End()));
                    end.MarketingAutomationID = MAID;
                    end.ControlID = parent.id;
                    end.ECNID = -1;
                    end.ExtraText = "";
                    end.IsDirty = parent.isDirty;
                    end.MAControlID = parent.MAControlID;
                    end.Text = parent.control_text;
                    end.xPosition = parent.x;
                    end.yPosition = parent.y;
                    return end;
                    break;
            }
        }



        function getShapeProperties(shape, startDate, endDate, parent){
            var start = new Date(startDate);
            var end = new Date(endDate);

            switch (shape.category){
                case "CampaignItem":


                    var Validation = ValidateShape(shape, parent);
                    if(Validation.success == true)
                    {
                        shape.control_text = $("#campaignItem_controlName").val();
                        shape.customer = $("#campaignItem_customerName").text();
                        shape.customerid = $("#campaignItem_customerID").val();

                        shape.campaign_item_value = $('input:radio[name=rbl_campaign_item_selected]:checked').val() == 0 ? false : true;
                        shape.campaign_value = $('input:radio[name=rbl_campaign_selected]:checked').val() == 0 ? false : true;
                        shape.campaign_itemtemplate_value = $('input:radio[name=rbl_citemplate_selected]:checked').val() == 0 ? false : true;
                        if(parent.category == "Start")
                        {
                            shape.subcategory = "Start";
                            if(shape.campaign_item_value == true)
                            {
                                shape.schedule = $("#cam13").val();
                                var systemtz = Intl.DateTimeFormat().resolvedOptions().timeZone;
                                if (systemtz != 'America/Chicago')
                                {
                                    var GMTdt = new Date($("#cam13").val());
                                    var csttime = moment(GMTdt).tz('America/Chicago');
                                    var scheduleDate = new Date(csttime);
                                    var AMPM = "AM";
                                    var adjustedHours = scheduleDate.getHours();
                                    if (adjustedHours > 12) {
                                        AMPM = "PM";
                                        adjustedHours = adjustedHours - 12;
                                    }
                                    else if (adjustedHours == 12) { AMPM = "PM"; adjustedHours = adjustedHours }
                                    else if (adjustedHours == 0) { adjustedHours = 12; }
                                    shape.schedule = (scheduleDate.getMonth() + 1) + "/" + (scheduleDate.getDate()) + "/" + scheduleDate.getFullYear() + " " + adjustedHours + ":" + (scheduleDate.getMinutes() < 10 ? '0' : '') + scheduleDate.getMinutes() + " " + AMPM;
                                }
                            }
                            else{
                                shape.schedule = $("#scheduledTime").text();
                            }
                        }
                        else
                        {
                            shape.subcategory = "Group";
                            shape.schedule = $("#campaign_estimatedSendTime").text();
                        }
                        shape.campaign_itemID = $("#campaignItemID").val();
                        if(shape.campaign_itemID.length == 0)
                            shape.campaign_itemID = -1;
                        if(shape.campaign_item_value == true)
                        {
                            if(shape.campaign_itemID == '')
                            {
                                shape.campaign_itemID = -1;
                            }
                            if($('input:radio[name=rbl_campaign_item_selected]')[0].checked)
                            {
                                shape.campaign_item_name = $("#campaignItemName").text();
                            }
                            else
                            {
                                shape.campaign_item_name = $("#campaignItem_NewCampaignItemName").val();
                            }


                            shape.campaign_item_name_value = $('input:radio[name=rbl_campaign_selected]:checked').val();
                            if($("#campaignID").val().length == 0){
                                shape.campaign_ID = -1;
                            }
                            else {
                                shape.campaign_ID = $("#campaignID").val();
                            };
                            if($('input:radio[name=rbl_campaign_selected]')[0].checked)
                                shape.campaign_name = $("#campaignName").text(); else shape.campaign_name = $("#campaign_NewCampaignName").val();

                            shape.groups = Campaign_SelectedGroups;
                            shape.groups_filter =Campaign_SelectedGroupFilters ;
                            shape.suppression_groups = Campaign_SelectedSuppressionGroups;
                            shape.suppression_groups_filter = Campaign_SelectedSuppressionGroupFilters;

                            shape.message = $("#messageName").text();
                            shape.messageId = $("#messageID").val();
                            shape.from_email = $("#cam09").val();
                            shape.reply_to = $("#cam10").val();
                            shape.from_name = $("#cam11").val();
                            shape.subject = $("#cam12").val();
                            if($("#citemplateID").val().length == 0){
                                shape.campaign_itemtemplateID = -1;
                            }
                            else {
                                shape.campaign_itemtemplateID = $("#citemplateID").val();
                            };
                            shape.citemplatename=$("#templateName").text();
                            shape.blastfield1= $("#cam14").val();
                            shape.blastfield2= $("#cam15").val();
                            shape.blastfield3 =$("#cam16").val();
                            shape.blastfield4 =$("#cam17").val();
                            shape.blastfield5 =$("#cam18").val();
                            var bfv1 = $("#blastfieldvalue1").data("kendoDropDownList");
                            var bfv2 = $("#blastfieldvalue2").data("kendoDropDownList");
                            var bfv3 = $("#blastfieldvalue3").data("kendoDropDownList");
                            var bfv4 = $("#blastfieldvalue4").data("kendoDropDownList");
                            var bfv5 = $("#blastfieldvalue5").data("kendoDropDownList");
                            if((bfv1.text()!=null) && (bfv1.text() !="Custom Value"))
                            {
                                shape.BlastField1 =bfv1.text();
                                shape.blastfield1 = shape.BlastField1;
                            }
                            if((bfv2.text()!=null) && (bfv2.text() !="Custom Value"))
                            {
                                shape.BlastField2 =bfv2.text();
                                shape.blastfield2 = shape.BlastField2;
                            }
                            if((bfv3.text()!=null) && (bfv3.text() !="Custom Value"))
                            {
                                shape.BlastField3 =bfv3.text();
                                shape.blastfield3 = shape.BlastField3;
                            }
                            if((bfv4.text()!=null) && (bfv4.text() !="Custom Value"))
                            {
                                shape.BlastField4 =bfv4.text();
                                shape.blastfield4 = shape.BlastField4;
                            }
                            if((bfv5.text()!=null) && (bfv5.text() !="Custom Value"))
                            {
                                shape.BlastField5 =bfv5.text();
                                shape.blastfield5 = shape.BlastField5;
                            }
                            shape.campaign_itemtemplate_value = $('input:radio[name=rbl_citemplate_selected]:checked').val();

                        }
                        else{
                            shape.ECNID = $("#campaignItemID").val();
                            shape.campaign_item_name = $("#campaignItemName").text();
                            shape.messageId = $("#messageID").val();
                            shape.message = $("#messageName").text();
                            var dateToCheck = new Date(shape.schedule);
                            end.setDate(end.getDate() + 1);

                            if(dateToCheck > end || dateToCheck < start)
                                throw "SendTime is outside of the Automations Start and End dates";
                        }
                    }
                    else
                    {
                        throw Validation.errorMessage;
                    }
                    break;
                case "Group":

                    var Validation = ValidateShape(shape, parent);
                    if(Validation.success == true)
                    {
                        shape.control_text = $("#gro01").val();
                        shape.customer = $("#_Group_customerName").text();
                        shape.customerid = $("#_Group_customerID").val();
                        shape.group = $("#_Group_groupName").text();
                        shape.groupID = $("#_Group_groupID").val();
                    }
                    else{
                        throw Validation.errorMessage;
                    }

                    break;
                case "NoClick":
                case "NoOpen":
                case "Open_NoClick":
                case "Sent":
                case "NotSent":
                case "Suppressed":
                case "Click":
                case "Open":
                case "Direct_Open":
                case "Direct_NoOpen":
                case "Subscribe":
                case "Unsubscribe":
                    var Validation = ValidateShape(shape, parent);
                    if(Validation.success == true)
                    {
                        shape.control_text = $("#eco01").val();
                        shape.message = $("#EmailCtrl_messageName").text();
                        shape.messageId = $("#EmailCtrl_messageID").val();
                        shape.from_email = $("#eco04").val();
                        shape.reply_to = $("#eco05").val();
                        shape.from_name = $("#eco06").val();
                        shape.subject = $("#eco07").val();
                        shape.message = $("#EmailCtrl_messageName").text();
                        shape.messageId = $("#EmailCtrl_messageID").val();
                        shape.campaign_itemtemplate_value = $('input:radio[name=rbl_eco_citemplate_selected]:checked').val() == 0 ? false : true;
                        shape.customerId = $("#EmailCtrl_customerID").val();
                        if($("#EmailCtrl_citemplateID").val().length == 0){
                            shape.campaign_itemtemplateID = -1;
                        }
                        else {
                            shape.campaign_itemtemplateID = $("#EmailCtrl_citemplateID").val();
                        };
                        shape.citemplatename=$("#EmailCtrl_templateName").text();
                        shape.blastfield1 = $("#eco08").val();
                        shape.blastfield2 =$("#eco09").val();
                        shape.blastfield3 =$("#eco10").val();
                        shape.blastfield4 =$("#eco11").val();
                        shape.blastfield5 =$("#eco12").val();

                        var ebfv1 = $("#eco_blastfieldvalue1").data("kendoDropDownList");
                        var ebfv2 = $("#eco_blastfieldvalue2").data("kendoDropDownList");
                        var ebfv3 = $("#eco_blastfieldvalue3").data("kendoDropDownList");
                        var ebfv4 = $("#eco_blastfieldvalue4").data("kendoDropDownList");
                        var ebfv5 = $("#eco_blastfieldvalue5").data("kendoDropDownList");
                        if((ebfv1.text()!=null) && (ebfv1.text() !="Custom Value"))
                        {
                            shape.BlastField1 =ebfv1.text();
                            shape.blastfield1 = shape.BlastField1;
                        }
                        if((ebfv2.text()!=null) && (ebfv2.text() !="Custom Value"))
                        {
                            shape.BlastField2 =ebfv2.text();
                            shape.blastfield2 = shape.BlastField2;
                        }
                        if((ebfv3.text()!=null) && (ebfv3.text() !="Custom Value"))
                        {
                            shape.BlastField3 =ebfv3.text();
                            shape.blastfield3 = shape.BlastField3;
                        }
                        if((ebfv4.text()!=null) && (ebfv4.text() !="Custom Value"))
                        {
                            shape.BlastField4 =ebfv4.text();
                            shape.blastfield4 = shape.BlastField4;
                        }
                        if((ebfv5.text()!=null) && (ebfv5.text() !="Custom Value"))
                        {
                            shape.BlastField5 =ebfv5.text();
                            shape.blastfield5 = shape.BlastField5;
                        }
                        shape.campaign_item_name = $("#emailcontrol_CampaignItemName").val();

                        if(shape.category == "Direct_NoOpen" || shape.category == "Direct_Open" || shape.category == "Subscribe" || shape.category == "Unsubscribe")
                        {
                            if(shape.ECNID > 0)
                                shape.isCancelled =$("input:radio[name=cancel]").is(":checked");
                            if(shape.editable.remove)
                                shape.cancelDate ='';
                            shape.isConfigured = true;
                            if((shape.isCancelled) &&(shape.cancelDate==''))
                                return shape.isCancelled;
                        }
                        else
                        {
                            shape.estSendTime = $("emailControl_estSendTime").val();
                        }
                    }
                    else{
                        throw Validation.errorMessage;
                    }

                    break;
                case "Direct_Click":
                case "FormSubmit":
                case "FormAbandon":

                    var Validation = ValidateShape(shape, parent);
                    if(Validation.success == true)
                    {
                        shape.control_text = $("#cli01").val();
                        if($('input:radio[name=link]:checked').val() == "0")
                        {
                            shape.linkRb = true;
                            shape.link_alias='';
                            shape.link ='';
                        }
                        else{
                            shape.linkRb = false;
                            shape.link_alias = $("#LinkAlias_Alias").text();
                            shape.link = $("#LinkAlias_Link").val();
                        }

                        shape.from_email = $("#cli06").val();
                        shape.reply_to = $("#cli07").val();
                        shape.from_name = $("#cli08").val();
                        shape.subject = $("#cli09").val();
                        shape.message = $("#LinkAlias_messageName").text();
                        shape.messageId = $("#LinkAlias_messageID").val();
                        shape.campaign_itemtemplate_value = $('input:radio[name=rbl_citemplateGE_selected]:checked').val() == 0 ? false : true;
                        shape.customerId = $("#LinkAlias_customerID").val();
                        if($("#EmailCli_citemplateID").val().length == 0){
                            shape.campaign_itemtemplateID = -1;
                        }
                        else {
                            shape.campaign_itemtemplateID = $("#EmailCli_citemplateID").val();
                        };
                        shape.citemplatename=$("#EmailCli_templateName").text();
                        shape.blastfield1 = $("#cli10").val();
                        shape.blastfield2 =$("#cli11").val();
                        shape.blastfield3 =$("#cli12").val();
                        shape.blastfield4 =$("#cli13").val();
                        shape.blastfield5 =$("#cli14").val();
                        var cbfv1 = $("#cli_blastfieldvalue1").data("kendoDropDownList");
                        var cbfv2 = $("#cli_blastfieldvalue2").data("kendoDropDownList");
                        var cbfv3 = $("#cli_blastfieldvalue3").data("kendoDropDownList");
                        var cbfv4 = $("#cli_blastfieldvalue4").data("kendoDropDownList");
                        var cbfv5 = $("#cli_blastfieldvalue5").data("kendoDropDownList");
                        if((cbfv1.text()!=null) && (cbfv1.text() !="Custom Value"))
                        {
                            shape.BlastField1 =cbfv1.text();
                            shape.blastfield1 = shape.BlastField1;
                        }
                        if((cbfv2.text()!=null) && (cbfv2.text() !="Custom Value"))
                        {
                            shape.BlastField2 =cbfv2.text();
                            shape.blastfield2 = shape.BlastField2;
                        }
                        if((cbfv3.text()!=null) && (cbfv3.text() !="Custom Value"))
                        {
                            shape.BlastField3 =cbfv3.text();
                            shape.blastfield3 = shape.BlastField3;
                        }
                        if((cbfv4.text()!=null) && (cbfv4.text() !="Custom Value"))
                        {
                            shape.BlastField4 =cbfv4.text();
                            shape.blastfield4 = shape.BlastField4;
                        }
                        if((cbfv5.text()!=null) && (cbfv5.text() !="Custom Value"))
                        {
                            shape.BlastField5 =cbfv5.text();
                            shape.blastfield5 = shape.BlastField5;
                        }
                        shape.campaign_item_name = $("#emailclick_CampaignItemName").val();
                        if(shape.ECNID > 0)
                            shape.isCancelled = $('#cancelClick').is(':checked');
                        if(shape.editable.remove)
                            shape.cancelDate ='';
                        shape.isConfigured = true;
                        if((shape.isCancelled) &&(shape.cancelDate==''))
                            return shape.isCancelled;
                    }
                    else
                    {
                        throw Validation.errorMessage;
                    }


                    break;
                case "Form":
                    var Validation = ValidateShape(shape, parent);
                    if(Validation.success == true)
                    {
                        shape.control_text = $("#cli01").val();
                        shape.linkRb = false;
                        shape.link_alias = $("#LinkAlias_Alias").text();
                        shape.link = $("#LinkAlias_Link").val();

                        shape.formname = $("#LinkAlias_formName").text();
                        shape.formId = $("#LinkAlias_formID").val();
                        shape.isConfigured = true;

                    }
                    else
                    {
                        throw Validation.errorMessage;
                    }


                    break;
                case "Wait":
                    //37577 Do not allow negative values and values beyond range for wait control property fields -Days,Hours,Minutes
                    var Msgbox ='';
                    var Days = $("#wai01").val().trim();
                    var Hours = $("#wai02").val().trim();
                    var Mins = $("#wai03").val().trim();

                    if((Days == null || Days.length == 0) && (Hours == null || Hours.length == 0) && (Mins == null || Mins.length == 0))
                        throw "Please enter a wait time";
                    if(Days != null && Days.length > 0)
                    {
                        if(parseInt(Days) < 0 || parseInt(Days) > 365 || isNaN(Days))
                            Msgbox  = Msgbox.concat("<br>Please specify any number between 0 and 365 for days.");
                    }
                    if(Hours != null && Hours.length > 0)
                    {
                        if(parseInt(Hours) < 0 || parseInt(Hours) > 23|| isNaN(Hours))
                            Msgbox  = Msgbox.concat("<br>Please specify any number between 0 and 23 for hours.");
                    }
                    if(Mins != null && Mins.length > 0)
                    {
                        if(parseInt(Mins) < 0 || parseInt(Mins) > 59|| isNaN(Mins))
                            Msgbox  = Msgbox.concat("<br>Please specify any number between 0 and 59 for minutes.");
                    }
                    if(Msgbox!=='')
                        throw Msgbox
                    else
                    {
                        if(Days=='-0' || Days=='+0' || Days.length == 0){ shape.days = 0}
                        else{shape.days = parseInt(Days);}
                        if(Hours=='-0' || Hours=='+0' || Hours.length == 0){ shape.hours = 0}
                        else{shape.hours = parseInt(Hours);}
                        if(Mins=='-0' || Mins=='+0' || Mins.length == 0){ shape.minutes = 0}
                        else{shape.minutes = parseInt(Mins);}
                        shape.control_text = $("#wai00").val();

                        var parentDate = "";
                        if(parent.category == 'CampaignItem')
                        {
                            parentDate = parent.schedule;
                        }
                        else if(parent.estSendTime)
                        {
                            parentDate = parent.estSendTime
                        }

                        var IsISOFormat = parentDate.search('T');
                        var hasGMT = parentDate.search('GMT');
                        var scheduleDate;
                        if (IsISOFormat > 0 && hasGMT < 0)
                            scheduleDate = new Date(parseIsoDatetime(parentDate));
                        else
                            scheduleDate = new Date(parentDate);
                        //var AMPM = "AM";
                        var adjustedHours = scheduleDate.getHours();

                        //if (adjustedHours > 12) {
                        //    AMPM = "PM";
                        //    adjustedHours = adjustedHours - 12;
                        //}
                        //else if (adjustedHours == 12) { AMPM = "PM"; adjustedHours = adjustedHours }
                        //else if (adjustedHours == 0) { adjustedHours = 12; }
                        if(parent.category == 'CampaignItem')
                        {
                            parent.schedule = (scheduleDate.getMonth() + 1) + "/" + (scheduleDate.getDate()) + "/" + scheduleDate.getFullYear() + " " + adjustedHours + ":" + (scheduleDate.getMinutes() < 10 ? '0' : '') + scheduleDate.getMinutes();
                        }
                        else if(parent.estSendTime)
                        {
                            parent.estSendTime = (scheduleDate.getMonth() + 1) + "/" + (scheduleDate.getDate()) + "/" + scheduleDate.getFullYear() + " " + adjustedHours + ":" + (scheduleDate.getMinutes() < 10 ? '0' : '') + scheduleDate.getMinutes();
                        }
                        shape.isdirty = true;

                        var Validation = ValidateShape(shape, parent);
                        if(Validation.success == true)
                        {

                            if(parent.category != "Group")
                            {
                                var parentDate = new Date(parent.schedule);
                                var year = parentDate.getFullYear();
                                var month = parentDate.getMonth();
                                var days = parentDate.getDate() + 1;
                                var hours = parentDate.getHours();
                                var minutes = parentDate.getMinutes();
                                var seconds = parentDate.getSeconds();

                                if(shape.days != null && shape.days.length > 0)
                                {
                                    days += parseInt(shape.days);
                                }
                                if(shape.hours != null && shape.hours.length > 0)
                                    hours += parseInt(shape.hours);
                                if(shape.minutes != null && shape.minutes.length > 0)
                                    minutes += parseInt(shape.minutes);




                                if(shape.days.length == 0)
                                    shape.days = 0;

                                if(shape.hours.length == 0)
                                    shape.hours = 0;

                                if(shape.minutes == 0)
                                    shape.minutes = 0;

                            }

                            var waitDecimal = parseInt(shape.days) + (parseInt(shape.hours) / 24) + (parseInt(shape.minutes) / 24 / 60);
                            shape.wait_time = waitDecimal;

                        }
                        else
                        {
                            throw Validation.errorMessage;
                        }
                        break;
                    }

            }
            shape.isConfigured = true;
        }
        function showOverlays() {
            document.getElementById('myLeftDivOverlay').style.visibility = 'visible';
            document.getElementById('myCenterDivOverlay').style.visibility = 'visible';
        }
        function showRightOverlay()
        {
            document.getElementById('myRightDivOverlay').style.visibility = 'visible';
        }
        function clearOverlays() {
            document.getElementById('myLeftDivOverlay').style.visibility = 'hidden';
            document.getElementById('myCenterDivOverlay').style.visibility = 'hidden';
        }
        function clearRightOverlay(){
            document.getElementById('myRightDivOverlay').style.visibility = 'hidden';
        }

        function deleteDiagram() {
            myDiagram.clear();
            myDiagram.nodes.reset();
            lastItemSelected = null;
            newItemSelected = null;
            drawInit();
        }
        $("#splitter").kendoSplitter({
            panes: [
                { collapsible: true, size: "15%" },
                { collapsible: false, scrollable: false },
                { collapsible: true, size: "30%" }
            ]
        });

        function initDiagram() {
            if (diagram.shapes.length == 0) {
                paletteClear();
                propsClear();
                drawInit();
            }
            else
                diagram.select(diagram.shapes[0]);
        }
        function drawInit() {
            //fadeInControl('#Start');
            var item = {type:"rectangle",width:140,height:40,category:"Start",subcategory:"Start",fill:"#FFFFFF",content:{text:"Start",fontSize:16,color:"#142a52"},x:220,y:40};
            var shapeItem = new kendo.dataviz.diagram.Shape(item);
            shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                source: "../../Images/GreenBox.png",
                x:0,
                y:0,
                width:140,
                height:40
            }));
            shapeItem.visual.append(new kendo.dataviz.diagram.Image({
                source: "../../Images/Green_Start.png",
                x:-15,
                y:5,
                width:30,
                height:30
            }));

            var tb = new kendo.dataviz.diagram.TextBlock({
                text: "Start",
                x: 15,
                y: 5,
                color: "#000",
                fontSize:14,
                fontWeight:600
            });
            shapeItem.visual.append(tb);

            diagram.addShape(shapeItem);
            newItemSelected = diagram.shapes.length - 1;
            diagram.save();
            diagram.select(diagram.shapes[newItemSelected]);
        }
        function fadeInControl(control) {
            $(control).removeAttr("style")
            //$(control).css("opacity", "1");
            //$(control).css("height", "40px");
            //$(control).css("width", "120px");
            //$(control).css("margin", "10px");
        }
        function fadeInProp(prop) {
            $(prop).removeAttr("style")
        }

        function disablePanelBar(panelDisable, canEdit)
        {
            var panelBar = $("#shapesPanelBar").data("kendoPanelBar");

            if(panelDisable == "GroupEmail")
            {
                panelBar.enable($("#pb_GroupEmail"), true);
                panelBar.collapse($("#pb_GroupEmail"));
                panelBar.enable($("#pb_GroupEmail"), false);

            }
            else if(panelDisable == "DirectEmail")
            {
                panelBar.enable($("#pb_DirectEmail"), true);
                panelBar.collapse($("#pb_DirectEmail"));
                panelBar.enable($("#pb_DirectEmail"), false);

            }
            else if(panelDisable == "Start")
            {
                panelBar.enable($("#pb_Start"), true);
                panelBar.collapse($("#pb_Start"));
                panelBar.enable($("#pb_Start"), false);

            }
            else if(panelDisable == "Other")
            {
                panelBar.enable($("#pb_Other"), true);
                panelBar.collapse($("#pb_Other"));
                panelBar.enable($("#pb_Other"), false);

            }
        }

        function enablePanelBar(panelEnable, canEdit)
        {

            var panelBar = $("#shapesPanelBar").data("kendoPanelBar");

            if(panelEnable == "GroupEmail")
            {
                panelBar.enable($("#pb_GroupEmail"), canEdit);
                setTimeout(function(){
                    panelBar.expand($("#pb_GroupEmail"));
                },50);


                $("#pb_GroupEmail > .k-content").show();


            }
            else if(panelEnable == "DirectEmail")
            {
                panelBar.enable($("#pb_DirectEmail"), canEdit);
                setTimeout(function(){
                    panelBar.expand($("#pb_DirectEmail"));
                },50);

                $("#pb_DirectEmail > .k-content").show();
            }
            else if(panelEnable == "Start")
            {
                panelBar.enable($("#pb_Start"), canEdit);
                setTimeout(function(){
                    panelBar.expand($("#pb_Start"));
                },50);

                $("#pb_Start > .k-content").show();

            }
            else if(panelEnable == "Other")
            {
                panelBar.enable($("#pb_Other"), canEdit);
                setTimeout(function(){
                    panelBar.expand($("#pb_Other"));
                },50);

                $("#pb_Other > .k-content").show();
            }

        }

        function getParent(shape)
        {
            var traceShape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (shape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        tracer = false;
                        break;
                    }
                }
                tracer = false;
            }
            return traceShape;
        }

        function traceGroupOptions(shape) {
            var traceShape = shape;
            var grpOptions ='';
            var tracer = true;
            var option ='';
            var count =0;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (traceShape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        for (var j = 0; j < diagram.connections.length; j++) {
                            var tempShape = diagram.connections[j].to.options;
                            if (!tempShape.isCancelled && tempShape.category == "Unsubscribe") {
                                count = count+1;
                                option = tempShape.category;
                                tracer = false;
                            }

                        }
                    }
                }
                tracer = false;
            }
            return count;
        }

        function traceCustomerId(shape) {
            var customerId = null;
            var traceShape = shape;
            var tracer = true;
            while (tracer){
                for (var i = 0; i < diagram.connections.length; i++) {
                    if (traceShape.id == diagram.connections[i].to.id) {
                        traceShape = diagram.connections[i].from.options;
                        if (traceShape.category == "CampaignItem" || traceShape.category == "Group") {
                            customerId = traceShape.customerid;
                            tracer = false
                        }
                    }
                }
            }
            return customerId;
        }

        function traceLayoutID(shape)
        {
            var traceShape = shape;
            var lastShapeIndex = 0;
            var lastConnectorIndex = 0;
            var message ={
                messageID:0,
                messageName:''
            };
            var tracer = true;
            for (var i = 0; i < diagram.shapes.length; i++) {
                if (diagram.shapes[i].id == shape.id) {
                    lastShapeIndex = i;
                    break;
                }
            }
            var toConn = diagram.shapes[lastShapeIndex].connections("in");
            for (var i = 0; i < diagram.connections.length; i++) {
                if (diagram.connections[i].id == toConn[0].id) {
                    lastConnectorIndex = i;
                    break;
                }
            }
            while(tracer)
            {
                traceShape = diagram.connections[lastConnectorIndex].from.options;
                if(traceShape.category != "Wait")
                {
                    message.messageID = traceShape.messageId;
                    message.messageName = traceShape.message;
                    tracer = false;
                }
                else
                {
                    for (var i = 0; i < diagram.shapes.length; i++) {
                        if (diagram.shapes[i].id == traceShape.id) {
                            lastShapeIndex = i;
                            break;
                        }
                    }
                    toConn = diagram.shapes[lastShapeIndex].connections("in");

                    for (var i = 0; i < diagram.connections.length; i++) {
                        if (diagram.connections[i].id == toConn[0].id) {
                            lastConnectorIndex = i;
                            break;
                        }
                    }
                }

            }
            //while (tracer){
            //    for (var i = 0; i < diagram.connections.length; i++) {
            //        if(diagram.connections[i].from.options.category == "CampaignItem")
            //        {
            //            if (traceShape.id == diagram.connections[i].to.id) {
            //                traceShape = diagram.connections[i].from.options;

            //                if (traceShape.category == "CampaignItem") {
            //                    message.messageID = traceShape.messageId;
            //                    message.messageName = traceShape.message;
            //                    tracer = false;
            //                    break;
            //                }
            //            }
            //        }
            //        else if(diagram.connections[i].from.options.category == "Wait")
            //        {
            //            traceShape = diagram.connections[i].to.options;
            //        }
            //    }
            //    tracer = false;
            //}
            return message;
        }
        function traceFormID(shape)
        {
            var traceShape = shape;
            var lastShapeIndex = 0;
            var lastConnectorIndex = 0;
            var form ={
                formID:0,
                formName:'',
                link: ""
            };
            var tracer = true;
            for (var i = 0; i < diagram.shapes.length; i++) {
                if (diagram.shapes[i].id == shape.id) {
                    lastShapeIndex = i;
                    break;
                }
            }
            var toConn = diagram.shapes[lastShapeIndex].connections("in");
            for (var i = 0; i < diagram.connections.length; i++) {
                if (diagram.connections[i].id == toConn[0].id) {
                    lastConnectorIndex = i;
                    break;
                }
            }
            while(tracer)
            {
                traceShape = diagram.connections[lastConnectorIndex].from.options;
                if(traceShape.category != "Wait")
                {
                    form.formID = traceShape.formId;
                    form.formName = traceShape.formname;
                    form.link = traceShape.link;
                    tracer = false;
                }
                else
                {
                    for (var i = 0; i < diagram.shapes.length; i++) {
                        if (diagram.shapes[i].id == traceShape.id) {
                            lastShapeIndex = i;
                            break;
                        }
                    }
                    toConn = diagram.shapes[lastShapeIndex].connections("in");

                    for (var i = 0; i < diagram.connections.length; i++) {
                        if (diagram.connections[i].id == toConn[0].id) {
                            lastConnectorIndex = i;
                            break;
                        }
                    }
                }

            }
            return form;
        }
        function traceSendTime(shape)
        {
            try
            {
                var parentSendTime;
                var days = 0;
                var hours = 0;
                var minutes = 0;
                var traceShape = shape;
                var tracer = true;
                while (tracer){
                    for (var i = 0; i < diagram.connections.length; i++) {
                        if (traceShape.id == diagram.connections[i].to.id) {
                            traceShape = diagram.connections[i].from.options;

                            if (traceShape.category == "Wait") {

                                if(traceShape.days!= null)
                                    days += parseInt(traceShape.days);
                                if(traceShape.hours!= null)
                                    hours += parseInt(traceShape.hours);
                                if(traceShape.minutes!= null)
                                    minutes += parseInt(traceShape.minutes);
                                tracer = false;
                                break;
                            }
                        }
                    }
                    tracer = false;
                }

                tracer = true;
                //traceShape = shape;
                while(tracer)
                {
                    for (var i = 0; i < diagram.connections.length; i++) {

                        if (traceShape.id == diagram.connections[i].to.id) {
                            traceShape = diagram.connections[i].from.options;

                            if (traceShape.category == "CampaignItem") {
                                parentSendTime = traceShape.schedule;
                                tracer = false;
                                break;
                            }
                            else if (traceShape.category == "Form"  ) {
                                var traceFormCI = getParent(traceShape);
                                if(traceFormCI.category == "CampaignItem")
                                {
                                    parentSendTime = traceFormCI.schedule;
                                }
                                else
                                {
                                    var tSendTime =traceSendTime(traceFormCI);
                                    parentSendTime =  (tSendTime.getMonth() + 1) + "/" + tSendTime.getDate() + "/" + tSendTime.getFullYear() + " " + tSendTime.getHours() + ":"+ tSendTime.getMinutes()+ ":" + tSendTime.getSeconds();
                                }
                                tracer = false;
                                break;
                            }
                            else{
                                //Control isn't campaign item so have to keep going up to get parent send time
                                var tempSendTime =traceSendTime(traceShape);

                                parentSendTime =  (tempSendTime.getMonth() + 1) + "/" + tempSendTime.getDate() + "/" + tempSendTime.getFullYear() + " " + tempSendTime.getHours() + ":"+ tempSendTime.getMinutes()+ ":" + tempSendTime.getSeconds();
                            }

                        }

                    }
                    tracer = false;
                }

                if(parentSendTime != "Invalid Date" && parentSendTime != "" && parentSendTime != undefined)
                {
                    var IsISOFormat = parentSendTime.search('T');
                    if(IsISOFormat > 0)
                        var parentDate = new Date(parseIsoDatetime(parentSendTime));
                    else
                        var parentDate = new Date(parentSendTime);
                    var parentyear = parentDate.getFullYear();
                    var parentmonth = parentDate.getMonth()
                    var parentdays = parentDate.getDate();
                    var parenthours = parentDate.getHours();
                    var parentminutes =parentDate.getMinutes();
                    var parentseconds = parentDate.getSeconds();

                    if(parentdays != null && parentdays > 0)
                    {
                        days += parseInt(parentdays);
                    }
                    if(parenthours != null && parenthours > 0)
                        hours += parseInt(parenthours);
                    if(parentminutes != null && parentminutes > 0)
                        minutes += parseInt(parentminutes);

                    var waitDate = new Date(parentyear,parentmonth,days, hours, minutes,parentseconds,0);


                    return waitDate;
                }
                else
                {return null;}
            }
            catch(error)
            {
                return null;
            }
        }

        // Save Popup
        SaveDialog = $("#SaveDialog");
        SaveDialogWindow = SaveDialog.data("kendoWindow");
        $(".navigationLink").click(function (e) {
            e.preventDefault();
            var modelState = '@Model.State.ToString()';
            var currentDate = new Date();
            var modelEndDate = new Date('@Model.EndDate.ToShortDateString()');
            if(modelState == 'Published' && modelEndDate < currentDate )
            {
                modelState = 'Completed'
            }
            CanvasSave =0;
            editMode(modelState);
            SaveDialog.data("address", this.href);
            var saveButton = $("#SaveAutomation");
            SaveDialog.data("saveButton", saveButton);
            SaveDialogWindow.center().open();
        });

        // Window close
        //window.addEventListener("beforeunload", function (e) {
        //    var confirmationMessage = "\o/";

        //    (e || window.event).returnValue = confirmationMessage; //Gecko + IE
        //    return confirmationMessage;                            //Webkit, Safari, Chrome
        //});
    });

    // PopupWindow
    function popupWindow(title, action) {
        var window = $("#PopupWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '');
        kendoWindow.title(title);
        $("#PopupContent").load('/ecn.MarketingAutomation/Diagrams/' + action, null, function () {
            if(title != '')
                window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }

    // Save
    function saveAndMove() {
        SaveDialogWindow.close();
        var saveButton = SaveDialog.data("saveButton");
        //saveButton.trigger("click");
        // location.href = SaveDialog.data("address");
        saveAutomation();
    }
    function notSaveAndMove() {
        SaveDialogWindow.close();
        location.href = SaveDialog.data("address");
    }
    function cancelMove() {
        SaveDialogWindow.close();
    }
    //function pbExpand(e)
    //{
    //    //var panelBar = $("#shapesPanelBar").kendoPanelBar().data("kendoPanelBar");
    //    //panelBar.expand(e.item);

    //}
    function checkTime(i) {
        return (i < 10) ? "0" + i : i;
    }
    function parseIsoDatetime(dtstr) {
        var dt = dtstr.split(/[: T-]/).map(parseFloat);
        return new Date(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0, 0);
    }
</script>
