using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.UI.WebControls;
using ecn.communicator.Constants;
using ECN_Framework_Common.Objects;

namespace ecn.communicator.main.lists
{
    public partial class groupsubscribePrePopSF : ECN_Framework.WebPageHelper 	
    {
        public event EventHandler OnLinkItemAdded;
        List<ECN_Framework_Entities.Communicator.SmartFormsPrePopFields> smartFormsPrePopFieldsList = new List<ECN_Framework_Entities.Communicator.SmartFormsPrePopFields>();

        public int GroupId
        {
            get
            {
                return RequestQueryString(QueryStringKeys.GroupId, default(int));
            }
        }

        public int SFID
        {
            get
            {
                return RequestQueryString(QueryStringKeys.SFID, default(int));
            }
        }

        public string RequestedAction
        {
            get
            {
                return RequestQueryString(QueryStringKeys.Action, string.Empty);
            }
        }

        public int ChannelId
        {
            get
            {
                return RequestQueryString(QueryStringKeys.ChannelId, default(int));
            }
        }

        public int CustomerId
        {
            get
            {
                return RequestQueryString(QueryStringKeys.CustomerId, default(int));
            }
        }

        private void setECNError(ECNException ecnException)
        {
            phError.Visible = true;
            lblErrorMessage.Text = "";
            foreach (ECN_Framework_Common.Objects.ECNError ecnError in ecnException.ErrorList)
            {
                lblErrorMessage.Text = lblErrorMessage.Text + "<br/>" + ecnError.Entity + ": " + ecnError.ErrorMessage;
            }
        }

        protected void Page_Load(object sender, System.EventArgs e)
        {
            phError.Visible = false;
            Master.CurrentMenuCode = ECN_Framework_Common.Objects.Communicator.Enums.MenuCode.GROUPS; 
            Master.SubMenu = "";
            Master.Heading = "";
            Master.HelpContent = "<img align='right' src=/ecn.images/images/icogroups.gif><b>Group Subscribe</b><br />Just copy and paste the code that is in the Text Box in your Newsletter to enable the Subscribe and UnSubscribes from the users who receive your Newsletter.</p><p>Check Boxes agint ";
            Master.HelpTitle = "Groups Manager";	

            PrePopSFDetails_Panel.Collapsed = false;

            if (ECN_Framework_BusinessLayer.Accounts.Customer.HasProductFeature(Master.UserSession.CurrentUser.CustomerID, KMPlatform.Enums.Services.EMAILMARKETING, KMPlatform.Enums.ServiceFeatures.SmartFormsPrePop))
            {
				msglabel.Visible = false;
				PrePopSmartFormPanel.Visible = true;

                //if (KMPlatform.BusinessLogic.User.HasPermission(Master.UserSession.CurrentUser.UserID,  "grouppriv") || KM.Platform.User.IsAdministrator(Master.UserSession.CurrentUser))
                if (KM.Platform.User.IsSystemAdministrator(Master.UserSession.CurrentUser))
                {
					var requestGroupID = GroupId;
					var requestSFID = SFID;
					var requestAction = RequestedAction;
					var channelID = ChannelId;
					var custID = CustomerId;
				
					AddPrePopSFLink.NavigateUrl = "groupsubscribePrePopSF.aspx?GroupID="+requestGroupID+"&chID="+channelID+"&cuID="+custID+"&action=NEW";
					if(requestAction.Equals("NEW")){
						PrePopSFDetails_Panel.Collapsed	= false;		
						SO_Save.Visible		= false;
						SO_New.Visible		= true;
					}else{
						PrePopSFDetails_Panel.Collapsed	= false;	
					}

					if(!Page.IsPostBack){
						if(requestSFID > 0){
							if(requestAction.Equals("DELETE")){
								DeleteSmartForm(requestSFID);
								Response.Redirect("groupsubscribePrePopSF.aspx?GroupID="+requestGroupID+"&chID="+channelID+"&cuID="+custID, true);
							}else{
								SFFieldsLBL.Visible = true;
								LoadSmartFormData(requestSFID);	
								LoadPrePopProfileFieldsDT(requestSFID);
								BuildPrePopProfileFieldsGrid();
								PrePopSFDetails_Panel.Collapsed	= false;
								SO_Save.Visible		= true;
								SO_Save.Enabled	= true;
								SO_New.Visible		= false;
							}
						}
					}
					LoadSmartFormGrid(requestGroupID);	
				}else{
					Response.Redirect("../default.aspx");
				}
			}else{
				PrePopSmartFormPanel.Visible = false;
				msglabel.Visible = true;
				msglabel.Text = "<br><br>Pre-Pop smartForms is an advanced ECN feature that allows you to create smartForms which are automatically pre populated for the user. The script generated by these smartForms can be hosted anywhere on your website.<br><br>If you are interested in this feature, please contact our Customer Service Department at 1-866-844-6275.";		
			}
		}

		#region Load PrePop SFs List
		private void LoadSmartFormGrid(int groupID)
        {
			string chID = Request.QueryString["chID"].ToString();
			string cuID = Request.QueryString["cuID"].ToString();
            List<ECN_Framework_Entities.Communicator.SmartFormsHistory> smartFormHistoryList = ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.GetByGroupID(groupID, Master.UserSession.CurrentUser);

            var result = (from src in smartFormHistoryList
                         where src.Type == "PPSO"
                         select new
                         {
                             SmartFormID = "SFID=" + src.SmartFormID + "&GroupID=" + groupID+"&chID="+chID+"&cuID="+cuID,
                             DelSmartFormID= src.SmartFormID,
                             RespParams= "GroupID = "+groupID+" & chID = "+chID+" & cuID = "+cuID,
                             SmartFormName= src.SmartFormName
                         }).ToList();
            SmartFormGrid.DataSource = result;
			SmartFormGrid.DataBind();
            GridPager.RecordCount = result.Count;
		}
		#endregion

		#region Load Pre Pop SF details
		private void LoadSmartFormData(int smartFormID)
        {
            var smartFormHistory = ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.GetBySmartFormID(smartFormID,GroupId, Master.UserSession.CurrentUser);
            smartFormName.Text = smartFormHistory.SmartFormName;
            Response_UserMsgSubject.Text = smartFormHistory.Response_UserMsgSubject;
            Response_UserMsgBody.Text = smartFormHistory.Response_UserMsgBody;
            Response_UserScreen.Text = smartFormHistory.Response_UserScreen;
            Response_FromEmail.Text = smartFormHistory.Response_FromEmail;
            Response_AdminEmail.Text = smartFormHistory.Response_AdminEmail;
            Response_AdminMsgSubject.Text = smartFormHistory.Response_AdminMsgSubject;
            Response_AdminMsgBody.Text = smartFormHistory.Response_AdminMsgBody;
		}
		#endregion

		#region Load Pre Pop Field Methods
        private void LoadPrePopProfileFieldsDT(int smartFormID)
        {
            smartFormsPrePopFieldsList = ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.GetBySFID(smartFormID, Master.UserSession.CurrentUser);
		}

		private void BuildPrePopProfileFieldsGrid()
        {
            PrePopProfileFieldsList.DataSource = smartFormsPrePopFieldsList;
			PrePopProfileFieldsList.DataBind();
		}

		private DropDownList LoadProfileFieldNameDR(DropDownList DRList)
        {
            var dataTable = ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.GetColumnNames(SFID, GroupId);
            DRList.DataSource = dataTable;
			DRList.DataBind();			
			DRList.Items.Remove("EmailID");
			DRList.Items.Remove("CustomerID");
			DRList.Items.Remove("Password");
			DRList.Items.Remove("BounceScore");
			DRList.Items.Remove("DateAdded");
			DRList.Items.Remove("DateUpdated");
			return DRList;
		}
		#endregion

		#region SmartForm Button Click Events 
		protected void SO_New_Click(object sender, System.EventArgs e) 
        {
            try
            {
                var smartFormsHistory = new ECN_Framework_Entities.Communicator.SmartFormsHistory();
                smartFormsHistory.GroupID = GroupId;
                smartFormsHistory.CustomerID = Master.UserSession.CurrentCustomer.CustomerID;
                smartFormsHistory.CreatedUserID = Master.UserSession.CurrentUser.UserID;
                smartFormsHistory.SmartFormName = this.smartFormName.Text.ToString();
                smartFormsHistory.Response_UserMsgSubject = Response_UserMsgSubject.Text.ToString();
                smartFormsHistory.Response_UserMsgBody = Response_UserMsgBody.Text.ToString();
                smartFormsHistory.Response_UserScreen = Response_UserScreen.Text.ToString();
                smartFormsHistory.Response_FromEmail = Response_FromEmail.Text.ToString();
                smartFormsHistory.Response_AdminEmail = Response_AdminEmail.Text.ToString();
                smartFormsHistory.Response_AdminMsgSubject = Response_AdminMsgSubject.Text.ToString();
                smartFormsHistory.Response_AdminMsgBody = Response_AdminMsgBody.Text.ToString();
                smartFormsHistory.Type = "PPSO";
                ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.Save(smartFormsHistory, Master.UserSession.CurrentUser);

                ECN_Framework_Entities.Communicator.SmartFormsPrePopFields smartFormsPrePopFields = new ECN_Framework_Entities.Communicator.SmartFormsPrePopFields();
                smartFormsPrePopFields.SFID = smartFormsHistory.SmartFormID;
                smartFormsPrePopFields.CreatedUserID = Master.UserSession.CurrentUser.UserID;
                smartFormsPrePopFields.CustomerID = Master.UserSession.CurrentCustomer.CustomerID;
                smartFormsPrePopFields.ProfileFieldName = "EmailAddress";
                smartFormsPrePopFields.DisplayName = "EmailAddress";
                smartFormsPrePopFields.DataType = "TEXT";
                smartFormsPrePopFields.ControlType = "TEXT";
                smartFormsPrePopFields.DataValues = "";
                smartFormsPrePopFields.Required = "Y";
                smartFormsPrePopFields.PrePopulate = "Y";
                smartFormsPrePopFields.SortOrder = 1;
                ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.Save(smartFormsPrePopFields, Master.UserSession.CurrentUser);
                SO_Save.Enabled = false;
                SO_New.Enabled = true;
                ClearSO_Fields();
                LoadSmartFormGrid(GroupId);
                Response.Redirect("groupsubscribePrePopSF.aspx?SFID=" + smartFormsHistory.SmartFormID + "&GroupID=" + GroupId + "&chID=" + ChannelId + "&cuID=" + CustomerId);
            }
            catch (ECNException ex)
            {
                setECNError(ex);
            }
		}

		protected void SO_Save_Click(object sender, System.EventArgs e)
        {
            try
            {
                var smartformhistory = ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.GetBySmartFormID(SFID, GroupId, Master.UserSession.CurrentUser);
                smartformhistory.SmartFormName = this.smartFormName.Text.ToString();
                smartformhistory.UpdatedUserID = Master.UserSession.CurrentUser.UserID;
                smartformhistory.CustomerID = Master.UserSession.CurrentCustomer.CustomerID;
                smartformhistory.Response_UserMsgSubject = Response_UserMsgSubject.Text.ToString();
                smartformhistory.Response_UserMsgBody = Response_UserMsgBody.Text.ToString();
                smartformhistory.Response_UserScreen = Response_UserScreen.Text.ToString();
                smartformhistory.Response_FromEmail = Response_FromEmail.Text.ToString();
                smartformhistory.Response_AdminEmail = Response_AdminEmail.Text.ToString();
                smartformhistory.Response_AdminMsgSubject = Response_AdminMsgSubject.Text.ToString();
                smartformhistory.Response_AdminMsgBody = Response_AdminMsgBody.Text.ToString();
                ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.Save(smartformhistory, Master.UserSession.CurrentUser);
                Response.Redirect("groupsubscribePrePopSF.aspx?GroupID=" + GroupId + "&chID=" + ChannelId + "&cuID=" + CustomerId, true);
            }
            catch (ECNException ex)
            {
                setECNError(ex);
            }
		}

		private void ClearSO_Fields()
        {
			smartFormName.Text = "";
			Response_FromEmail.Text = "";
			Response_UserMsgSubject.Text = "";
			Response_UserMsgBody.Text = "";
			Response_UserScreen.Text = "";
			Response_AdminEmail.Text = "";
			Response_AdminMsgSubject.Text = "";
			Response_AdminMsgBody.Text = "";
		}

		private void DeleteSmartForm(int SFID)
        {
            try
            {
                ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.Delete(SFID, Master.UserSession.CurrentUser);
                ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.Delete(SFID, Master.UserSession.CurrentUser);
            }
            catch (ECNException ex)
            {
                setECNError(ex);
            }
		}
		#endregion

		#region Other Smart Form ButtonClick Events
		private void SmartFormButton_Click(object sender, EventArgs e) 
        {
			Response.Redirect("groupsubscribe.aspx?GroupID="+GroupId+"&chID="+ChannelId+"&cuID="+CustomerId, true);
		}
		#endregion

		#region SmartForm Fields DataList Events
		private void PrePopProfileFieldsList_ItemDataBound(object sender, System.Web.UI.WebControls.DataListItemEventArgs e)
        {
			
			if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
				LinkButton delete = e.Item.FindControl("PrePopFieldDelete") as LinkButton;
				delete.Attributes.Add("onclick", "return confirm('LINK ID: "+(int) PrePopProfileFieldsList.DataKeys[(int)e.Item.ItemIndex]+" - Are you sure that you want to delete this Tracking Link ?')");
				return;
			}

			if (e.Item.ItemType == ListItemType.Footer) 
            {
				DropDownList Add_ProfileFieldNameDR = e.Item.FindControl("Add_ProfileFieldNameDR") as DropDownList;
				Add_ProfileFieldNameDR = LoadProfileFieldNameDR(Add_ProfileFieldNameDR);
			}

			if (e.Item.ItemType == ListItemType.EditItem)
            {
				DropDownList Edit_ProfileFieldNameDR	= e.Item.FindControl("Edit_ProfileFieldNameDR") as DropDownList;
				Edit_ProfileFieldNameDR							= LoadProfileFieldNameDR(Edit_ProfileFieldNameDR);
				TextBox Edit_DisplayNameTXT					= e.Item.FindControl("Edit_DisplayNameTXT") as TextBox;
				DropDownList Edit_DataTypeDR				= e.Item.FindControl("Edit_DataTypeDR") as DropDownList;
				DropDownList Edit_ControlTypeDR			= e.Item.FindControl("Edit_ControlTypeDR") as DropDownList;
				TextBox Edit_DataValuesTXT					= e.Item.FindControl("Edit_DataValuesTXT") as TextBox;
				CheckBox Edit_RequiredCHKBX				= e.Item.FindControl("Edit_RequiredCHKBX") as CheckBox;
				CheckBox Edit_PrePopulateCHKBX			= e.Item.FindControl("Edit_PrePopulateCHKBX") as CheckBox;
				TextBox Edit_SortOrderTXT						= e.Item.FindControl("Edit_SortOrderTXT") as TextBox;
                ECN_Framework_Entities.Communicator.SmartFormsPrePopFields smartFormsPrePopFields= ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.GetByPrePopFieldID((int) PrePopProfileFieldsList.DataKeys[(int)e.Item.ItemIndex], Master.UserSession.CurrentUser);

                string drSelectedItem = smartFormsPrePopFields.ProfileFieldName;
				Edit_ProfileFieldNameDR.Items.Add(new ListItem(drSelectedItem, drSelectedItem));
				Edit_ProfileFieldNameDR.SelectedValue	= drSelectedItem;
                Edit_DisplayNameTXT.Text = smartFormsPrePopFields.DisplayName;
                Edit_DataTypeDR.SelectedValue = smartFormsPrePopFields.DataType;
                Edit_ControlTypeDR.SelectedValue = smartFormsPrePopFields.ControlType;
                Edit_DataValuesTXT.Text = smartFormsPrePopFields.DataValues;
				Edit_RequiredCHKBX.Checked					= smartFormsPrePopFields.Required.Equals("Y")?true:false;
                Edit_PrePopulateCHKBX.Checked = smartFormsPrePopFields.PrePopulate.Equals("Y") ? true : false;
                Edit_SortOrderTXT.Text = smartFormsPrePopFields.SortOrder.ToString();
			}
		}

		private void PrePopProfileFieldsList_ItemCommand(object source, System.Web.UI.WebControls.DataListCommandEventArgs e) 
        {
			switch (e.CommandName)
            {
				case "Edit":
					PrePopProfileFieldsList.EditItemIndex = e.Item.ItemIndex;
					break;
				case "Update":
					DropDownList Edit_ProfileFieldNameDR	= e.Item.FindControl("Edit_ProfileFieldNameDR") as DropDownList;
					TextBox Edit_DisplayNameTXT					= e.Item.FindControl("Edit_DisplayNameTXT") as TextBox;
					DropDownList Edit_DataTypeDR				= e.Item.FindControl("Edit_DataTypeDR") as DropDownList;
					DropDownList Edit_ControlTypeDR			= e.Item.FindControl("Edit_ControlTypeDR") as DropDownList;
					TextBox Edit_DataValuesTXT					= e.Item.FindControl("Edit_DataValuesTXT") as TextBox;
					CheckBox Edit_RequiredCHKBX				= e.Item.FindControl("Edit_RequiredCHKBX") as CheckBox;
					CheckBox Edit_PrePopulateCHKBX			= e.Item.FindControl("Edit_PrePopulateCHKBX") as CheckBox;
					TextBox Edit_SortOrderTXT						= e.Item.FindControl("Edit_SortOrderTXT") as TextBox;

					string fieldName		= Edit_ProfileFieldNameDR.SelectedValue.ToString();
					string displayName	= Edit_DisplayNameTXT.Text.ToString().Replace("'","");
					string dataType		= Edit_DataTypeDR.SelectedValue.ToString();
					string controlType	= Edit_ControlTypeDR.SelectedValue.ToString();
					string dataValues		= Edit_DataValuesTXT.Text.ToString().Replace("'","");
					dataValues				= dataValues.Replace(",","");
					dataValues				= dataValues.Replace("'","");
					string required	= "N", prePopulate = "N";
					if(Edit_RequiredCHKBX.Checked){
						required	= "Y";
					}
					if(Edit_PrePopulateCHKBX.Checked){
						prePopulate	= "Y";
					}
					string order	= Edit_SortOrderTXT.Text.ToString().Replace("'","");
                    try
                    {
                        int PrePopFieldID = (int)PrePopProfileFieldsList.DataKeys[(int)e.Item.ItemIndex];
                        ECN_Framework_Entities.Communicator.SmartFormsPrePopFields smartFormsPrePopFields = ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.GetByPrePopFieldID(PrePopFieldID, Master.UserSession.CurrentUser);
                        smartFormsPrePopFields.ProfileFieldName = fieldName;
                        smartFormsPrePopFields.CustomerID = Master.UserSession.CurrentCustomer.CustomerID;
                        smartFormsPrePopFields.UpdatedUserID = Master.UserSession.CurrentUser.UserID;
                        smartFormsPrePopFields.DisplayName = displayName;
                        smartFormsPrePopFields.DataType = dataType;
                        smartFormsPrePopFields.ControlType = controlType;
                        smartFormsPrePopFields.DataValues = dataValues;
                        smartFormsPrePopFields.Required = required;
                        smartFormsPrePopFields.PrePopulate = prePopulate;
                        smartFormsPrePopFields.SortOrder = Convert.ToInt32(order);
                        ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.Save(smartFormsPrePopFields, Master.UserSession.CurrentUser);
                        PrePopProfileFieldsList.EditItemIndex = -1;
                        FireItemChangeEvent();
                    }
                    catch (ECNException ex)
                    {
                        setECNError(ex);
                    }
					break;
				case "Cancel":
					PrePopProfileFieldsList.EditItemIndex = -1;
					break;
				case "Delete":
                    try
                    {
                        int fieldID = (int)PrePopProfileFieldsList.DataKeys[(int)e.Item.ItemIndex];
                        ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.Delete(SFID, fieldID, Master.UserSession.CurrentUser);
                        FireItemChangeEvent();
                    }
                    catch (ECNException ex)
                    {
                        setECNError(ex);
                    }
					break;
			}
			LoadPrePopProfileFieldsDT(SFID);
			BuildPrePopProfileFieldsGrid();
			if(e.CommandName.ToString().Equals("Update") || e.CommandName.ToString().Equals("Delete") || e.CommandName.ToString().Equals(""))
            {
				RefreshSmartFormCode(SFID);
			}
		}

		protected void ProfileFieldAdd_Click(object sender, System.EventArgs e) 
        {	
			LinkButton btn = sender as LinkButton;
			DropDownList Add_ProfileFieldNameDR	= btn.Parent.FindControl("Add_ProfileFieldNameDR") as DropDownList;
			TextBox Add_DisplayNameTXT					= btn.Parent.FindControl("Add_DisplayNameTXT") as TextBox;
			DropDownList Add_DataTypeDR				= btn.Parent.FindControl("Add_DataTypeDR") as DropDownList;
			DropDownList Add_ControlTypeDR			= btn.Parent.FindControl("Add_ControlTypeDR") as DropDownList;
			TextBox Add_DataValuesTXT					= btn.Parent.FindControl("Add_DataValuesTXT") as TextBox;
			CheckBox Add_RequiredCHKBX				= btn.Parent.FindControl("Add_RequiredCHKBX") as CheckBox;
			CheckBox Add_PrePopulateCHKBX			= btn.Parent.FindControl("Add_PrePopulateCHKBX") as CheckBox;
			TextBox Add_SortOrderTXT						= btn.Parent.FindControl("Add_SortOrderTXT") as TextBox;

			string fieldName		= Add_ProfileFieldNameDR.SelectedValue.ToString();
			string displayName	= Add_DisplayNameTXT.Text.ToString().Replace("'","");
			string dataType		= Add_DataTypeDR.SelectedValue.ToString();
			string controlType	= Add_ControlTypeDR.SelectedValue.ToString();
			string dataValues		= Add_DataValuesTXT.Text.ToString().Replace("'","");
			dataValues				= dataValues.Replace(",","");
			dataValues				= dataValues.Replace("'","");
			string required	= "N", prePopulate = "N";
			if(Add_RequiredCHKBX.Checked){
				required	= "Y";
			}
			if(Add_PrePopulateCHKBX.Checked){
				prePopulate	= "Y";
			}
			string order	= Add_SortOrderTXT.Text.ToString();
            try
            {
                var smartFormsPrePopFields = new ECN_Framework_Entities.Communicator.SmartFormsPrePopFields();
                smartFormsPrePopFields.SFID = SFID;
                smartFormsPrePopFields.ProfileFieldName = fieldName;
                smartFormsPrePopFields.CustomerID = Master.UserSession.CurrentCustomer.CustomerID;
                smartFormsPrePopFields.CreatedUserID = Master.UserSession.CurrentUser.UserID;
                smartFormsPrePopFields.DisplayName = displayName;
                smartFormsPrePopFields.DataType = dataType;
                smartFormsPrePopFields.ControlType = controlType;
                smartFormsPrePopFields.DataValues = dataValues;
                smartFormsPrePopFields.Required = required;
                smartFormsPrePopFields.PrePopulate = prePopulate;
                smartFormsPrePopFields.SortOrder = Convert.ToInt32(order);
                ECN_Framework_BusinessLayer.Communicator.SmartFormsPrePopFields.Save(smartFormsPrePopFields, Master.UserSession.CurrentUser);
            }
            catch (ECNException ex)
            {
                setECNError(ex);
            }
		}

		private void FireItemChangeEvent() {
			if (OnLinkItemAdded!=null) {
				OnLinkItemAdded(this, null);
			}
		}

		private void RefreshSmartFormCode(int SFID)
        {
			Hashtable formFieldNames = new Hashtable();
			formFieldNames = populateHashtable(formFieldNames);

			var formHeader = "<FORM action="+System.Configuration.ConfigurationManager.AppSettings["Activity_DomainPath"] +"/engines/SO_subscribe.aspx>";
            var formBodyStart = "<TABLE border=\"0\"  style=\"font-family:Arial; font-size: 12px\"><TR>";
			var formBodyOtherFields = "";
			var formHiddenFields = "<TR><TD colspan=2><INPUT type=hidden value=S name=s><INPUT type=hidden value=html name=f><INPUT type=hidden value="+GroupId+" name=g><INPUT type=hidden value="+CustomerId+" name=c> <INPUT type=hidden value="+SFID+" name=sfID></TD></TR>";
			var formSubmitButton = "<TR><TD colspan=2 align='center'><INPUT type=\"submit\" value=\"Submit\" name=\"Submit\" onclick=\"javascript:return validate();\"></TD></TR>";
			var formBodyEnd = "</TR></TABLE>";
			var formFooter = "</FORM>";



            foreach (ECN_Framework_Entities.Communicator.SmartFormsPrePopFields smartFormsPrePopFields in smartFormsPrePopFieldsList)
            {
                string fieldNameTXT = smartFormsPrePopFields.ProfileFieldName;
                string fieldDisplayTXT = smartFormsPrePopFields.DisplayName;				
				formBodyOtherFields += "<TR><TD>"+fieldDisplayTXT+"</TD><TD>%%"+formFieldNames[fieldNameTXT].ToString().ToLower()+"%%</TD></TR>";
			}

			string smartFormHTML = formHeader+formBodyStart+formBodyOtherFields+formHiddenFields+formSubmitButton+formBodyEnd+formFooter;
			smartFormHTML = smartFormHTML.Replace("'", "");
            try
            {
                var smartFormsHistory = ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.GetBySmartFormID(this.SFID, GroupId, Master.UserSession.CurrentUser);
                smartFormsHistory.SmartFormHTML = smartFormHTML.ToString();
                smartFormsHistory.UpdatedUserID = Master.UserSession.CurrentUser.UserID;
                smartFormsHistory.CustomerID = Master.UserSession.CurrentUser.CustomerID;
                ECN_Framework_BusinessLayer.Communicator.SmartFormsHistory.Save(smartFormsHistory, Master.UserSession.CurrentUser);
            }
            catch (ECNException ex)
            {
                setECNError(ex);
            }
		}

		private Hashtable populateHashtable(Hashtable ht){
			ht.Clear();
			ht.Add("Title", "t");
			ht.Add("EmailAddress","e");
			ht.Add("FirstName", "fn");
			ht.Add("LastName", "ln");
			ht.Add("FullName", "n");
			ht.Add("Company", "compname");
			ht.Add("Occupation", "occ");
			ht.Add("Address", "adr");
			ht.Add("Address2", "adr2");
			ht.Add("City", "city");
			ht.Add("State", "state");
			ht.Add("Zip", "zc");
			ht.Add("Country", "ctry");
			ht.Add("Voice", "ph");
			ht.Add("Mobile", "mph");
			ht.Add("Fax", "fax");
			ht.Add("Website", "website");
			ht.Add("Age", "age");
			ht.Add("Income", "income");
			ht.Add("Gender", "gndr");
			ht.Add("User1", "usr1");
			ht.Add("User2", "usr2");
			ht.Add("User3", "usr3");
			ht.Add("User4", "usr4");
			ht.Add("User5", "usr5");
			ht.Add("User6", "usr6");
			ht.Add("Birthdate", "bdt");
			ht.Add("UserEvent1", "usrevt1");
			ht.Add("UserEvent1Date", "usrevtdt1");
			ht.Add("UserEvent2", "usrevt2");
			ht.Add("UserEvent2Date", "usrevtdt2");
            ht.Add("Notes", "notes");
            ht.Add("CarrierCode", "carriercode");
            ht.Add("SMSOptIn", "smsoptin");
           

			string sqlstmt=
				" SELECT ShortName FROM GroupDatafields "+
				" WHERE GroupID="+ GroupId;
            var groupDataFieldsList = ECN_Framework_BusinessLayer.Communicator.GroupDataFields.GetByGroupID(GroupId, Master.UserSession.CurrentUser);

            foreach (ECN_Framework_Entities.Communicator.GroupDataFields groupDataFields in groupDataFieldsList)
            {
                ht.Add("user_" + groupDataFields.ShortName, "user_" + groupDataFields.ShortName);
			}

			return ht;
		}
		#endregion

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		
		private void InitializeComponent()
		{    
			this.SmartFormButton.Click +=new EventHandler(SmartFormButton_Click);
			this.PrePopProfileFieldsList.ItemCommand += new System.Web.UI.WebControls.DataListCommandEventHandler(this.PrePopProfileFieldsList_ItemCommand);
			this.PrePopProfileFieldsList.ItemDataBound += new System.Web.UI.WebControls.DataListItemEventHandler(this.PrePopProfileFieldsList_ItemDataBound);

		}
		#endregion
       
	}
}
