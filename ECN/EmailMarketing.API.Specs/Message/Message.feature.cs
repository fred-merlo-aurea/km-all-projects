// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmailMarketing.API.Specs.Message
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Message", Description="In order to provide customized user experience\nAs an Email Marketing API consumer" +
        "\nI want to CRUD (Create, Read, Update, Delete) Message", SourceFile="Message\\Message.feature", SourceLine=0)]
    public partial class MessageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Message.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Message", "In order to provide customized user experience\nAs an Email Marketing API consumer" +
                    "\nI want to CRUD (Create, Read, Update, Delete) Message", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET an existing resource", new string[] {
                "Message_API"}, SourceLine=6)]
        public virtual void GETAnExistingResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET an existing resource", new string[] {
                        "Message_API"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("status should be \"200 OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("The HTTP Response Message should be a valid API Model object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("The API Model object should have a LayoutID property matching the given Layout ID" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("PUT an update to an existing resource", new string[] {
                "Message_API"}, SourceLine=17)]
        public virtual void PUTAnUpdateToAnExistingResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PUT an update to an existing resource", new string[] {
                        "Message_API"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("I have an existing Message Object with a LayoutID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("I generate a RandomString to append to the DisplayAddress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("I invoke PUT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("status should be \"200 OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("a Location Header should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("the Location Header should end with LayoutID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("HttpResponseContent should have DisplayAddress ending with the RandomString", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("POST a new resource", new string[] {
                "Message_API"}, SourceLine=30)]
        public virtual void POSTANewResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST a new resource", new string[] {
                        "Message_API"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
  testRunner.And("I have a new Message Object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("I invoke POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
  testRunner.And("status should be \"201 Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.And("a Location Header should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And("the Location Header should end with LayoutID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.And("HttpResponseContent should have DisplayAddress ending with the RandomString", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
  testRunner.And("I can store the Message object to test delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("DELETE a resource", new string[] {
                "Message_API"}, SourceLine=43)]
        public virtual void DELETEAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DELETE a resource", new string[] {
                        "Message_API"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("I have a deletable Message Object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("I invoke DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.And("status should be \"204 No Content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET when missing API Access Key", new string[] {
                "Message_API"}, SourceLine=52)]
        public virtual void GETWhenMissingAPIAccessKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET when missing API Access Key", new string[] {
                        "Message_API"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
   testRunner.Given("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.And("the error Message Should be \'Authentication Token Header \"APIAccessKey\" is missin" +
                    "g\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET when missing CustomerID header", new string[] {
                "Message_API"}, SourceLine=63)]
        public virtual void GETWhenMissingCustomerIDHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET when missing CustomerID header", new string[] {
                        "Message_API"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
     testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.And("the error Message Should be \'Authentication Token Header \"X-Customer-ID\" is missi" +
                    "ng\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with invalid API Access Key", new string[] {
                "Message_API"}, SourceLine=74)]
        public virtual void GETWithInvalidAPIAccessKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with invalid API Access Key", new string[] {
                        "Message_API"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
   testRunner.Given("I have an invalid API Access Key of \"TotsBogus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
     testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("the error Message Should be \'Authentication Token Header \"APIAccessKey\" is malfor" +
                    "med: TotsBogus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with invalid Customer ID header", new string[] {
                "Message_API"}, SourceLine=86)]
        public virtual void GETWithInvalidCustomerIDHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with invalid Customer ID header", new string[] {
                        "Message_API"});
#line 87
this.ScenarioSetup(scenarioInfo);
#line 88
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 89
  testRunner.And("I have a Customer ID of TotsBogus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
     testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
  testRunner.And("the error Message Should be \'Authentication Token Header \"X-Customer-ID\" is malfo" +
                    "rmed: TotsBogus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with valid but unknown API Access Key", new string[] {
                "Message_API"}, SourceLine=98)]
        public virtual void GETWithValidButUnknownAPIAccessKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with valid but unknown API Access Key", new string[] {
                        "Message_API"});
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
   testRunner.Given("I have a valid API Access Key of \"3385AEC7-3BD1-430A-A18C-54F33262636C\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
     testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("the error Message Should be \'No user with authentication token \"3385AEC7-3BD1-430" +
                    "A-A18C-54F33262636C\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with valid but unknown Customer ID header", new string[] {
                "Message_API"}, SourceLine=110)]
        public virtual void GETWithValidButUnknownCustomerIDHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with valid but unknown Customer ID header", new string[] {
                        "Message_API"});
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
  testRunner.And("I have a Customer ID of 99999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
     testRunner.And("I have an existing Layout ID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
  testRunner.And("status should be \"401 Unauthorized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
  testRunner.And("the error Message Should be \'No customer with ID \"99999\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
  testRunner.And("the error HttpStatusCode should be \'401 Unauthorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with incorrect API Access Key", new string[] {
                "Message_API"}, SourceLine=122)]
        public virtual void GETWithIncorrectAPIAccessKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with incorrect API Access Key", new string[] {
                        "Message_API"});
#line 123
this.ScenarioSetup(scenarioInfo);
#line 124
   testRunner.Given("I have a valid API Access Key of \"BF99E412-8CD7-487C-A1B3-E6AAF82E5EA3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
  testRunner.And("I have a Customer ID of 35", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
     testRunner.And("I have an existing Layout ID of 293229", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
  testRunner.And("status should be \"403 Forbidden\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
  testRunner.And("the error Message Should be \'You are not authorized to access the selected resour" +
                    "ce.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.And("the error HttpStatusCode should be \'403 Forbidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET with incorrect Customer ID header", new string[] {
                "Message_API"}, SourceLine=134)]
        public virtual void GETWithIncorrectCustomerIDHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET with incorrect Customer ID header", new string[] {
                        "Message_API"});
#line 135
this.ScenarioSetup(scenarioInfo);
#line 136
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
  testRunner.And("I have a Customer ID of 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
     testRunner.And("I have an existing Layout ID of 293229", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 140
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 141
  testRunner.And("status should be \"403 Forbidden\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
  testRunner.And("the error Message Should be \'You are not authorized to access the selected resour" +
                    "ce.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
  testRunner.And("the error HttpStatusCode should be \'403 Forbidden\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET non-existent Message", new string[] {
                "Message_API"}, SourceLine=146)]
        public virtual void GETNon_ExistentMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET non-existent Message", new string[] {
                        "Message_API"});
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
     testRunner.And("I have an nonexistent Layout ID of 12345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.When("I invoke GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
  testRunner.And("status should be \"404 Not Found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("PUT invalid data", new string[] {
                "Message_API"}, SourceLine=155)]
        public virtual void PUTInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PUT invalid data", new string[] {
                        "Message_API"});
#line 156
this.ScenarioSetup(scenarioInfo);
#line 157
 testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 158
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("I have an existing Message Object with a LayoutID of 76660", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("I append invalid character \'\"\' to the LayoutName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.When("I invoke PUT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 163
  testRunner.And("status should be \"400 Bad Request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And("the error Message Should be \'Entity: Layout Method: Validate Message: LayoutName " +
                    "contains invalid characters. \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And("the error HttpStatusCode should be \'400 Bad Request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("POST invalid data", new string[] {
                "Message_API"}, SourceLine=168)]
        public virtual void POSTInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST invalid data", new string[] {
                        "Message_API"});
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
 testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
   testRunner.And("I have a new Message Object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
   testRunner.And("I append invalid character \'\"\' to the LayoutName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.When("I invoke POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 176
  testRunner.And("status should be \"400 Bad Request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.And("the HTTP Response Content should be an HttpError", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.And("the error Message Should be \'Entity: Layout Method: Validate Message: LayoutName " +
                    "contains invalid characters. \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.And("the error HttpStatusCode should be \'400 Bad Request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
