// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmailMarketing.API.Specs.EmailGroup
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("EmailGroup", Description="In order manage Email Group members\r\nAs an API user\r\nI want methods to control Em" +
        "ail Group membership", SourceFile="EmailGroup\\ManageSubscriber.feature", SourceLine=0)]
    public partial class EmailGroupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ManageSubscriber.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmailGroup", "In order manage Email Group members\r\nAs an API user\r\nI want methods to control Em" +
                    "ail Group membership", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add Subscribers", new string[] {
                "EmailGroup_API",
                "AddSubscribers_API"}, SourceLine=7)]
        public virtual void AddSubscribers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Subscribers", new string[] {
                        "EmailGroup_API",
                        "AddSubscribers_API"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 11
   testRunner.Given("I have a valid API Access Key of \"8CAB09B9-BEC9-453F-A689-E85D5C9E4898\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
  testRunner.And("I have a Customer ID of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
     testRunner.And("I set the API Access Key with the Test Data Provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.And("I set ActionName to \"methods/ManageSubscribers\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email Address",
                        "Group ID",
                        "Format",
                        "Subscribe Type"});
            table1.AddRow(new string[] {
                        "invalid@group.com",
                        "99999",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "invalid@format.com",
                        "-1",
                        "Unknown",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "invalid@subscribe-type.com",
                        "-1",
                        "HTML",
                        "MasterSuppress"});
            table1.AddRow(new string[] {
                        "invalid@for-unsubscribe.com",
                        "-1",
                        "HTML",
                        "Unsubscribe"});
            table1.AddRow(new string[] {
                        "invalid_email",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "invalid_email_and_group",
                        "99999",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#rand#-new@valid.com",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#GlobalMasterSupressionList#",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#ChannelMasterSupressionList#",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#MasterSupressionGroup#",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#NotInTestGroup#",
                        "-1",
                        "HTML",
                        "Unsubscribe"});
            table1.AddRow(new string[] {
                        "#NotInTestGroup# 2",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#SubscribedInTestGroup#",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#SubscribedInTestGroup# 2",
                        "-1",
                        "HTML",
                        "Unsubscribe"});
            table1.AddRow(new string[] {
                        "#UnsubscribedInTestGroup#",
                        "-1",
                        "HTML",
                        "Subscribe"});
            table1.AddRow(new string[] {
                        "#UnsubscribedInTestGroup# 2",
                        "-1",
                        "HTML",
                        "Unsubscribe"});
#line 15
  testRunner.And("I have an Email List", ((string)(null)), table1, "And ");
#line 34
 testRunner.When("I invoke POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("I should receive an HTTP Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
  testRunner.And("status should be \"200 OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("HttpRequestContent should contain an object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.And("the object should be an Enumeration of SubscriptionResult", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email Address",
                        "Group ID",
                        "Status",
                        "Result"});
            table2.AddRow(new string[] {
                        "invalid@group.com",
                        "99999",
                        "None",
                        "Skipped, InvalidGroupId"});
            table2.AddRow(new string[] {
                        "invalid@format.com",
                        "-1",
                        "None",
                        "Skipped, InvalidFormatTypeCode"});
            table2.AddRow(new string[] {
                        "invalid@subscribe-type.com",
                        "-1",
                        "None",
                        "Skipped, InvalidSubscribeTypeCode"});
            table2.AddRow(new string[] {
                        "invalid@for-unsubscribe.com",
                        "-1",
                        "None",
                        "Skipped, UnknownSubscriber"});
            table2.AddRow(new string[] {
                        "invalid_email",
                        "-1",
                        "None",
                        "Skipped, InvalidEmailAddress"});
            table2.AddRow(new string[] {
                        "invalid_email_and_group",
                        "99999",
                        "None",
                        "Skipped, InvalidEmailAddress, InvalidGroupId"});
            table2.AddRow(new string[] {
                        "#rand#-new@valid.com",
                        "-1",
                        "S",
                        "New, Subscribed"});
            table2.AddRow(new string[] {
                        "#GlobalMasterSupressionList#",
                        "-1",
                        "M",
                        "Skipped, MasterSuppressed"});
            table2.AddRow(new string[] {
                        "#ChannelMasterSupressionList#",
                        "-1",
                        "M",
                        "Skipped, MasterSuppressed"});
            table2.AddRow(new string[] {
                        "#MasterSupressionGroup#",
                        "-1",
                        "M",
                        "Skipped, MasterSuppressed"});
            table2.AddRow(new string[] {
                        "#NotInTestGroup#",
                        "-1",
                        "None",
                        "Skipped, UnknownSubscriber"});
            table2.AddRow(new string[] {
                        "#NotInTestGroup# 2",
                        "-1",
                        "S",
                        "New, Subscribed"});
            table2.AddRow(new string[] {
                        "#SubscribedInTestGroup#",
                        "-1",
                        "S",
                        "Skipped, Duplicate"});
            table2.AddRow(new string[] {
                        "#SubscribedInTestGroup# 2",
                        "-1",
                        "U",
                        "Updated, Unsubscribed"});
            table2.AddRow(new string[] {
                        "#UnsubscribedInTestGroup#",
                        "-1",
                        "S",
                        "Updated, Subscribed"});
            table2.AddRow(new string[] {
                        "#UnsubscribedInTestGroup# 2",
                        "-1",
                        "U",
                        "Skipped, Duplicate"});
#line 39
  testRunner.And("the Enumeration of SubscriptionResult should validate as", ((string)(null)), table2, "And ");
#line 57
  testRunner.And("I can cleanup EmailGroup Test Records from the DataBase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
