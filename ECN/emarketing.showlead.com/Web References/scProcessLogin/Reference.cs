//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace ecn.showcare.wizard.scProcessLogin {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProcessLoginSoap", Namespace="http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx")]
    public partial class ProcessLogin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback setupLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoLoginURLOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProcessLogin() {
            this.Url = global::ecn.showcare.wizard.Properties.Settings.Default.ecn_showcare_wizard_scProcessLogin_ProcessLogin;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event setupLoginCompletedEventHandler setupLoginCompleted;
        
        /// <remarks/>
        public event getAutoLoginURLCompletedEventHandler getAutoLoginURLCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx/setupLogin" +
            "", RequestNamespace="http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx", ResponseNamespace="http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string setupLogin(int customerID, int userID) {
            object[] results = this.Invoke("setupLogin", new object[] {
                        customerID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetupLogin(int customerID, int userID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setupLogin", new object[] {
                        customerID,
                        userID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsetupLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setupLoginAsync(int customerID, int userID) {
            this.setupLoginAsync(customerID, userID, null);
        }
        
        /// <remarks/>
        public void setupLoginAsync(int customerID, int userID, object userState) {
            if ((this.setupLoginOperationCompleted == null)) {
                this.setupLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetupLoginOperationCompleted);
            }
            this.InvokeAsync("setupLogin", new object[] {
                        customerID,
                        userID}, this.setupLoginOperationCompleted, userState);
        }
        
        private void OnsetupLoginOperationCompleted(object arg) {
            if ((this.setupLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setupLoginCompleted(this, new setupLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx/getAutoLog" +
            "inURL", RequestNamespace="http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx", ResponseNamespace="http://showcare.ecn5.com/ecn.showcare.webservice/KM/PushLeadsList.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAutoLoginURL() {
            object[] results = this.Invoke("getAutoLoginURL", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetAutoLoginURL(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAutoLoginURL", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetAutoLoginURL(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAutoLoginURLAsync() {
            this.getAutoLoginURLAsync(null);
        }
        
        /// <remarks/>
        public void getAutoLoginURLAsync(object userState) {
            if ((this.getAutoLoginURLOperationCompleted == null)) {
                this.getAutoLoginURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoLoginURLOperationCompleted);
            }
            this.InvokeAsync("getAutoLoginURL", new object[0], this.getAutoLoginURLOperationCompleted, userState);
        }
        
        private void OngetAutoLoginURLOperationCompleted(object arg) {
            if ((this.getAutoLoginURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoLoginURLCompleted(this, new getAutoLoginURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setupLoginCompletedEventHandler(object sender, setupLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setupLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setupLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoLoginURLCompletedEventHandler(object sender, getAutoLoginURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoLoginURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoLoginURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591