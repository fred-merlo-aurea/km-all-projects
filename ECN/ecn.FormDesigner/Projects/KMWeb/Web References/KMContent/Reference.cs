//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace KMWeb.KMContent {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ContentManagerSoap", Namespace="http://webservices.ecn5.com/")]
    public partial class ContentManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SearchForContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchForMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentListByFolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageListByFolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerDeptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddContent1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddContentWithPreferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMessage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMessageWithTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolder1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMessageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ContentManager() {
            this.Url = global::KMWeb.Properties.Settings.Default.TelerikMvcApp1_KMContent_ContentManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SearchForContentCompletedEventHandler SearchForContentCompleted;
        
        /// <remarks/>
        public event SearchForMessagesCompletedEventHandler SearchForMessagesCompleted;
        
        /// <remarks/>
        public event GetContentListByFolderIDCompletedEventHandler GetContentListByFolderIDCompleted;
        
        /// <remarks/>
        public event GetMessageListByFolderIDCompletedEventHandler GetMessageListByFolderIDCompleted;
        
        /// <remarks/>
        public event GetContentCompletedEventHandler GetContentCompleted;
        
        /// <remarks/>
        public event GetMessageCompletedEventHandler GetMessageCompleted;
        
        /// <remarks/>
        public event PreviewMessageCompletedEventHandler PreviewMessageCompleted;
        
        /// <remarks/>
        public event PreviewContentCompletedEventHandler PreviewContentCompleted;
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetTemplatesCompletedEventHandler GetTemplatesCompleted;
        
        /// <remarks/>
        public event GetMessageTypesCompletedEventHandler GetMessageTypesCompleted;
        
        /// <remarks/>
        public event GetCustomerDeptsCompletedEventHandler GetCustomerDeptsCompleted;
        
        /// <remarks/>
        public event AddContentCompletedEventHandler AddContentCompleted;
        
        /// <remarks/>
        public event AddContent1CompletedEventHandler AddContent1Completed;
        
        /// <remarks/>
        public event AddContentWithPreferenceCompletedEventHandler AddContentWithPreferenceCompleted;
        
        /// <remarks/>
        public event AddMessageCompletedEventHandler AddMessageCompleted;
        
        /// <remarks/>
        public event AddMessage1CompletedEventHandler AddMessage1Completed;
        
        /// <remarks/>
        public event AddMessageWithTypeCompletedEventHandler AddMessageWithTypeCompleted;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event AddFolder1CompletedEventHandler AddFolder1Completed;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event DeleteContentCompletedEventHandler DeleteContentCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event UpdateContentCompletedEventHandler UpdateContentCompleted;
        
        /// <remarks/>
        public event UpdateMessageCompletedEventHandler UpdateMessageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/SearchForContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchForContent(string ecnAccessKey, string XMLSearch) {
            object[] results = this.Invoke("SearchForContent", new object[] {
                        ecnAccessKey,
                        XMLSearch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchForContentAsync(string ecnAccessKey, string XMLSearch) {
            this.SearchForContentAsync(ecnAccessKey, XMLSearch, null);
        }
        
        /// <remarks/>
        public void SearchForContentAsync(string ecnAccessKey, string XMLSearch, object userState) {
            if ((this.SearchForContentOperationCompleted == null)) {
                this.SearchForContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchForContentOperationCompleted);
            }
            this.InvokeAsync("SearchForContent", new object[] {
                        ecnAccessKey,
                        XMLSearch}, this.SearchForContentOperationCompleted, userState);
        }
        
        private void OnSearchForContentOperationCompleted(object arg) {
            if ((this.SearchForContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchForContentCompleted(this, new SearchForContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/SearchForMessages", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchForMessages(string ecnAccessKey, string XMLSearch) {
            object[] results = this.Invoke("SearchForMessages", new object[] {
                        ecnAccessKey,
                        XMLSearch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchForMessagesAsync(string ecnAccessKey, string XMLSearch) {
            this.SearchForMessagesAsync(ecnAccessKey, XMLSearch, null);
        }
        
        /// <remarks/>
        public void SearchForMessagesAsync(string ecnAccessKey, string XMLSearch, object userState) {
            if ((this.SearchForMessagesOperationCompleted == null)) {
                this.SearchForMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchForMessagesOperationCompleted);
            }
            this.InvokeAsync("SearchForMessages", new object[] {
                        ecnAccessKey,
                        XMLSearch}, this.SearchForMessagesOperationCompleted, userState);
        }
        
        private void OnSearchForMessagesOperationCompleted(object arg) {
            if ((this.SearchForMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchForMessagesCompleted(this, new SearchForMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetContentListByFolderID", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentListByFolderID(string ecnAccessKey, int FolderID) {
            object[] results = this.Invoke("GetContentListByFolderID", new object[] {
                        ecnAccessKey,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentListByFolderIDAsync(string ecnAccessKey, int FolderID) {
            this.GetContentListByFolderIDAsync(ecnAccessKey, FolderID, null);
        }
        
        /// <remarks/>
        public void GetContentListByFolderIDAsync(string ecnAccessKey, int FolderID, object userState) {
            if ((this.GetContentListByFolderIDOperationCompleted == null)) {
                this.GetContentListByFolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentListByFolderIDOperationCompleted);
            }
            this.InvokeAsync("GetContentListByFolderID", new object[] {
                        ecnAccessKey,
                        FolderID}, this.GetContentListByFolderIDOperationCompleted, userState);
        }
        
        private void OnGetContentListByFolderIDOperationCompleted(object arg) {
            if ((this.GetContentListByFolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentListByFolderIDCompleted(this, new GetContentListByFolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetMessageListByFolderID", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessageListByFolderID(string ecnAccessKey, int FolderID) {
            object[] results = this.Invoke("GetMessageListByFolderID", new object[] {
                        ecnAccessKey,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageListByFolderIDAsync(string ecnAccessKey, int FolderID) {
            this.GetMessageListByFolderIDAsync(ecnAccessKey, FolderID, null);
        }
        
        /// <remarks/>
        public void GetMessageListByFolderIDAsync(string ecnAccessKey, int FolderID, object userState) {
            if ((this.GetMessageListByFolderIDOperationCompleted == null)) {
                this.GetMessageListByFolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageListByFolderIDOperationCompleted);
            }
            this.InvokeAsync("GetMessageListByFolderID", new object[] {
                        ecnAccessKey,
                        FolderID}, this.GetMessageListByFolderIDOperationCompleted, userState);
        }
        
        private void OnGetMessageListByFolderIDOperationCompleted(object arg) {
            if ((this.GetMessageListByFolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageListByFolderIDCompleted(this, new GetMessageListByFolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContent(string ecnAccessKey, int ContentID) {
            object[] results = this.Invoke("GetContent", new object[] {
                        ecnAccessKey,
                        ContentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentAsync(string ecnAccessKey, int ContentID) {
            this.GetContentAsync(ecnAccessKey, ContentID, null);
        }
        
        /// <remarks/>
        public void GetContentAsync(string ecnAccessKey, int ContentID, object userState) {
            if ((this.GetContentOperationCompleted == null)) {
                this.GetContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentOperationCompleted);
            }
            this.InvokeAsync("GetContent", new object[] {
                        ecnAccessKey,
                        ContentID}, this.GetContentOperationCompleted, userState);
        }
        
        private void OnGetContentOperationCompleted(object arg) {
            if ((this.GetContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentCompleted(this, new GetContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetMessage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessage(string ecnAccessKey, int layoutID) {
            object[] results = this.Invoke("GetMessage", new object[] {
                        ecnAccessKey,
                        layoutID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageAsync(string ecnAccessKey, int layoutID) {
            this.GetMessageAsync(ecnAccessKey, layoutID, null);
        }
        
        /// <remarks/>
        public void GetMessageAsync(string ecnAccessKey, int layoutID, object userState) {
            if ((this.GetMessageOperationCompleted == null)) {
                this.GetMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageOperationCompleted);
            }
            this.InvokeAsync("GetMessage", new object[] {
                        ecnAccessKey,
                        layoutID}, this.GetMessageOperationCompleted, userState);
        }
        
        private void OnGetMessageOperationCompleted(object arg) {
            if ((this.GetMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageCompleted(this, new GetMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/PreviewMessage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PreviewMessage(string ecnAccessKey, int MessageID) {
            object[] results = this.Invoke("PreviewMessage", new object[] {
                        ecnAccessKey,
                        MessageID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewMessageAsync(string ecnAccessKey, int MessageID) {
            this.PreviewMessageAsync(ecnAccessKey, MessageID, null);
        }
        
        /// <remarks/>
        public void PreviewMessageAsync(string ecnAccessKey, int MessageID, object userState) {
            if ((this.PreviewMessageOperationCompleted == null)) {
                this.PreviewMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewMessageOperationCompleted);
            }
            this.InvokeAsync("PreviewMessage", new object[] {
                        ecnAccessKey,
                        MessageID}, this.PreviewMessageOperationCompleted, userState);
        }
        
        private void OnPreviewMessageOperationCompleted(object arg) {
            if ((this.PreviewMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewMessageCompleted(this, new PreviewMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/PreviewContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PreviewContent(string ecnAccessKey, int ContentID) {
            object[] results = this.Invoke("PreviewContent", new object[] {
                        ecnAccessKey,
                        ContentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewContentAsync(string ecnAccessKey, int ContentID) {
            this.PreviewContentAsync(ecnAccessKey, ContentID, null);
        }
        
        /// <remarks/>
        public void PreviewContentAsync(string ecnAccessKey, int ContentID, object userState) {
            if ((this.PreviewContentOperationCompleted == null)) {
                this.PreviewContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewContentOperationCompleted);
            }
            this.InvokeAsync("PreviewContent", new object[] {
                        ecnAccessKey,
                        ContentID}, this.PreviewContentOperationCompleted, userState);
        }
        
        private void OnPreviewContentOperationCompleted(object arg) {
            if ((this.PreviewContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewContentCompleted(this, new PreviewContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetFolders", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolders(string ecnAccessKey) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey) {
            this.GetFoldersAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ecnAccessKey, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        ecnAccessKey}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetTemplates", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemplates(string ecnAccessKey) {
            object[] results = this.Invoke("GetTemplates", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplatesAsync(string ecnAccessKey) {
            this.GetTemplatesAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetTemplatesAsync(string ecnAccessKey, object userState) {
            if ((this.GetTemplatesOperationCompleted == null)) {
                this.GetTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetTemplates", new object[] {
                        ecnAccessKey}, this.GetTemplatesOperationCompleted, userState);
        }
        
        private void OnGetTemplatesOperationCompleted(object arg) {
            if ((this.GetTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplatesCompleted(this, new GetTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetMessageTypes", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessageTypes(string ecnAccessKey) {
            object[] results = this.Invoke("GetMessageTypes", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageTypesAsync(string ecnAccessKey) {
            this.GetMessageTypesAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetMessageTypesAsync(string ecnAccessKey, object userState) {
            if ((this.GetMessageTypesOperationCompleted == null)) {
                this.GetMessageTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageTypesOperationCompleted);
            }
            this.InvokeAsync("GetMessageTypes", new object[] {
                        ecnAccessKey}, this.GetMessageTypesOperationCompleted, userState);
        }
        
        private void OnGetMessageTypesOperationCompleted(object arg) {
            if ((this.GetMessageTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageTypesCompleted(this, new GetMessageTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/GetCustomerDepts", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerDepts(string ecnAccessKey) {
            object[] results = this.Invoke("GetCustomerDepts", new object[] {
                        ecnAccessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerDeptsAsync(string ecnAccessKey) {
            this.GetCustomerDeptsAsync(ecnAccessKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerDeptsAsync(string ecnAccessKey, object userState) {
            if ((this.GetCustomerDeptsOperationCompleted == null)) {
                this.GetCustomerDeptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDeptsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDepts", new object[] {
                        ecnAccessKey}, this.GetCustomerDeptsOperationCompleted, userState);
        }
        
        private void OnGetCustomerDeptsOperationCompleted(object arg) {
            if ((this.GetCustomerDeptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDeptsCompleted(this, new GetCustomerDeptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddContent(string ecnAccessKey, string Title, string ContentHTML, string ContentText) {
            object[] results = this.Invoke("AddContent", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddContentAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText) {
            this.AddContentAsync(ecnAccessKey, Title, ContentHTML, ContentText, null);
        }
        
        /// <remarks/>
        public void AddContentAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText, object userState) {
            if ((this.AddContentOperationCompleted == null)) {
                this.AddContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddContentOperationCompleted);
            }
            this.InvokeAsync("AddContent", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText}, this.AddContentOperationCompleted, userState);
        }
        
        private void OnAddContentOperationCompleted(object arg) {
            if ((this.AddContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddContentCompleted(this, new AddContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddContent1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddContentToFolder", RequestElementName="AddContentToFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddContentToFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddContentToFolderResult")]
        public string AddContent(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID) {
            object[] results = this.Invoke("AddContent1", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddContent1Async(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID) {
            this.AddContent1Async(ecnAccessKey, Title, ContentHTML, ContentText, FolderID, null);
        }
        
        /// <remarks/>
        public void AddContent1Async(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID, object userState) {
            if ((this.AddContent1OperationCompleted == null)) {
                this.AddContent1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddContent1OperationCompleted);
            }
            this.InvokeAsync("AddContent1", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        FolderID}, this.AddContent1OperationCompleted, userState);
        }
        
        private void OnAddContent1OperationCompleted(object arg) {
            if ((this.AddContent1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddContent1Completed(this, new AddContent1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddContentWithPreference", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddContentWithPreference(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID, bool UseWYSIWYGeditor) {
            object[] results = this.Invoke("AddContentWithPreference", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        FolderID,
                        UseWYSIWYGeditor});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddContentWithPreferenceAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID, bool UseWYSIWYGeditor) {
            this.AddContentWithPreferenceAsync(ecnAccessKey, Title, ContentHTML, ContentText, FolderID, UseWYSIWYGeditor, null);
        }
        
        /// <remarks/>
        public void AddContentWithPreferenceAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int FolderID, bool UseWYSIWYGeditor, object userState) {
            if ((this.AddContentWithPreferenceOperationCompleted == null)) {
                this.AddContentWithPreferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddContentWithPreferenceOperationCompleted);
            }
            this.InvokeAsync("AddContentWithPreference", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        FolderID,
                        UseWYSIWYGeditor}, this.AddContentWithPreferenceOperationCompleted, userState);
        }
        
        private void OnAddContentWithPreferenceOperationCompleted(object arg) {
            if ((this.AddContentWithPreferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddContentWithPreferenceCompleted(this, new AddContentWithPreferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddMessage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMessage(string ecnAccessKey, string LayoutName, string TableBorder, int TemplateID, string Address, int DeptID, int Content0, int Content1, int Content2, int Content3, int Content4, int Content5, int Content6, int Content7, int Content8) {
            object[] results = this.Invoke("AddMessage", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMessageAsync(string ecnAccessKey, string LayoutName, string TableBorder, int TemplateID, string Address, int DeptID, int Content0, int Content1, int Content2, int Content3, int Content4, int Content5, int Content6, int Content7, int Content8) {
            this.AddMessageAsync(ecnAccessKey, LayoutName, TableBorder, TemplateID, Address, DeptID, Content0, Content1, Content2, Content3, Content4, Content5, Content6, Content7, Content8, null);
        }
        
        /// <remarks/>
        public void AddMessageAsync(
                    string ecnAccessKey, 
                    string LayoutName, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    object userState) {
            if ((this.AddMessageOperationCompleted == null)) {
                this.AddMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMessageOperationCompleted);
            }
            this.InvokeAsync("AddMessage", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8}, this.AddMessageOperationCompleted, userState);
        }
        
        private void OnAddMessageOperationCompleted(object arg) {
            if ((this.AddMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMessageCompleted(this, new AddMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddMessage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddMessageToFolder", RequestElementName="AddMessageToFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddMessageToFolderResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddMessageToFolderResult")]
        public string AddMessage(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8) {
            object[] results = this.Invoke("AddMessage1", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        FolderID,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMessage1Async(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8) {
            this.AddMessage1Async(ecnAccessKey, LayoutName, FolderID, TableBorder, TemplateID, Address, DeptID, Content0, Content1, Content2, Content3, Content4, Content5, Content6, Content7, Content8, null);
        }
        
        /// <remarks/>
        public void AddMessage1Async(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    object userState) {
            if ((this.AddMessage1OperationCompleted == null)) {
                this.AddMessage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMessage1OperationCompleted);
            }
            this.InvokeAsync("AddMessage1", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        FolderID,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8}, this.AddMessage1OperationCompleted, userState);
        }
        
        private void OnAddMessage1OperationCompleted(object arg) {
            if ((this.AddMessage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMessage1Completed(this, new AddMessage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddMessageWithType", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMessageWithType(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int MessageTypeID, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8) {
            object[] results = this.Invoke("AddMessageWithType", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        MessageTypeID,
                        FolderID,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMessageWithTypeAsync(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int MessageTypeID, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8) {
            this.AddMessageWithTypeAsync(ecnAccessKey, LayoutName, MessageTypeID, FolderID, TableBorder, TemplateID, Address, DeptID, Content0, Content1, Content2, Content3, Content4, Content5, Content6, Content7, Content8, null);
        }
        
        /// <remarks/>
        public void AddMessageWithTypeAsync(
                    string ecnAccessKey, 
                    string LayoutName, 
                    int MessageTypeID, 
                    int FolderID, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    object userState) {
            if ((this.AddMessageWithTypeOperationCompleted == null)) {
                this.AddMessageWithTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMessageWithTypeOperationCompleted);
            }
            this.InvokeAsync("AddMessageWithType", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        MessageTypeID,
                        FolderID,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8}, this.AddMessageWithTypeOperationCompleted, userState);
        }
        
        private void OnAddMessageWithTypeOperationCompleted(object arg) {
            if ((this.AddMessageWithTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMessageWithTypeCompleted(this, new AddMessageWithTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFolder(string ecnAccessKey, string folderName, string folderDescription) {
            object[] results = this.Invoke("AddFolder", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string folderName, string folderDescription) {
            this.AddFolderAsync(ecnAccessKey, folderName, folderDescription, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(string ecnAccessKey, string folderName, string folderDescription, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new AddFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="AddFolder1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/AddFolderToParent", RequestElementName="AddFolderToParent", RequestNamespace="http://webservices.ecn5.com/", ResponseElementName="AddFolderToParentResponse", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AddFolderToParentResult")]
        public string AddFolder(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID) {
            object[] results = this.Invoke("AddFolder1", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription,
                        parentFolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID) {
            this.AddFolder1Async(ecnAccessKey, folderName, folderDescription, parentFolderID, null);
        }
        
        /// <remarks/>
        public void AddFolder1Async(string ecnAccessKey, string folderName, string folderDescription, int parentFolderID, object userState) {
            if ((this.AddFolder1OperationCompleted == null)) {
                this.AddFolder1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolder1OperationCompleted);
            }
            this.InvokeAsync("AddFolder1", new object[] {
                        ecnAccessKey,
                        folderName,
                        folderDescription,
                        parentFolderID}, this.AddFolder1OperationCompleted, userState);
        }
        
        private void OnAddFolder1OperationCompleted(object arg) {
            if ((this.AddFolder1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolder1Completed(this, new AddFolder1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteFolder", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFolder(string ecnAccessKey, int FolderID) {
            object[] results = this.Invoke("DeleteFolder", new object[] {
                        ecnAccessKey,
                        FolderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ecnAccessKey, int FolderID) {
            this.DeleteFolderAsync(ecnAccessKey, FolderID, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ecnAccessKey, int FolderID, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        ecnAccessKey,
                        FolderID}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteContent(string ecnAccessKey, int ContentID) {
            object[] results = this.Invoke("DeleteContent", new object[] {
                        ecnAccessKey,
                        ContentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteContentAsync(string ecnAccessKey, int ContentID) {
            this.DeleteContentAsync(ecnAccessKey, ContentID, null);
        }
        
        /// <remarks/>
        public void DeleteContentAsync(string ecnAccessKey, int ContentID, object userState) {
            if ((this.DeleteContentOperationCompleted == null)) {
                this.DeleteContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContentOperationCompleted);
            }
            this.InvokeAsync("DeleteContent", new object[] {
                        ecnAccessKey,
                        ContentID}, this.DeleteContentOperationCompleted, userState);
        }
        
        private void OnDeleteContentOperationCompleted(object arg) {
            if ((this.DeleteContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContentCompleted(this, new DeleteContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/DeleteMessage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteMessage(string ecnAccessKey, int MessageID) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        ecnAccessKey,
                        MessageID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string ecnAccessKey, int MessageID) {
            this.DeleteMessageAsync(ecnAccessKey, MessageID, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string ecnAccessKey, int MessageID, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        ecnAccessKey,
                        MessageID}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UpdateContent", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateContent(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int ContentID) {
            object[] results = this.Invoke("UpdateContent", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        ContentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateContentAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int ContentID) {
            this.UpdateContentAsync(ecnAccessKey, Title, ContentHTML, ContentText, ContentID, null);
        }
        
        /// <remarks/>
        public void UpdateContentAsync(string ecnAccessKey, string Title, string ContentHTML, string ContentText, int ContentID, object userState) {
            if ((this.UpdateContentOperationCompleted == null)) {
                this.UpdateContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContentOperationCompleted);
            }
            this.InvokeAsync("UpdateContent", new object[] {
                        ecnAccessKey,
                        Title,
                        ContentHTML,
                        ContentText,
                        ContentID}, this.UpdateContentOperationCompleted, userState);
        }
        
        private void OnUpdateContentOperationCompleted(object arg) {
            if ((this.UpdateContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContentCompleted(this, new UpdateContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.ecn5.com/UpdateMessage", RequestNamespace="http://webservices.ecn5.com/", ResponseNamespace="http://webservices.ecn5.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateMessage(
                    string ecnAccessKey, 
                    string LayoutName, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    int MessageID) {
            object[] results = this.Invoke("UpdateMessage", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8,
                        MessageID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMessageAsync(
                    string ecnAccessKey, 
                    string LayoutName, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    int MessageID) {
            this.UpdateMessageAsync(ecnAccessKey, LayoutName, TableBorder, TemplateID, Address, DeptID, Content0, Content1, Content2, Content3, Content4, Content5, Content6, Content7, Content8, MessageID, null);
        }
        
        /// <remarks/>
        public void UpdateMessageAsync(
                    string ecnAccessKey, 
                    string LayoutName, 
                    string TableBorder, 
                    int TemplateID, 
                    string Address, 
                    int DeptID, 
                    int Content0, 
                    int Content1, 
                    int Content2, 
                    int Content3, 
                    int Content4, 
                    int Content5, 
                    int Content6, 
                    int Content7, 
                    int Content8, 
                    int MessageID, 
                    object userState) {
            if ((this.UpdateMessageOperationCompleted == null)) {
                this.UpdateMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMessageOperationCompleted);
            }
            this.InvokeAsync("UpdateMessage", new object[] {
                        ecnAccessKey,
                        LayoutName,
                        TableBorder,
                        TemplateID,
                        Address,
                        DeptID,
                        Content0,
                        Content1,
                        Content2,
                        Content3,
                        Content4,
                        Content5,
                        Content6,
                        Content7,
                        Content8,
                        MessageID}, this.UpdateMessageOperationCompleted, userState);
        }
        
        private void OnUpdateMessageOperationCompleted(object arg) {
            if ((this.UpdateMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMessageCompleted(this, new UpdateMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchForContentCompletedEventHandler(object sender, SearchForContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchForContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchForContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchForMessagesCompletedEventHandler(object sender, SearchForMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchForMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchForMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetContentListByFolderIDCompletedEventHandler(object sender, GetContentListByFolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentListByFolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentListByFolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMessageListByFolderIDCompletedEventHandler(object sender, GetMessageListByFolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageListByFolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageListByFolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetContentCompletedEventHandler(object sender, GetContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMessageCompletedEventHandler(object sender, GetMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PreviewMessageCompletedEventHandler(object sender, PreviewMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PreviewContentCompletedEventHandler(object sender, PreviewContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTemplatesCompletedEventHandler(object sender, GetTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMessageTypesCompletedEventHandler(object sender, GetMessageTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCustomerDeptsCompletedEventHandler(object sender, GetCustomerDeptsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDeptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerDeptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddContentCompletedEventHandler(object sender, AddContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddContent1CompletedEventHandler(object sender, AddContent1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddContent1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddContent1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddContentWithPreferenceCompletedEventHandler(object sender, AddContentWithPreferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddContentWithPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddContentWithPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddMessageCompletedEventHandler(object sender, AddMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddMessage1CompletedEventHandler(object sender, AddMessage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMessage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMessage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddMessageWithTypeCompletedEventHandler(object sender, AddMessageWithTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMessageWithTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMessageWithTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddFolderCompletedEventHandler(object sender, AddFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddFolder1CompletedEventHandler(object sender, AddFolder1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFolder1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFolder1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, DeleteFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteContentCompletedEventHandler(object sender, DeleteContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateContentCompletedEventHandler(object sender, UpdateContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateMessageCompletedEventHandler(object sender, UpdateMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591