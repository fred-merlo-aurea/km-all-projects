@using KMEnums
@using KMModels.PostModels

@using System.Linq

@model FormNotificationsPostModel

@{
    var subscriberType = "Subscriber";
    var internalUserType = "InternalUser";
    var subscriberNotificationName = "SubscriberNotifications";
    var internalUserNotificationName = "InternalUserNotifications";
    var formtype = ViewContext.Controller.ViewBag.FormType;
}


@Html.Partial("Partials/FormNotifications/_SubscriberNotificationTemplate")
@Html.Partial("Partials/FormNotifications/_InternalUserNotificationTemplate")
@Html.Partial("Partials/FormNotifications/_ConditionTemplate")

<script>
    var subscriberNotificationTemplate = kendo.template($("#subscriber-notification-template").html());
    var internalUserNotificationTemplate = kendo.template($("#internalUser-notification-template").html());
    var conditionTemplate = kendo.template($("#condition-template").html());
    function addSubscriberNotification() {
        return addNotification('@subscriberNotificationName', '@subscriberType');
    }
    function addInternalUserNotification() {
        return addNotification('@internalUserNotificationName', '@internalUserType');
    }
    function addNotification(name, type) {
        var notifications = $("[name='" + name + ".Index']");
        var notificationIndex = getIndex(notifications) + 1;
        var template;
        if (type == '@subscriberType') {
            template = subscriberNotificationTemplate;
        }
        if (type == '@internalUserType') {
            template = internalUserNotificationTemplate;
        }
        var notificationId = String.format("{0}[{1}]", name, notificationIndex);
        var html = template({
            NotificationId: notificationId,
            NotificationIndex: notificationIndex
        });
        var box = $("#" + type).find(".notifbox");
        return box.append(html).find("#" + notificationId.escape());
    }
    function copyNotification(sourceNotificationId) {
        var sourceNotification = $("#" + sourceNotificationId.escape());
        var notificationBox = sourceNotification.parent();
        var notificationSection = notificationBox.parent();
        var notificationType = notificationSection.attr('id');
        var targetNotification;
        if (notificationType == '@subscriberType') {
            targetNotification = addSubscriberNotification();
        }
        if (notificationType == '@internalUserType') {
            targetNotification = addInternalUserNotification();
        }
        var targetNotificationId = targetNotification.attr('id');
        var idReplacements = new RegExp(sourceNotificationId.escape(), "g");
        var formattedIdReplacements = new RegExp(formatId(sourceNotificationId), "g");
        var sourceConditionHtml = sourceNotification.find(".conditionslist").html();
        var targetConditionHtml = sourceConditionHtml
                                    .replace(idReplacements, targetNotificationId)
                                    .replace(formattedIdReplacements, formatId(targetNotificationId));
        targetNotification.find(".conditionslist").html(targetConditionHtml);
        var items = sourceNotification.find("[name^='" + sourceNotificationId + "']");
        $.each(items, function (i, item) {
            var source = $(item);
            var name = source.attr('name').replace(sourceNotificationId, String.empty);
            if (name == ".Conditions.Index") return;
            var targetName = targetNotificationId + name;
            var target = targetNotification.find("[name='" + targetName + "']");
            if (target.length != 0) {
                var sourceWidget = kendo.widgetInstance(source);
                var targetWidget = kendo.widgetInstance(target);
                if (sourceWidget) {
                    var type = getWidgetType(source);
                    if(type != "kendoEditor") {
                        var sourceOptions = serialize(sourceWidget.options);
                        var targetOptions = sourceOptions
                                                .replace(idReplacements, targetNotificationId)
                                                .replace(formattedIdReplacements, formatId(targetNotificationId));
                        var options = deserialize(targetOptions);
                        target[type](options);
                        targetWidget = target.data(type);
                    }
                    targetWidget.value(sourceWidget.value());
                }
                else {
                    target.val(source.val());
                }
            }
        });
    }
    function deleteNotification(notificationId) {
        var that = this;
        var DeleteParameterAction = function () {
            $("#" + notificationId.escape()).remove();
        }
        showMessage({
            type: '@MessageType.Confirm',
            text: 'Are you sure you want to delete this item?',
            action: DeleteParameterAction
        });
    }
    function addCondition(notificationId) {
        var conditions = $("[name='" + notificationId + ".Conditions.Index']");
        var conditionIndex = getIndex(conditions) + 1;
        var conditionType = $("[name='" + notificationId + ".ConditionType']").data('kendoDropDownList');
        var conditionId = String.format("{0}.Conditions[{1}]", notificationId, conditionIndex);
        var html = conditionTemplate({
            NotificationId: notificationId,
            ConditionId: conditionId,
            ConditionType: conditionType.value(),
            ConditionIndex: conditionIndex
        });
        $("#" + notificationId.escape()).find(".conditionslist").append(html);
    }
    function deleteCondition(conditionId) {
        var that = this;
        var DeleteParameterAction = function () {
            $("#" + conditionId.escape()).remove();
        }
        showMessage({
            type: '@MessageType.Confirm',
            text: 'Are you sure you want to delete this item?',
            action: DeleteParameterAction
        });
    }
    function changeCondition(notificationId, sender, e) {
        e.preventDefault();
        var conditions = $("[name='" + notificationId + ".Conditions.Index']");
        var change = function() {
            var val = sender.dataItem(e.item).Value;
            sender.value(val);
            $("#" + notificationId.escape()).find(".conditionTypeItem").text(val);
            $("#" + notificationId.escape()).find(".conditionTypeHidden").val(val);
        };
        if(conditions.length > 1) {
            showMessage({
                type: '@MessageType.Confirm',
                text: 'Changing all connectors within condition group?',
                action: change
            });
        }
        else {
            change();
        }
    }
    function changeControl(conditionId, sender) {
        var condition = $("#" + conditionId.escape());
        var comparisonType = condition.find("[name$='ComparisonType']");
        var valueContainer = condition.find("li.value");
        var name = conditionId + ".Value";
        var input = $(String.format("<input id='{0}' name='{1}' />", formatId(name), name));
        var dataItem = sender.dataItem();
        var dataType = dataItem.DataType;
        valueContainer.empty();
        input.appendTo(valueContainer);
        var comparisonTypes;
        if (dataType == '@((int)DataType.Selection)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Selection)));
            input.kendoDropDownList({
                dataSource: dataItem.SelectableItems,
                dataTextField: "Label",
                dataValueField: "Id"
            });
        }
        if (dataType == '@((int)DataType.Text)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Text)));
            input.addClass('k-textbox');
        }
        if (dataType == '@((int)DataType.Date)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Date)));
            input.kendoDateTimePicker();
        }
        if (dataType == '@((int)DataType.Number)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Number)));
            input.kendoNumericTextBox({ decimals: 0, format: "#" });
        }
        if (dataType == '@((int)DataType.Decimal)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Decimal)));
            input.kendoNumericTextBox();
        }
        if (dataType == '@((int)DataType.Newsletter)') {
            comparisonTypes = @Html.Raw(Json.Encode(GetComparisonTypeNames(DataType.Newsletter)));
            input.kendoDropDownList({
                dataSource: [ 'Subscribe' ]
            });
        }
        comparisonType.kendoDropDownList({
            dataSource: comparisonTypes
        });
    }
    function getWidgetType(element) {
        var type;
        switch(element.data("role")) {
            case "numerictextbox": type = "kendoNumericTextBox"; break;
            case "dropdownlist": type = "kendoDropDownList"; break;
            case "datetimepicker": type = "kendoDateTimePicker"; break;
            case "editor": type = "kendoEditor"; break;
        }
        return type;
    }
    function getIndex(controls) {
        var maxIndex = 0;
        $.each(controls, function (index, control) {
            var value = parseInt($(control).val());
            if (value > maxIndex) {
                maxIndex = value;
            }
        });
        return maxIndex;
    }
    function getNotificationId(conditionId) {
        return $("#" + conditionId.escape()).closest(".notifitem").attr('id');
    }
    function getId(prefix, controlId) {
        return String.format('{0}_{1}', prefix, controlId);
    }
    function formatId(id) {
        return id.replace(/[\]\[\.]/g, '_');
    }
</script>

@Html.HiddenFor(x => x.Id)

<div class="form-wrapper formedit-formNotifications">
    <section>
        <div class="notifbox">
            @if (Model.InternalUserNotifications != null)
            {
                foreach (var notificationItem in Model.InternalUserNotifications.Select((Notification, Index) => new { Index, Notification }))
                {
                    var internalUserNotificationId = string.Format("{0}[{1}]", internalUserNotificationName, notificationItem.Index);

                    if (notificationItem.Notification.Message == "SubmissionErrorNotification")
                    {
                        <div id="@internalUserNotificationId" class="notifitem">
                            <input type="hidden" value="@notificationItem.Index" name="@(internalUserNotificationName).Index">
                            @Html.Partial("Partials/FormNotifications/_SubmissionErrorNotification", notificationItem.Notification,
                                 new ViewDataDictionary
                                 {
                                     TemplateInfo = new TemplateInfo
                                     {
                                         HtmlFieldPrefix = internalUserNotificationId
                                     }
                                 })
                        </div>
                    }
                }
            }
        </div>
    </section>
    <section id="@subscriberType">
        @Html.Kendo().Button().Name("AddSubscriberNotification").Content("Add Subscriber Notification<i class=\"km-icon icon-kmplus-circled-1\"></i>").HtmlAttributes(new { @class = "btn   btn-blue2 ", onclick = "addSubscriberNotification()", type = "button" })
        <div class="notifbox">
            @if (Model.SubscriberNotifications != null) 
            { 
                foreach (var notificationItem in Model.SubscriberNotifications.Select((Notification, Index) => new { Index, Notification }))
                {
                    var subscriberNotificationId = string.Format("{0}[{1}]", subscriberNotificationName, notificationItem.Index);
                
                    <div id="@subscriberNotificationId" class="notifitem">
                        <input type="hidden" value="@notificationItem.Index" name="@(subscriberNotificationName).Index">
                        @Html.Partial("Partials/FormNotifications/_SubscriberNotification", notificationItem.Notification,
                            new ViewDataDictionary
                            {
                                
                                TemplateInfo = new TemplateInfo
                                {
                                    HtmlFieldPrefix = subscriberNotificationId
                                    
                                }
                                
                                
                            })
                    </div> 
                }
            }
        </div>
    </section>
    <section id="@internalUserType">
        @Html.Kendo().Button().Name("AddInternalUserNotification").Content("Add (Internal) User Notification<i class=\"km-icon icon-kmplus-circled-1\"></i>").HtmlAttributes(new { @class = "btn  btn-blue2 ", onclick = "addInternalUserNotification()", type = "button" })
        <div class="notifbox">
            @if (Model.InternalUserNotifications != null)
            {
                foreach (var notificationItem in Model.InternalUserNotifications.Select((Notification, Index) => new { Index, Notification }))
                {
                    var internalUserNotificationId = string.Format("{0}[{1}]", internalUserNotificationName, notificationItem.Index);

                    if (notificationItem.Notification.Message != "SubmissionErrorNotification")                    
                    {
                        <div id="@internalUserNotificationId" class="notifitem">
                            <input type="hidden" value="@notificationItem.Index" name="@(internalUserNotificationName).Index">
                            @Html.Partial("Partials/FormNotifications/_InternalUserNotification", notificationItem.Notification,
                                new ViewDataDictionary
                                {
                                    TemplateInfo = new TemplateInfo
                                    {
                                        HtmlFieldPrefix = internalUserNotificationId
                                    }
                                })
                        </div> 
                    }
                }
            }
        </div>
    </section>
</div>

@if(!ViewContext.ViewData.ModelState.IsValid)
{
    var summary = Html.ValidationSummary().ToString();

    var errors = Html.Raw(HttpUtility.JavaScriptStringEncode(summary));
    
    <script>
        showMessage({
            type: '@MessageType.Error',
            text: '@errors'
        });
    </script>
}


