@using KMEnums
@using KMWeb.Models.Forms
@using KMModels.ViewModels
@using KMModels.PostModels

@model HomeModel

@{
    ViewBag.Title = "Home Page";
    List<ECN_Framework_Entities.Accounts.Customer> channelCustomers = (List<ECN_Framework_Entities.Accounts.Customer>)ViewBag.Customers;
    if (channelCustomers.Count > 0)
    {
        channelCustomers.Insert(0, new ECN_Framework_Entities.Accounts.Customer { CustomerName = "--- All Customers ---", CustomerID = -1 });
    }
}
<style>
.k-dropdown > .k-dropdown-wrap > .k-select > .k-i-arrow-60-down {
     color: #559edb;
 }
 .k-dropdown .k-input, .k-dropdown .k-state-focused .k-input, .k-menu .k-popup {
        color: #559edb !important;
}
</style>
<script>
    function addForm() {
        var title = 'Add New Form';
        var window = $("#FormWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '@Url.Action("Create")');
        kendoWindow.title(title);
        $("#FormContent").load('@Url.Action("LoadForm")', null, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }
    function copyForm(id) {
        var title = 'Copy Form';
        var window = $("#FormWindow");
        var kendoWindow = window.data('kendoWindow');
        window.find("form").attr('action', '@Url.Action("Copy")');
        kendoWindow.title(title);
        $("#FormContent").load('@Url.Action("LoadForm")', { id: id }, function () {
            window.find('legend').text(title);
            kendoWindow.center().open();
        });
    }
    function deleteForm(id) {
             $.ajax({
            type: 'GET',
            url: '@Url.Action("ValidateDelete", "Forms")?id=' + id,
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                
                if (response[0] == '200')//success
                {
                    var win = $("#DeleteWindow");
                    kendo.bind(win, { Id: id });
                    var kendoWindow = win.data('kendoWindow');
                    kendoWindow.center().open();
                   
                }
                else if (response[0] = '500')//error
                {
                    showMessage({
                        type: '@MessageType.Error',
                        text: response[1],
                        autoClose: false
                    });
                }

            }
        });
    }
    function publishForm(id) {
        var win = $("#PublishWindow");
        kendo.bind(win, {
            Id: id,
            Type: 0,
            Date: String.empty,
            Disabled: true
        });
        var kendoWindow = win.data('kendoWindow');
        kendoWindow.center().open();
    }
    function activateForm(el) {
        var win = $("#ActivationWindow");
        var grid = $(el).closest('.k-grid').data('kendoGrid');
        var row = $(el).closest('tr');
        var dataItem = grid.dataItem(row);
        kendo.bind(win, $.extend({}, dataItem));
        var kendoWindow = win.data('kendoWindow');
        kendoWindow.center().open();
    }
    function closeWindow(id) {
        $("#" + id).data('kendoWindow').close();
    }

    function getText(field) {
        var result;
        var grid = $("#ActiveForms").data("kendoGrid");
        var column = getColumn(grid.columns, field.FieldName);
        $.each(column.values, function (index, value) {
            if (value.text == field.FieldValue) {
                result = value.text;
            }
        });
        return result;
    }
    function getDate(value) {
        if (value == null) {
            return String.empty;
        }
        var date = kendo.parseDate(value);
        return kendo.toString(date, '@JavaScriptDateTimeFormat');
    }
    function getColumn(columns, name) {
        var result;
        $.each(columns, function (index, column) {
            if (column.field == name) {
                result = column;
            }
        });
        return result;
    }
    function getVisibility(status, action) {
        var visible = false;
        //var state = getText({ FieldName: 'Status', FieldValue: status });
        switch(action)
        {
            case 'ViewOnly': {
                if (status == 'Published' || status == 'Updated')
                    visible = true;
            } break;
            case 'Edit': {
                if (status == 'Saved' || status == 'Published')
                    visible = true;
            } break;
            case 'Delete': {
                if (status == 'Saved')
                    visible = true;
            } break;
            case 'Publish': {
                if (status == 'Saved')
                    visible = true;
            } break;
            case 'Report': {
                if (status == 'Published' || status == 'Updated')
                    visible = true;
            } break;
            default: break;
        }
        if (!visible) {
            return 'display:none;';
        }
        return String.empty;
    }
    function getVisibilityPreview(type) {
        if (type == 'Auto-Submit') {
            return 'display:none;';
        }
        return String.empty;
    }
    function getActivationButtonText(name) {
        if (name == 'ActiveForms') return 'Make Inactive';
        if (name == 'InactiveForms') return 'Make Active';
    }
    @*function onError(e) {
        showMessage({
            type: '@MessageType.Error',
            text: 'Error Occurred'
        });
    }*@

    var targetUrlAct = '@Url.Action("ActiveFormsReadToGrid", "Forms")';
    var targetUrlIna = '@Url.Action("InactiveFormsReadToGrid", "Forms")';
    var firstGridLaod = true;
    var firstGridLaod2 = true;
    $(document).ready(function () {
        $("#ddPageSize").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            value: 10,
            dataSource: [
              { text: "5", value: "5" },
              { text: "10", value: "10" },
              { text: "15", value: "15" },
              { text: "20", value: "20" }
            ]
        });
        $("#ddPageSize2").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            value: 10,
            dataSource: [
              { text: "5", value: "5" },
              { text: "10", value: "10" },
              { text: "15", value: "15" },
              { text: "20", value: "20" }
            ]
        });
        $("#FormType").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "--- All Form Types ---",
                value: ""
            },
            dataSource: [
              { text: "Newsletter", value: "Newsletter" },
              { text: "Simple", value: "Simple" },
              { text: "Auto-Submit", value: "Auto-Submit" },
              { text: "Subscription", value: "Subscription" },
            ]
        });
        $("#FormStatus").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "--- All Statuses ---",
                value: ""
            },
            dataSource: [
              { text: "Saved", value: "Saved" },
              { text: "Published", value: "Published" },
              { text: "Updated", value: "Updated" }
            ]
        });
        $("#FormType2").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "--- All Form Types ---",
                value: ""
            },
            dataSource: [
            { text: "Newsletter", value: "Newsletter" },
            { text: "Simple", value: "Simple" },
            { text: "Auto-Submit", value: "AutoSubmit" },
            { text: "Subscription", value: "Subscription" },
            ]
        });
        $("#FormStatus2").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "--- All Statuses ---",
                value: ""
            },
            dataSource: [
               { text: "Saved", value: "Saved" },
               { text: "Published", value: "Published" },
               { text: "Updated", value: "Updated" }
            ]
        });
        $("#SearchCriterion").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "starts with",
                value: "starts"
            },
            dataSource: [
               { text: "contains", value: "like" },
               { text: "equals", value: "equals" },
               { text: "ends with", value: "ends" }
            ]
        });
        $("#SearchCriterion2").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "starts with",
                value: "starts"
            },
            dataSource: [
               { text: "contains", value: "like" },
               { text: "equals", value: "equals" },
               { text: "ends with", value: "ends" }
            ]
        });


    });
    //Events - Grid Event - Grid DataBound where you can get all the filters , sorts and other properties for Grid
    function dataBound() {
        var grid = this;
        this.element.find("[role='gridcell']").each(function () {
            eval($(this).children("script").html());
        });
        grid.tbody.find('>tr').each(function () {
            var dataItem = grid.dataItem(this);
            if (!dataItem.Child) {
                $(this).find(".k-hierarchy-cell a").hide();
            }
        });
        if (firstGridLaod) {
            firstGridLaod = false;
            SetPagerWidget("firstpage");
        }
    }
    function dataBound2() {
        var grid = this;
        this.element.find("[role='gridcell']").each(function () {
            eval($(this).children("script").html());
        });
        grid.tbody.find('>tr').each(function () {
            var dataItem = grid.dataItem(this);
            if (!dataItem.Child) {
                $(this).find(".k-hierarchy-cell a").hide();
            }
        });
        if (firstGridLaod2) {
            firstGridLaod2 = false;
            SetPagerWidget2("firstpage2");
        }
    }
    //Events - When First , Lats Previous and Next Buttons clicked on Pager.
    function GoToPage(e) {
        SetPagerWidget(e.target.id);
        var data = activeSearchGridParams();
        ReBindGrid(data);
    }
    function GoToPage2(e) {
        SetPagerWidget2(e.target.id);
        var data = inactiveSearchGridParams();
        ReBindGrid2(data);
    }
    //Events - Triggers the Search using Search Criteria
    function Search() {
        SetPagerWidget("firstpage");
        firstGridLaod = true;
        var data = activeSearchGridParams();
        ReBindGrid(data);
    }
    function Search2() {
        SetPagerWidget2("firstpage2");
        firstGridLaod2 = true;
        var data = inactiveSearchGridParams();
        ReBindGrid2(data);
    }

    //Rebinds the Grid with data sends with DataSourceRequest
    function ReBindGrid(obj) {
        var grid = $("#ActiveForms").data("kendoGrid");
        var options = grid.getOptions();
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: targetUrlAct,
                    dataType: "json",
                    data: obj
                }
            }
        })
        options.dataSource.data = dataSource.data;
        options.dataSource.pageSize = obj.PageSize;
        grid.setOptions(options);
    }
    function ReBindGrid2(obj) {
        var grid = $("#InactiveForms").data("kendoGrid");
        var options = grid.getOptions();
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: targetUrlIna,
                    dataType: "json",
                    data: obj
                }
            }
        })
        options.dataSource.data = dataSource.data;
        options.dataSource.pageSize = obj.PageSize;
        grid.setOptions(options);
    }
    //Data Sends with DataSourceRequest- Parameters that needs to be passed to the server
    function activeSearchGridParams() {
        return {
            CustomerID: $("#Customer").val(),
            FormType: $("#FormType").val() == 'Auto-Submit' ? 'AutoSubmit' : $("#FormType").val(),
            FormStatus: $("#FormStatus").val(),
            FormName: $("#FormName").val(),
            SearchCriterion: $("#SearchCriterion").val(),
            PageNumber: $("#pagerInputPageNumber").val(),
            PageSize: $("#ddPageSize").val()
        };
    }
    function inactiveSearchGridParams() {
        return {
            CustomerID: $("#Customer2").val(),
            FormType: $("#FormType2").val() == 'Auto-Submit' ? 'AutoSubmit' : $("#FormType2").val(),
            FormStatus: $("#FormStatus2").val(),
            FormName: $("#FormName2").val(),
            SearchCriterion: $("#SearchCriterion2").val(),
            PageNumber: $("#pagerInputPageNumber2").val(),
            PageSize: $("#ddPageSize2").val()
        };
    }
    //Function - Rebinds the Grid on Page Number input chnaged or Page size changed
    function RebindOnPageOrSizeChange() {
        if (parseInt($("#pagerInputPageNumber").val()) > 0 && !isNaN(parseInt($("#pagerInputPageNumber").val())) && $("#pagerInputPageNumber").val() <= parseInt($("#pagerTotalItems").text())) {
            SetPagerWidget($("#pagerInputPageNumber").val());
            var data = activeSearchGridParams();
            ReBindGrid(data);
        }
        else {
            showMessage({
                type: 'Error',
                text: 'Please enter valid page number.',
                autoClose: false
            });
        }
    }
    function RebindOnPageOrSizeChange2() {
        if (parseInt($("#pagerInputPageNumber2").val()) > 0 && !isNaN(parseInt($("#pagerInputPageNumber2").val())) && $("#pagerInputPageNumber2").val() <= parseInt($("#pagerTotalItems2").text())) {
            SetPagerWidget($("#pagerInputPageNumber2").val());
            var data = inactiveSearchGridParams();
            ReBindGrid2(data);
        }
        else {
            showMessage({
                type: 'Error',
                text: 'Please enter valid page number.',
                autoClose: false
            });
        }
    }
    //This drives the server side paging by getting current page and setting all Pager messages
    function SetPagerWidget(id) {
        var totalrecordCount = 0;
        var grid = $("#ActiveForms").data("kendoGrid");
        if (grid.dataSource.view()[0]) {
            totalrecordCount = parseInt(grid.dataSource.view()[0].TotalRecordCounts);
        }
        var pagesize = parseInt($("#ddPageSize").val());
        var currentpage = parseInt($("#pagerInputPageNumber").val());
        var lastpage = parseInt(totalrecordCount / pagesize) + 1;

        var firstpage = 1;

        if (id == "firstpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else {
                currentpage = firstpage;
            }
        }
        else if (id == "prevpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else
                currentpage = currentpage - 1;
        }
        else if (id == "nextpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = currentpage + 1;
        }
        else if (id == "lastpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = lastpage;
        }
        else {
            currentpage = parseInt(id);
        }
        var start = ((currentpage - 1) * pagesize + 1);
        var end = (currentpage * pagesize) < totalrecordCount ? (currentpage * pagesize) : totalrecordCount;
        var displaymessage = start + " - " + end + " of " + totalrecordCount + " items";

        $("#currentpage").text(currentpage);
        $("#pagerDisplay").text(displaymessage);
        $("#pagerTotalItems").text(lastpage);
        $("#pagerInputPageNumber").val(currentpage);
    }
    function SetPagerWidget2(id) {
        var totalrecordCount = 0;
        var grid = $("#InactiveForms").data("kendoGrid");
        if (grid.dataSource.view()[0]) {
            totalrecordCount = parseInt(grid.dataSource.view()[0].TotalRecordCounts);
        }
        var pagesize = parseInt($("#ddPageSize2").val());
        var currentpage = parseInt($("#pagerInputPageNumber2").val());
        var lastpage = parseInt(totalrecordCount / pagesize) + 1;

        var firstpage = 1;

        if (id == "firstpage2") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else {
                currentpage = firstpage;
            }
        }
        else if (id == "prevpage2") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else
                currentpage = currentpage - 1;
        }
        else if (id == "nextpage2") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = currentpage + 1;
        }
        else if (id == "lastpage2") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = lastpage;
        }
        else {
            currentpage = parseInt(id);
        }
        var start = ((currentpage - 1) * pagesize + 1);
        var end = (currentpage * pagesize) < totalrecordCount ? (currentpage * pagesize) : totalrecordCount;
        var displaymessage = start + " - " + end + " of " + totalrecordCount + " items";

        $("#currentpage2").text(currentpage);
        $("#pagerDisplay2").text(displaymessage);
        $("#pagerTotalItems2").text(lastpage);
        $("#pagerInputPageNumber2").val(currentpage);
    }
</script>

<script id="Child" type="text/kendo-tmpl">
    <table>
        <tr>
            <th>Customer Name</th>
            <th>Form Name</th>
            <th>Form Type</th>
            <th>Status</th>
            <th>Updated By</th>
            <th>Last Updated</th>
            <th>Last Published</th>
            <th></th>
        </tr>
        <tr>
            <td>#= Child.CustomerName#</td>
            <td>#= Child.Name#</td>
            <td>#= Child.Type#</td>
            <td>#= Child.Status#</td>
            <td>#= Child.UpdatedBy != null ? Child.UpdatedBy : String.empty #</td>
            <td>#= getDate(Child.LastUpdated)#</td>
            <td>#= getDate(Child.LastPublished)#</td>
            <td role='gridcell' style="width:95px">@GetChildActions()</td>
        </tr>
    </table>
</script>

<div class="gridttl">
    <div class="gridttlbox">
        <span>ACTIVE FORMS</span>
    </div>
</div>
<div class="gridttl" style="background-color:white; height: 0px; padding: 10px 0;">
    @Html.Kendo().Button().Name("NewForm").Content("Add New Form<i class='km-icon icon-kmplus-circled-1'></i>").HtmlAttributes(new { onclick = "addForm()", @class = "btn btn-blue2 float-right" })
</div>

<div id="SearchPanel" style="margin:20px 40px;">
    <label class="lbl">Customer Name:</label>
    
    @(Html.Kendo().DropDownList()
            .Name("Customer")
            .HtmlAttributes(new { style = "width:450px" })
            .BindTo(new SelectList(channelCustomers,
            "CustomerID", "CustomerName")))
    <label class="lbl" style="margin-left:20px;">Form Type:</label>
    <input id="FormType" />
    <label class="lbl" style="margin-left:20px;">Form Status:</label>
    <input id="FormStatus" style="width:140px" />
    <label class="lbl" style="margin-left:15px;">Form Name:</label>  
    <input id="SearchCriterion" style="width:100px"/>  
   
    @Html.Kendo().TextBox().Name("FormName").HtmlAttributes(new { style = "width:400px" })
    <input type="button" class="k-button" value="Search" id="search" onclick="Search()" style="margin-left:20px;" />
</div>
@*@GetForms(Model.ActiveForms, "ActiveForms")*@
@{
    var name = "ActiveForms";
    Html.Kendo()
    .Grid<FormViewModel>()
    .Name(name)
    .Events(x => x.DataBound("dataBound"))
    .Columns(columns =>
    {
        columns.Bound(p => p.CustomerName).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Customer Name").HtmlAttributes(new { style = "overflow: hidden; width:350px" });
        columns.Bound(p => p.Name).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Name").HtmlAttributes(new { style = "overflow:hidden;text-overflow:ellipsis;" });

        columns.Bound(p => p.Type).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Type").Width("160px");
        columns.Bound(p => p.Status).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Status").Width("160px");

        columns.Bound(p => p.UpdatedBy).Filterable(false).Title("Updated By").Width("190px");
        columns.Bound(p => p.LastUpdated).Filterable(false).Format(DateTimeFormat).Title("Last Updated").Width("120px");
        columns.Bound(p => p.LastPublished).Filterable(false).Format(DateTimeFormat).Title("Last Published").Width("120px");

        columns.Bound(p => p).ClientTemplate(GetActions(name).ToString()).Filterable(false).Sortable(false).HtmlAttributes(new { @style = "width:95px" });
    })
    .Sortable(sortable => sortable.SortMode(GridSortMode.SingleColumn))//Sort Based on Single column at a time, you can cnfigure allow for unsorting
    .Pageable(page => page.Enabled(false))
    .Filterable(filter => filter.Enabled(false))
    .DataSource(dataSource => dataSource
        .Ajax()        
        .Read(read => read.Data("activeSearchGridParams").Action("ActiveFormsReadToGrid", "Forms"))
        .PageSize(PageSize)
        .ServerOperation(true) //Get Data from Server
    )
    .ClientDetailTemplateId("Child")
    .Render();
}
<div id="pager" class="k-pager-wrap k-grid-pager k-widget k-floatwrap">
    <a class="k-link k-pager-nav k-state-disabled k-pager-first" title="Go to the first page" tabindex="-1">
        <span onclick="GoToPage(event)" id="firstpage" class="k-icon k-i-seek-w">seek-w</span>
    </a>
    <a class="k-link k-pager-nav k-state-disabled" title="Go to the previous page" tabindex="-1">
        <span onclick="GoToPage(event)" id="prevpage" class="k-icon k-i-arrow-w">arrow-w</span>
    </a>

    <ul class="k-pager-numbers k-reset">
        <li class="k-current-page"><span class="k-link k-pager-nav">1</span></li>
        <li><span class="k-state-selected" id="currentpage">1</span></li>

    </ul>
    <span class="k-pager-input k-label">Page<input class="k-textbox" id="pagerInputPageNumber" onchange="RebindOnPageOrSizeChange()">of <span id="pagerTotalItems"></span></span>
    <a class="k-link k-pager-nav" title="Go to the next page" tabindex="-1">
        <span onclick="GoToPage(event)" id="nextpage" class="k-icon k-i-arrow-e">arrow-e</span>
    </a>
    <a class="k-link k-pager-nav k-pager-last k-state-disabled" title="Go to the last page" tabindex="-1">
        <span onclick="GoToPage(event)" id="lastpage" class="k-icon k-i-seek-e">seek-e</span>
    </a>

    <span class="k-pager-sizes k-label">
        <span title="" class="k-widget k-dropdown k-header">
            <input id="ddPageSize" onchange="RebindOnPageOrSizeChange()" />
        </span>items per page
    </span>
    <span class="float-right" style="margin-right:10px;">
        <lable id="pagerDisplay"></lable>
    </span>
</div>

<div class="gridttl">
    <div class="gridttlbox">
        <span>INACTIVE FORMS</span>
    </div>
</div>
<div id="SearchPanel2" style="margin:20px 40px;">
    <label class="lbl">Customer Name:</label>
    @(Html.Kendo().DropDownList()
            .Name("Customer2")
            .HtmlAttributes(new { style = "width:450px" })
            .BindTo(new SelectList(channelCustomers,
            "CustomerID", "CustomerName")))
    <label class="lbl" style="margin-left:20px;">Form Type:</label>
    <input id="FormType2" />
    <label class="lbl" style="margin-left:20px;">Form Status:</label>
    <input id="FormStatus2" style="width:140px" />
    <label class="lbl" style="margin-left:15px;">Form Name:</label>
    <input id="SearchCriterion2" style="width:100px" />  
     @Html.Kendo().TextBox().Name("FormName2").HtmlAttributes(new { style = "width:400px" })
    <input type="button" class="k-button" value="Search" onclick="Search2()" style="margin-left:20px;" />
</div>

@*@GetForms(Model.InactiveForms, "InactiveForms")*@
@{
    var nameIna = "InactiveForms";
    Html.Kendo()
    .Grid<FormViewModel>()
    .Name(nameIna)
    .Events(x => x.DataBound("dataBound2"))
    .Columns(columns =>
    {
        columns.Bound(p => p.CustomerName).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Customer Name").HtmlAttributes(new { style = "overflow: hidden; width:350px" });
        columns.Bound(p => p.Name).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Name").HtmlAttributes(new { style = "overflow:hidden;text-overflow:ellipsis;" });

        columns.Bound(p => p.Type).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Type").Width("160px");
        columns.Bound(p => p.Status).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Status").Width("160px");

        columns.Bound(p => p.UpdatedBy).Filterable(false).Title("Updated By").Width("190px");
        columns.Bound(p => p.LastUpdated).Filterable(false).Format(DateTimeFormat).Title("Last Updated").Width("120px");
        columns.Bound(p => p.LastPublished).Filterable(false).Format(DateTimeFormat).Title("Last Published").Width("120px");

        columns.Bound(p => p).ClientTemplate(GetActions(nameIna).ToString()).Filterable(false).Sortable(false).HtmlAttributes(new { @style = "width:95px" });
    })
    .Sortable(sortable => sortable.SortMode(GridSortMode.SingleColumn))//Sort Based on Single column at a time, you can cnfigure allow for unsorting
    .Pageable(page => page.Enabled(false))
    .Filterable(filter => filter.Enabled(false))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Data("inactiveSearchGridParams").Action("InactiveFormsReadToGrid", "Forms"))
        .PageSize(PageSize)
        .ServerOperation(true) //Get Data from Server
    )
    .ClientDetailTemplateId("Child")
    .Render();
}
<div id="pager2" class="k-pager-wrap k-grid-pager k-widget k-floatwrap">
    <a class="k-link k-pager-nav k-state-disabled k-pager-first" title="Go to the first page" tabindex="-1">
        <span onclick="GoToPage2(event)" id="firstpage2" class="k-icon k-i-seek-w">seek-w</span>
    </a>
    <a class="k-link k-pager-nav k-state-disabled" title="Go to the previous page" tabindex="-1">
        <span onclick="GoToPage2(event)" id="prevpage2" class="k-icon k-i-arrow-w">arrow-w</span>
    </a>

    <ul class="k-pager-numbers k-reset">
        <li class="k-current-page"><span class="k-link k-pager-nav">1</span></li>
        <li><span class="k-state-selected" id="currentpage2">1</span></li>

    </ul>
    <span class="k-pager-input k-label">Page<input class="k-textbox" id="pagerInputPageNumber2" onchange="RebindOnPageOrSizeChange2()">of <span id="pagerTotalItems2"></span></span>
    <a class="k-link k-pager-nav" title="Go to the next page" tabindex="-1">
        <span onclick="GoToPage2(event)" id="nextpage2" class="k-icon k-i-arrow-e">arrow-e</span>
    </a>
    <a class="k-link k-pager-nav k-pager-last k-state-disabled" title="Go to the last page" tabindex="-1">
        <span onclick="GoToPage2(event)" id="lastpage2" class="k-icon k-i-seek-e">seek-e</span>
    </a>

    <span class="k-pager-sizes k-label">
        <span title="" class="k-widget k-dropdown k-header">
            <input id="ddPageSize2" onchange="RebindOnPageOrSizeChange2()" />
        </span>items per page
    </span>
    <span class="float-right" style="margin-right:10px;">
        <lable id="pagerDisplay2"></lable>
    </span>
</div>

@helper GetForms(IEnumerable<FormViewModel> source, string name)
{    


    Html.Kendo()
        .Grid(source)
        .Name(name)
        .Columns(columns =>
        {
            columns.Bound(p => p.CustomerName).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Customer Name").HtmlAttributes(new { style = "overflow: hidden; width:350px" });
            columns.Bound(p => p.Name).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Name").HtmlAttributes( new { style = "overflow:hidden;text-overflow:ellipsis;" });

            columns.Bound(p => p.Type).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Form Type").Width("160px");
            columns.Bound(p => p.Status).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Status").Width("160px");

            columns.Bound(p => p.UpdatedBy).Filterable(false).Title("Updated By").Width("190px");
            columns.Bound(p => p.LastUpdated).Filterable(false).Format(DateTimeFormat).Title("Last Updated").Width("120px");
            columns.Bound(p => p.LastPublished).Filterable(false).Format(DateTimeFormat).Title("Last Published").Width("120px");

            columns.Bound(p => p).ClientTemplate(GetActions(name).ToString()).Filterable(false).Sortable(false).HtmlAttributes(new { @style = "width:95px" });
        })
        .Pageable()
        .Groupable()
        .Filterable(x => x.Mode(GridFilterMode.Row))
        .Sortable(x => x.AllowUnsort(false))
        .Resizable(x => x.Columns(true))
        .Events(x => x.DataBound("dataBound"))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Model(m =>
            {
                m.Id(y => y.Id);
            })
            .PageSize(PageSize)
            .ServerOperation(false)
        )
        .ClientDetailTemplateId("Child")
        .Render();
}

@Html.Partial("Partials/Modals/_Source")
@Html.Partial("Partials/Modals/_Report")


@helper  GetActions(string name)
{
    @(Html.Kendo()
        .Menu()
        .Name("Menu#=Id#")
        .Direction(MenuDirection.Right)
        .Orientation(MenuOrientation.Vertical)
        .Animation(false)
        .Items(
            items => items.Add().Text("Actions").HtmlAttributes(new { @class = "k-menu-actions" }).Items(
                innerItems =>
                {
                    innerItems.Add().Text("View").HtmlAttributes(new { style = "#=getVisibility(Status, 'ViewOnly')#" }).Action("ViewOnly", "Forms", new { id = "#=Id#" });
                    innerItems.Add().Text("Edit").HtmlAttributes(new { style = "#=getVisibility(Status, 'Edit')#" }).Action("Edit", "Forms", new { id = "#=Id#" });
                    innerItems.Add().Text("Copy").HtmlAttributes(new { onclick = "copyForm('#=Id#')" });
                    innerItems.Add().Text("Delete").HtmlAttributes(new { style = "#=getVisibility(Status, 'Delete')#", onclick = "deleteForm('#=Id#')" });
                    innerItems.Add().Text("Preview").Url(string.Format("{0}?tokenuid=#=TokenUID#", Config("GetFormHandlerUrl"))).LinkHtmlAttributes(new { target = "_blank" }).HtmlAttributes(new { style = "#=getVisibilityPreview(Type)#" });
                    innerItems.Add().Text("Publish").HtmlAttributes(new { style = "#=getVisibility(Status, 'Publish')#", onclick = "publishForm('#=Id#')" });
                    innerItems.Add().Text("#=getActivationButtonText('" + name + "')#").HtmlAttributes(new { onclick = "activateForm(this)" });
                    innerItems.Add().Text("Report").HtmlAttributes(new { style = "#=getVisibility(Status, 'Report')#", onclick = "ReportOpen('#=TokenUID#')" });
                    innerItems.Add().Text("Source").HtmlAttributes(new { onclick = "SourceOpen('#=TokenUID#','#=Type#')" });
                }
            )
        ).ToClientTemplate())
}

@helper  GetChildActions()
{
    @(Html.Kendo()
        .Menu()
        .Name("Menu#=ChildId#")
        .Direction(MenuDirection.Right)
        .Orientation(MenuOrientation.Vertical)
        .Animation(false)
        .Items(
            items => items.Add().Text("Actions").HtmlAttributes(new { @class = "k-menu-actions" }).Items(
                innerItems =>
                {
                    innerItems.Add().Text("Edit").Action("Edit", "Forms", new { id = "#=ChildId#" });
                    innerItems.Add().Text("Delete").HtmlAttributes(new { onclick = "deleteForm('#=ChildId#')" });
                    innerItems.Add().Text("Publish").HtmlAttributes(new { onclick = "publishForm('#=ChildId#')" });
                    innerItems.Add().Text("Preview").Url(string.Format("{0}?tokenuid=#=TokenUID#&child=true", Config("GetFormHandlerUrl"))).LinkHtmlAttributes(new { target = "_blank" }).HtmlAttributes(new { style = "#=getVisibilityPreview(Type)#" });
                }
            )
        ).ToClientTemplate())
}

@{
        Html.Kendo()
            .Window()
            .Modal(true)
            .Animation(false)
            .Name("FormWindow")
            .Content(
            @<text>
                @using (Ajax.BeginForm("Action", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "FormContent",
                    //OnFailure = "onError"
                }))
                {
                    <div id="FormContent"></div>
                } 
            </text>
)
        .Visible(false)
        .Render();
}

@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Animation(false)
        .Name("DeleteWindow")
        .Title("Delete")
        .Content(
            @<text>
                @using (Ajax.BeginForm("Delete", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "deleteDiv",
                    //OnFailure = "onError"
                }))
                {
                    <div id="deleteDiv">
                        @Html.Partial("Partials/Modals/_FormDelete")
                    </div>
                }
            </text>
)
        .Visible(false)
        .Render();
}

@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Animation(false)
        .Name("PublishWindow")
        .Title("Publish")
        .Content(
            @<text>
                @using (Ajax.BeginForm("Publish", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "publishDiv",
                    //OnFailure = "onError"
                }))
                {
                    <div id="publishDiv">
                        @Html.Partial("Partials/Modals/_FormPublish")
                    </div>
                }
            </text>
)
        .Visible(false)
        .Render();
}

@{
    Html.Kendo()
        .Window()
        .Modal(true)
        .Animation(false)
        .Name("ActivationWindow")
        .Title("Activation")
        .Content(
            @<text>
                @using (Ajax.BeginForm("ChangeActiveState", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "activateDiv",
                    //OnFailure = "onError"
                }))
                {
                    <div id="activateDiv">
                        @Html.Partial("Partials/Modals/_FormActivate", new ActivateFormModel())
                    </div>
                }
            </text>
        )
        .Events(e => e.Open("initActivationControls"))
        .Visible(false)
        .Render();
}

@Html.Partial("Partials/Modals/_AddField")
@Html.Partial("Partials/Modals/_GroupExplorer")
@Html.Partial("Partials/Modals/_ChangeGroupManager")