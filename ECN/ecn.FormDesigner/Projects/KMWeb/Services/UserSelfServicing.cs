using System;
using System.Configuration;
using System.Text;
using ECN_Framework_Entities.Communicator;
using KMManagers;
using KMModels.PostModels;
using KMPlatform.Entity;

namespace KMWeb.Services
{
    public class UserSelfServicing : IUserSelfServicing
    {
        private readonly IUserCacheService _userCacheService;

        public UserSelfServicing(IUserCacheService userCacheService)
        {
            _userCacheService = userCacheService;
        }

        public string ResendPassword(string emailAddress, string other, int groupId,
            int formId, string otherIdentification, SubscriberLoginManager subscriberLoginManager)
        {
            string response;
            try
            {
                var user = _userCacheService.GetUser();
                var group = ECN_Framework_BusinessLayer.Communicator.Group.GetByGroupID_NoAccessCheck(groupId);
                var email = GetEmail(emailAddress, user, group, other, groupId, otherIdentification, true);
                
                response = SaveEmail(formId, @group, email, user, subscriberLoginManager);
            }
            catch (SelfServicingException)
            {
                throw;
            }
            catch (Exception ex)
            {
                KM.Common.Entity.ApplicationLog.LogCriticalError(ex, "FormsController.PublicFormSendPassword",
                    Convert.ToInt32(ConfigurationManager.AppSettings["KMCommon_Application"]));
                throw new SelfServicingException(ex.Message, "500");
            }

            return response;
        }
        
        public string ChangeEmailAndResendPassword(string newEmailAddress, string emailAddress, string other, int groupId,
            int formId, string otherIdentification, SubscriberLoginManager subscriberLoginManager)
        {
            string response;
            try
            {
                // Check if newEmailAddress exist  
                if (string.IsNullOrWhiteSpace(newEmailAddress))
                {
                    throw new SelfServicingException("Email Address cannot be empty.", "500");
                }

                User user = _userCacheService.GetUser();
                Group group = ECN_Framework_BusinessLayer.Communicator.Group.GetByGroupID_NoAccessCheck(groupId);
                Email e = ECN_Framework_BusinessLayer.Communicator.Email.GetByEmailAddress(newEmailAddress, group.CustomerID);
                if (e != null)
                {
                    throw new SelfServicingException("Email Address already exist.", "500");
                }

                var email = GetEmail(emailAddress, user, group, other, groupId, otherIdentification, false, false);

                // Update Profile's Email Address
                email.EmailAddress = newEmailAddress;
                ECN_Framework_BusinessLayer.Communicator.Email.Save(email);

                response = SaveEmail(formId, @group, email, user, subscriberLoginManager);
            }
            catch (SelfServicingException)
            {
                throw;
            }
            catch (Exception ex)
            {
                KM.Common.Entity.ApplicationLog.LogCriticalError(ex, "FormsController.PublicFormSendPassword",
                    Convert.ToInt32(ConfigurationManager.AppSettings["KMCommon_Application"]));
                throw new SelfServicingException(ex.Message, "500");
            }

            return response;
        }

        private Email GetEmail(string emailAddress, User user, Group group, string other, 
            int groupId, string otherIdentification, bool checkForAutoGeneratedEmail, bool importEmail = true)
        {
            if (string.IsNullOrWhiteSpace(emailAddress))
            {
                if (string.IsNullOrWhiteSpace(other) || string.IsNullOrWhiteSpace(otherIdentification))
                {
                    throw new SelfServicingException("The SubscriberID you entered doesn't exist.", "404");
                }

                var userIdentification = new UserIdentificationData();
                userIdentification.Initialize(other, otherIdentification);
                var emailId = ECN_Framework_BusinessLayer.Communicator.EmailGroup.FDSubscriberLogin(groupId,
                    emailAddress, userIdentification.UdfId, userIdentification.UdfValue, "", userIdentification.User1,
                    userIdentification.User2, userIdentification.User3, userIdentification.User4,
                    userIdentification.User5, userIdentification.User6);
                if (emailId == 0)
                {
                    throw new SelfServicingException($"The {otherIdentification} you entered doesn't exist.",
                        "500");
                }

                emailAddress = ECN_Framework_BusinessLayer.Communicator.Email.GetByEmailID_NoAccessCheck(emailId)
                    .EmailAddress;
            }

            // Check if email is Autogenerated
            if (checkForAutoGeneratedEmail && emailAddress.ToLower().EndsWith("kmpsgroup.com", StringComparison.OrdinalIgnoreCase))
            {
                throw new SelfServicingException("Please Enter a Valid Email Address", "404");
            }

            EmailGroup eg =
                ECN_Framework_BusinessLayer.Communicator.EmailGroup.GetByEmailAddressGroupID_NoAccessCheck(emailAddress,
                    groupId);
            if (eg == null || eg.SubscribeTypeCode.ToUpper() != "S")
            {
                throw new SelfServicingException("Email Address is Unsubscribed", "500");
            }

            Email email = ECN_Framework_BusinessLayer.Communicator.Email.GetByEmailIDGroupID_NoAccessCheck(eg.EmailID, groupId);
            if (email == null)
            {
                throw new SelfServicingException("Email Address not found", "500");
            }

            //email.Password doesn't exist, adding it
            if (string.IsNullOrWhiteSpace(email.Password))
            {
                // Resetting password
                var newUserPassword = Guid.NewGuid().ToString().Substring(0, 7);
                email.Password = newUserPassword;

                if (importEmail)
                {
                    ImportEmail(email, user, group, groupId);
                }
            }

            return email;
        }

        private static void ImportEmail(Email email, User user, Group group, int groupId)
        {
            var sbProfileXml = new StringBuilder();
            sbProfileXml.Append("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><XML>");
            sbProfileXml.Append($"<Emails><emailaddress>{email.EmailAddress}</emailaddress><password>{email.Password}</password></Emails>");

            ECN_Framework_BusinessLayer.Communicator.EmailGroup.ImportEmails_NoAccessCheck(user,
                @group.CustomerID, groupId, sbProfileXml + "</XML>",
                "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><XML></XML>", "HTML", "S", false, "",
                "Ecn.FormDesigner.KMWeb.Controllers.FormsController.PublicFormSendPassword");
        }

        private static string SaveEmail(int formId, Group @group, Email email, User user,
            SubscriberLoginManager subscriberLoginManager)
        {
            string response;
            var FSLPM = subscriberLoginManager.GetByID<FormSubscriberLoginPostModel>(formId);
            var ed = new EmailDirect();
            ed.CustomerID = @group.CustomerID;
            ed.EmailAddress = email.EmailAddress;
            ed.EmailSubject = FSLPM.ForgotPasswordSubject;
            ed.FromName = FSLPM.ForgotPasswordFromName;
            ed.Process = "FormDesigner - PublicFormSendPassword";
            ed.Source = "FormDesigner";
            ed.ReplyEmailAddress = "formdesigner@ecn5.com";
            ed.FromEmailAddress = "formdesigner@ecn5.com";
            ed.SendTime = DateTime.Now;
            ed.Status = ECN_Framework_Common.Objects.EmailDirect.Enums.Status.Pending.ToString();
            ed.CreatedUserID = user.UserID;
            ed.Content = FSLPM.ForgotPasswordNotificationHTML;
            ed.Content = ed.Content.Replace("%%Email%%", email.EmailAddress);
            ed.Content = ed.Content.Replace("%%Password%%", email.Password);
            try
            {
                ECN_Framework_BusinessLayer.Communicator.EmailDirect.Save(ed);
                // Send password to users account
                FSLPM.ForgotPasswordMessageHTML =
                    FSLPM.ForgotPasswordMessageHTML.Replace("%%Email%%", ed.EmailAddress);
                response = FSLPM.ForgotPasswordMessageHTML;
            }
            catch (Exception ex)
            {
                KM.Common.Entity.ApplicationLog.LogCriticalError(ex,
                    "FormsController.PublicFormSendPassword",
                    Convert.ToInt32(ConfigurationManager.AppSettings["KMCommon_Application"]));
                throw new SelfServicingException(ex.Message, "500");
            }

            return response;
        }
    }
}