@model List<ecn.communicator.mvc.Models.DataFieldGridList>
<script type="text/javascript">
    var firstGridLoad = true;
    function dataBound() {
        var grid = this;
        this.element.find("[role='gridcell']").each(function () {
            eval($(this).children("script").html());
        });
        if (firstGridLoad) {
            firstGridLoad = false;
            SetPagerWidget("firstpage");
        }
    }
    $(document).ready(function () {
        $("#ddPageSize").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            value: 10,
            dataSource: [
              { text: "5", value: "5" },
              { text: "10", value: "10" },
              { text: "15", value: "15" },
              { text: "20", value: "20" }
            ]
        });
    });

    //Events - When First , Lats Previous and Next Buttons clicked on Pager.
    function GoToPage(e) {
        SetPagerWidget(e.target.id);
        ReBindGrid();
    }

    //Rebinds the Grid with data sends with DataSourceRequest
    function ReBindGrid() {
        var grid = $("#grid").data("kendoGrid");
        var ps = parseInt($("#ddPageSize").val());
        var cp = parseInt($("#InputPageNumber").val());
        grid.dataSource.query({ page: cp, pageSize: ps });
    }
    //Function - Rebinds the Grid on Page Number input chnaged or Page size changed
    function RebindOnPageOrSizeChange() {
        SetPagerWidget("firstpage");
        firstGridLoad = true;
        ReBindGrid();
    }

    function InputPageNumber_KeyDown() {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            if (parseInt($("#InputPageNumber").val()) > 0 && !isNaN(parseInt($("#InputPageNumber").val())) && $("#InputPageNumber").val() <= parseInt($("#pagerTotalItems").text())) {
                if (typeof e != 'undefined') {
                    SetPagerWidget(e.target.id);
                }
                else {
                    var spage = $("#InputPageNumber").val();
                    SetPagerWidget(spage);
                }
                ReBindGrid();
            }
            else {
                showMessage({
                    type: 'Error',
                    text: 'Please enter valid page number.',
                    autoClose: false,
                    action: function () {
                        SetPagerWidget("firstpage");
                        firstGridLoad = true;
                        ReBindGrid();
                    }
                });
            }
        }
    }

    //This drives the server side paging by getting current page and setting all Pager messages
    function SetPagerWidget(id) {
        var totalrecordCount = 0;
        var grid = $("#grid").data("kendoGrid");
        if (grid.dataSource.view()[0]) {
            totalrecordCount = parseInt(grid.dataSource.total());
        }
        var pagesize = parseInt($("#ddPageSize").val());
        var currentpage = parseInt($("#InputPageNumber").val());
        var lastpage = 0;
        if (totalrecordCount % pagesize > 0) {
            lastpage = parseInt(totalrecordCount / pagesize) + 1;
        }
        else {
            lastpage = parseInt(totalrecordCount / pagesize);
        }
        var firstpage = 1;

        if (id == "firstpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else {
                currentpage = firstpage;

            }
        }
        else if (id == "prevpage") {
            if (currentpage == firstpage)
                currentpage = currentpage;
            else
                currentpage = currentpage - 1;
        }
        else if (id == "nextpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = currentpage + 1;

        }
        else if (id == "lastpage") {
            if (currentpage == lastpage)
                currentpage = currentpage;
            else
                currentpage = lastpage;

        }
        else {
            currentpage = parseInt(id);
        }
        var start = ((currentpage - 1) * pagesize + 1);
        var end = (currentpage * pagesize) < totalrecordCount ? (currentpage * pagesize) : totalrecordCount;
        var displaymessage = start + " - " + end + " of " + totalrecordCount + " items";

        $("#currentpage").text(currentpage);
        $("#pagerDisplay").text(displaymessage);
        $("#pagerTotalItems").text(lastpage);
        $("#InputPageNumber").val(currentpage);
    }

    function checkChange(e) {
        RebindOnPageOrSizeChange()
    }
</script>
@(Html.Kendo()
        .Grid(Model)
        .Name("grid")
        .Events(x => x.DataBound("dataBound"))
        .Columns(columns =>
        {
            columns.Bound(e => e.LongName).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Long Description").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle; text-align: center;" }).HeaderHtmlAttributes(new { @style = "text-align:center; vertical-align:middle; text-align: center;" });
            columns.Bound(e => e.CodeSnippet).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Code Snippet").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle; text-align: center;" }).HeaderHtmlAttributes(new { @style = "text-align:center; vertical-align:middle; text-align: center;" });
            columns.Bound(e => e.Transactional).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Transactional").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle; text-align: center;" }).HeaderHtmlAttributes(new { @style = "text-align:center; vertical-align:middle; text-align: center;" });
            columns.Bound(e => e.GroupingName).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("Transaction").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle; text-align: center;" }).HeaderHtmlAttributes(new { @style = "text-align:center; vertical-align:middle; text-align: center;" });
            columns.Bound(e => e.IsPublic).Filterable(x => x.Cell(c => c.ShowOperators(false))).Title("IsPublic").HtmlAttributes(new { @style = "overflow: hidden; vertical-align:middle; text-align: center;" }).HeaderHtmlAttributes(new { @style = "text-align:center; vertical-align:middle; text-align: center;" });
            columns.Bound(e => e).ClientTemplate(GetActions().ToString()).Filterable(false).Sortable(false).HtmlAttributes(new { @style = "width:95px" });
        })
        .Pageable(p => p.Enabled(false))
        .Sortable()
        .HtmlAttributes(new { style = "min-height:400px;min-width:600px;" })
        .DataSource(dataSource => dataSource
            .Ajax()
            .Model(m =>
            {
                m.Id(y => y.GroupDataFieldsID);
            })
            .PageSize(10)
            .ServerOperation(false)
        )
)
<div id="pager" class="k-pager-wrap k-grid-pager k-widget k-floatwrap">
    <a class="k-link k-pager-nav k-state-disabled k-pager-first" title="Go to the first page" tabindex="-1">
        <span onclick="GoToPage(event)" id="firstpage" class="k-icon k-i-seek-w">seek-w</span>
    </a>
    <a class="k-link k-pager-nav k-state-disabled" title="Go to the previous page" tabindex="-1">
        <span onclick="GoToPage(event)" id="prevpage" class="k-icon k-i-arrow-w">arrow-w</span>
    </a>

    <ul class="k-pager-numbers k-reset">
        <li class="k-current-page"><span class="k-link k-pager-nav">1</span></li>
        <li><span class="k-state-selected" id="currentpage">1</span></li>

    </ul>
    <span class="k-pager-input k-label">Page<input class="k-textbox" id="InputPageNumber" onkeydown="InputPageNumber_KeyDown()">of <span id="pagerTotalItems"></span></span>
    <a class="k-link k-pager-nav" title="Go to the next page" tabindex="-1">
        <span onclick="GoToPage(event)" id="nextpage" class="k-icon k-i-arrow-e">arrow-e</span>
    </a>
    <a class="k-link k-pager-nav k-pager-last k-state-disabled" title="Go to the last page" tabindex="-1">
        <span onclick="GoToPage(event)" id="lastpage" class="k-icon k-i-seek-e">seek-e</span>
    </a>

    <span class="k-pager-sizes k-label">
        <span title="" class="k-widget k-dropdown k-header">
            <input id="ddPageSize" onchange="checkChange()" />
        </span>items per page
    </span>
    <span class="float-right" style="margin-right:10px;">
        <lable id="pagerDisplay"></lable>
    </span>
</div>

@helper  GetActions()
{
    @(Html.Kendo()
        .Menu()
        .Name("Menu#=GroupDataFieldsID#")
        .Direction(MenuDirection.Left)
        .Orientation(MenuOrientation.Vertical)
        .Animation(false)
        .Items(
            items => items.Add().Text("Actions").HtmlAttributes(new { @class = "k-menu-actions" }).Items(
                innerItems =>
                {
                    innerItems.Add().Text("").Action("Index", "Group").HtmlAttributes(new { @style = "display:none;" });
                    innerItems.Add().Text("Edit").HtmlAttributes(new { onclick = "editUDFModal('#=GroupDataFieldsID#')" });
                    innerItems.Add().Text("Delete").HtmlAttributes(new { onclick = "deleteUDFModal('#=GroupDataFieldsID#')" });
                }
            )
        ).ToClientTemplate())
}

